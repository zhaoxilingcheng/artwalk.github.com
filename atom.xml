<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Artwalk&#39;s Blog</title>
  
  <subtitle>游走的艺术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://artwalk.github.io/"/>
  <updated>2018-04-08T04:15:12.929Z</updated>
  <id>http://artwalk.github.io/</id>
  
  <author>
    <name>Artwalk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to schedule iMessages on Mac</title>
    <link href="http://artwalk.github.io/2018/03/25/How-to-schedule-iMessages-on-Mac/"/>
    <id>http://artwalk.github.io/2018/03/25/How-to-schedule-iMessages-on-Mac/</id>
    <published>2018-03-25T11:25:04.000Z</published>
    <updated>2018-04-08T04:15:12.929Z</updated>
    
    <content type="html"><![CDATA[<p>First open <code>Terminal</code> on your Mac and copy and paste these command lines as follows:</p><h2 id="Send-iMessage-by-Shell"><a href="#Send-iMessage-by-Shell" class="headerlink" title="Send iMessage by Shell"></a>Send iMessage by <code>Shell</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=<span class="string">"<span class="variable">$HOME</span>/Documents/sendiMessage.sh"</span></span><br><span class="line">str=<span class="string">'tell application "Messages" to send "TEXT" to buddy "NAME"'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"#!/bin/zsh \nosascript -e '<span class="variable">$str</span>'"</span> &gt; <span class="variable">$file</span></span><br><span class="line">open <span class="variable">$file</span></span><br></pre></td></tr></table></figure><p>You will see a file opened by your default text edit app and the file shows:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/zsh </span></span><br><span class="line">osascript -e <span class="string">'tell application "Messages" to send "TEXT" to buddy "NAME"'</span></span><br></pre></td></tr></table></figure><p>Notice that you should replace <code>TEXT</code> with the text you what to send and <code>NAME</code> with the name in your <strong>Contacts</strong> app.</p><p>Don’t forget to <strong>Save</strong> the file.</p><h2 id="Crontab-on-mac"><a href="#Crontab-on-mac" class="headerlink" title="Crontab on mac"></a><code>Crontab</code> on mac</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo touch /etc/crontab</span><br></pre></td></tr></table></figure><p>You should run this line above as the  <code>com.vix.cron</code> will check the <code>/etc/crontab</code> is exist or not on macOS.</p><p>Type your password of the Mac.</p><h2 id="Schedule-the-shell-with-Crontab"><a href="#Schedule-the-shell-with-Crontab" class="headerlink" title="Schedule the shell with Crontab"></a>Schedule the shell with <code>Crontab</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00 10 25 3 * zsh ~/Documents/sendiMessage.sh</span><br></pre></td></tr></table></figure><p>As the <a href="http://www.adminschoice.com/crontab-quick-reference" target="_blank" rel="noopener">Crontab – Quick Reference</a> shows:</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">00    10    <span class="symbol">*</span>   <span class="symbol">*</span>    <span class="symbol">*</span>        command to be executed</span><br><span class="line">-     -     -   -    -</span><br><span class="line">|<span class="string">     </span>|<span class="string">     </span>|<span class="string">   </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">     </span>|<span class="string">     </span>|<span class="string">   </span>|<span class="string">    +----- day of week (0 - 6) (Sunday=0)</span></span><br><span class="line">|<span class="string">     </span>|<span class="string">     </span>|<span class="string">   +------- month (1 - 12)</span></span><br><span class="line">|<span class="string">     </span>|<span class="string">     +--------- day of        month (1 - 31)</span></span><br><span class="line">|<span class="string">     +----------- hour (0 - 23)</span></span><br><span class="line"><span class="string">+------------- min (0 - 59)</span></span><br></pre></td></tr></table></figure><p>This shell means your Mac will send the iMessage on 10:00 Mar. 25.</p><p>Modify it to you ideal time then </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>The following step you are using <code>vim</code>, I think that is the hardest part.</p><ol><li>Press <code>i</code>, you will see <code>-- INSERT --</code> on the left bottom of the <code>Terminal</code></li><li>Paste <code>00 10 25 3 * zsh ~/Documents/sendiMessage.sh</code></li><li>Press <code>shift + :</code>  then  type <code>wq</code> , <code>enter</code></li></ol><h2 id="Check-Crontab"><a href="#Check-Crontab" class="headerlink" title="Check Crontab"></a>Check <code>Crontab</code></h2><p><code>crontab -l</code></p><p>You can see <code>00 10 25 3 * zsh ~/Documents/sendiMessage.sh</code> if everything was right.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First open &lt;code&gt;Terminal&lt;/code&gt; on your Mac and copy and paste these command lines as follows:&lt;/p&gt;
&lt;h2 id=&quot;Send-iMessage-by-Shell&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://artwalk.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Programming Assignment: Scrooge Coin</title>
    <link href="http://artwalk.github.io/2018/02/26/Programming-Assignment-Scrooge-Coin/"/>
    <id>http://artwalk.github.io/2018/02/26/Programming-Assignment-Scrooge-Coin/</id>
    <published>2018-02-26T02:45:54.000Z</published>
    <updated>2018-02-26T02:56:27.881Z</updated>
    
    <content type="html"><![CDATA[<p>This is the worst assignment I ever had.</p><p>The <code>TxHandler.java</code> cannot build and run, everything have to guess. As I’m not familiar with <code>JAVA</code>, I met  millions of  grammar errors after submit.</p><p>I have to:</p><ul><li>import packages by manually</li><li>add <code>;</code> after each line</li><li><code>()</code> after <code>if</code></li><li>declare the type of a variable</li></ul><p>That’s why I hate <code>JAVA</code> 😡😡😡.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UTXOPool utxoPool;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a public ledger whose current UTXOPool (collection of unspent transaction outputs) is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> utxoPool&#125;. This should make a copy of utxoPool by using the UTXOPool(UTXOPool uPool)</span></span><br><span class="line"><span class="comment">     * constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxHandler</span><span class="params">(UTXOPool utxoPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.utxoPool = <span class="keyword">new</span> UTXOPool(utxoPool);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if:</span></span><br><span class="line"><span class="comment">     * (1) all outputs claimed by &#123;<span class="doctag">@code</span> tx&#125; are in the current UTXO pool,</span></span><br><span class="line"><span class="comment">     * (2) the signatures on each input of &#123;<span class="doctag">@code</span> tx&#125; are valid,</span></span><br><span class="line"><span class="comment">     * (3) no UTXO is claimed multiple times by &#123;<span class="doctag">@code</span> tx&#125;,</span></span><br><span class="line"><span class="comment">     * (4) all of &#123;<span class="doctag">@code</span> tx&#125;s output values are non-negative, and</span></span><br><span class="line"><span class="comment">     * (5) the sum of &#123;<span class="doctag">@code</span> tx&#125;s input values is greater than or equal to the sum of its output</span></span><br><span class="line"><span class="comment">     *     values; and false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidTx</span><span class="params">(Transaction tx)</span> </span>&#123;</span><br><span class="line">        UTXOPool utxoSet = <span class="keyword">new</span> UTXOPool();</span><br><span class="line">        <span class="keyword">double</span> pSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tx.numInputs(); i++) &#123;</span><br><span class="line">            Transaction.Input in = tx.getInput(i);</span><br><span class="line">            UTXO u = <span class="keyword">new</span> UTXO(in.prevTxHash, in.outputIndex);</span><br><span class="line">            Transaction.Output out = utxoPool.getTxOutput(u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!utxoPool.contains(u)) || (!Crypto.verifySignature(out.address, tx.getRawDataToSign(i), in.signature)) || (utxoSet.contains(u))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            utxoSet.addUTXO(u, out);</span><br><span class="line">            pSum += out.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Transaction.Output out : tx.getOutputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (out.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += out.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pSum &lt; sum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handles each epoch by receiving an unordered array of proposed transactions, checking each</span></span><br><span class="line"><span class="comment">     * transaction for correctness, returning a mutually valid array of accepted transactions, and</span></span><br><span class="line"><span class="comment">     * updating the current UTXO pool as appropriate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Transaction[] handleTxs(Transaction[] possibleTxs) &#123;</span><br><span class="line">        Set&lt;Transaction&gt; vTxs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : possibleTxs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValidTx(tx)) &#123;</span><br><span class="line">                vTxs.add(tx);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Transaction.Input in : tx.getInputs()) &#123;</span><br><span class="line">                    UTXO u = <span class="keyword">new</span> UTXO(in.prevTxHash, in.outputIndex);</span><br><span class="line">                    utxoPool.removeUTXO(u);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tx.numOutputs(); i++) &#123;</span><br><span class="line">                    Transaction.Output out = tx.getOutput(i);</span><br><span class="line">                    UTXO u = <span class="keyword">new</span> UTXO(tx.getHash(), i);</span><br><span class="line">                    utxoPool.addUTXO(u, out);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transaction[] vTxArr = <span class="keyword">new</span> Transaction[vTxs.size()];</span><br><span class="line">        <span class="keyword">return</span> vTxs.toArray(vTxArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is the worst assignment I ever had.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;TxHandler.java&lt;/code&gt; cannot build and run, everything have to guess. As I’m no
      
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://artwalk.github.io/tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>Anomaly Detection &amp; Recommender Systems</title>
    <link href="http://artwalk.github.io/2018/02/11/Anomaly-Detection-Recommender-Systems/"/>
    <id>http://artwalk.github.io/2018/02/11/Anomaly-Detection-Recommender-Systems/</id>
    <published>2018-02-11T03:29:35.000Z</published>
    <updated>2018-02-11T04:30:30.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Anomaly-Detection"><a href="#Anomaly-Detection" class="headerlink" title="Anomaly Detection"></a>Anomaly Detection</h2><p><img src="https://i.imgur.com/slIPtvp.gif" alt=""></p><h3 id="1-1-Gaussian-distribution"><a href="#1-1-Gaussian-distribution" class="headerlink" title="1.1 Gaussian distribution"></a>1.1 Gaussian distribution</h3><script type="math/tex; mode=display">p(x;\mu ,\sigma ^2)=\dfrac{1}{\sqrt{2\pi \sigma ^2}}e^{-\frac{(x-\mu )^2}{2\sigma ^2}}</script><h3 id="1-2-Estimating-parameters-for-a-Gaussian"><a href="#1-2-Estimating-parameters-for-a-Gaussian" class="headerlink" title="1.2 Estimating parameters for a Gaussian"></a>1.2 Estimating parameters for a Gaussian</h3><script type="math/tex; mode=display">\mu _i = \dfrac{1}{m}\sum_{j=1}^{m}x_{i}^{(j)}</script><script type="math/tex; mode=display">\sigma _{i}^{2} = \dfrac{1}{m}\sum_{j=1}^{m}(x_{i}^{(j)} - \mu _i)^2</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mu = sum(X)/m;</span><br><span class="line">sigma2 = sum((X-mu).^<span class="number">2</span>)/m;</span><br></pre></td></tr></table></figure><p>I thought something was wrong in these equations as the region with the highest probability did not show as the pdf tour with a red oval.</p><p>After debugging for a while, I found the center of Gaussian distribution contours color is yellow, which is nearly invisible on a none Retina screen. 😂😂😂</p><h3 id="1-3-Selecting-the-threshold-ε"><a href="#1-3-Selecting-the-threshold-ε" class="headerlink" title="1.3 Selecting the threshold, ε"></a>1.3 Selecting the threshold, ε</h3><script type="math/tex; mode=display">F_1 = \dfrac{2 \cdot prec \cdot rec}{prec+rec}</script><script type="math/tex; mode=display">prec = \dfrac{tp}{tp+fp}</script><script type="math/tex; mode=display">rec = \dfrac{tp}{tp+fn}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = (pval &lt; epsilon);</span><br><span class="line">tp = sum((p == <span class="number">1</span>) &amp; (yval == <span class="number">1</span>));</span><br><span class="line">fp = sum((p == <span class="number">1</span>) &amp; (yval == <span class="number">0</span>));</span><br><span class="line">fn = sum((p == <span class="number">0</span>) &amp; (yval == <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">prec = tp/(tp+fp);</span><br><span class="line">rec = tp/(tp+fn);</span><br><span class="line"></span><br><span class="line">F1 = <span class="number">2</span>*prec*rec/(prec+rec);</span><br></pre></td></tr></table></figure><h2 id="Recommender-Systems"><a href="#Recommender-Systems" class="headerlink" title="Recommender Systems"></a>Recommender Systems</h2><h3 id="2-1-Movie-ratings-dataset"><a href="#2-1-Movie-ratings-dataset" class="headerlink" title="2.1 Movie ratings dataset"></a>2.1 Movie ratings dataset</h3><script type="math/tex; mode=display">X = \begin{bmatrix} - (x^{(1)})^T-\\  - (x^{(2)})^T-\\  \vdots  \\ - (x^{(n_m)})^T- \\ \end{bmatrix}, Theta = \begin{bmatrix} - (\theta ^{(1)})^T-\\  - (\theta ^{(2)})^T-\\  \vdots  \\ - (\theta ^{(n_u)})^T- \\ \end{bmatrix}</script><h3 id="2-2-1-Collaborative-filtering-cost-function"><a href="#2-2-1-Collaborative-filtering-cost-function" class="headerlink" title="2.2.1 Collaborative filtering cost function"></a>2.2.1 Collaborative filtering cost function</h3><script type="math/tex; mode=display">J(x^{(1)},\cdots x^{(n_m)}, \theta ^{(1)},\cdots \theta^{(n_u)}) = \dfrac{1}{2}\sum_{ (i,j):r(i,j)=1}^{ } ((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)}  )^2</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tmp = X*Theta' .* R - Y;</span><br><span class="line">J = sum(sum(tmp.^<span class="number">2</span>))/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Collaborative-filtering-gradient"><a href="#2-2-2-Collaborative-filtering-gradient" class="headerlink" title="2.2.2 Collaborative filtering gradient"></a>2.2.2 Collaborative filtering gradient</h3><script type="math/tex; mode=display">\dfrac{\partial J}{\partial x_{k}^{(i)}} = \sum_{j:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )\theta _{k}^{(j)}</script><script type="math/tex; mode=display">\dfrac{\partial J}{\partial x_{k}^{(j)}} = \sum_{i:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )x_{k}^{(i)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_grad = tmp*Theta;</span><br><span class="line">Theta_grad = tmp'*X;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Regularized-cost-function"><a href="#2-2-3-Regularized-cost-function" class="headerlink" title="2.2.3 Regularized cost function"></a>2.2.3 Regularized cost function</h3><script type="math/tex; mode=display">\begin{align*} J(x^{(1)},\cdots x^{(n_m)}, \theta ^{(1)},\cdots \theta^{(n_u)}) & = \dfrac{1}{2}\sum_{ (i,j):r(i,j)=1}^{ } ((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)}  )^2 \\ &+ \left ( \dfrac{\lambda }{2} \sum_{j=1}^{n_u} \sum_{k=1}^{n} (\theta _{k}^{(j)} )^2 \right ) + \left ( \dfrac{\lambda }{2} \sum_{i=1}^{n_m} \sum_{k=1}^{n} (x _{k}^{(i)} )^2 \right ) \end{align*}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = J + lambda/<span class="number">2</span>*(sum(sum(Theta.^<span class="number">2</span>))) + lambda/<span class="number">2</span>*(sum(sum(X.^<span class="number">2</span>)));</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Regularized-gradient"><a href="#2-2-4-Regularized-gradient" class="headerlink" title="2.2.4 Regularized gradient"></a>2.2.4 Regularized gradient</h3><script type="math/tex; mode=display">\dfrac{\partial J}{\partial x_{k}^{(j)}} = \sum_{j:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )\theta _{k}^{(i)} + \lambda x_{k}^{(j)}</script><script type="math/tex; mode=display">\dfrac{\partial J}{\partial \theta _{k}^{(j)}} = \sum_{i:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )x _{k}^{(i)} + \lambda \theta _{k}^{(j)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_grad = X_grad + lambda*X;</span><br><span class="line">Theta_grad = Theta_grad + lambda*Theta;</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.imgur.com/yRhMwb9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Anomaly-Detection&quot;&gt;&lt;a href=&quot;#Anomaly-Detection&quot; class=&quot;headerlink&quot; title=&quot;Anomaly Detection&quot;&gt;&lt;/a&gt;Anomaly Detection&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/slIPtvp.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-Gaussian-distribution&quot;&gt;&lt;a href=&quot;#1-1-Gaussian-distribution&quot; class=&quot;headerlink&quot; title=&quot;1.1 Gaussian distribution&quot;&gt;&lt;/a&gt;1.1 Gaussian distribution&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x;\mu ,\sigma ^2)=\dfrac{1}{\sqrt{2\pi \sigma ^2}}e^{-\frac{(x-\mu )^2}{2\sigma ^2}}&lt;/script&gt;&lt;h3 id=&quot;1-2-Estimating-parameters-for-a-Gaussian&quot;&gt;&lt;a href=&quot;#1-2-Estimating-parameters-for-a-Gaussian&quot; class=&quot;headerlink&quot; title=&quot;1.2 Estimating parameters for a Gaussian&quot;&gt;&lt;/a&gt;1.2 Estimating parameters for a Gaussian&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mu _i = \dfrac{1}{m}\sum_{j=1}^{m}x_{i}^{(j)}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma _{i}^{2} = \dfrac{1}{m}\sum_{j=1}^{m}(x_{i}^{(j)} - \mu _i)^2&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mu = sum(X)/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sigma2 = sum((X-mu).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)/m;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I thought something was wrong in these equations as the region with the highest probability did not show as the pdf tour with a red oval.&lt;/p&gt;
&lt;p&gt;After debugging for a while, I found the center of Gaussian distribution contours color is yellow, which is nearly invisible on a none Retina screen. 😂😂😂&lt;/p&gt;
&lt;h3 id=&quot;1-3-Selecting-the-threshold-ε&quot;&gt;&lt;a href=&quot;#1-3-Selecting-the-threshold-ε&quot; class=&quot;headerlink&quot; title=&quot;1.3 Selecting the threshold, ε&quot;&gt;&lt;/a&gt;1.3 Selecting the threshold, ε&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_1 = \dfrac{2 \cdot prec \cdot rec}{prec+rec}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;prec = \dfrac{tp}{tp+fp}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;rec = \dfrac{tp}{tp+fn}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p = (pval &amp;lt; epsilon);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tp = sum((p == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp; (yval == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fp = sum((p == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp; (yval == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn = sum((p == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp; (yval == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prec = tp/(tp+fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rec = tp/(tp+fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F1 = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*prec*rec/(prec+rec);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Recommender-Systems&quot;&gt;&lt;a href=&quot;#Recommender-Systems&quot; class=&quot;headerlink&quot; title=&quot;Recommender Systems&quot;&gt;&lt;/a&gt;Recommender Systems&lt;/h2&gt;&lt;h3 id=&quot;2-1-Movie-ratings-dataset&quot;&gt;&lt;a href=&quot;#2-1-Movie-ratings-dataset&quot; class=&quot;headerlink&quot; title=&quot;2.1 Movie ratings dataset&quot;&gt;&lt;/a&gt;2.1 Movie ratings dataset&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;X = \begin{bmatrix} - (x^{(1)})^T-\\  - (x^{(2)})^T-\\  \vdots  \\ - (x^{(n_m)})^T- \\ \end{bmatrix}, Theta = \begin{bmatrix} - (\theta ^{(1)})^T-\\  - (\theta ^{(2)})^T-\\  \vdots  \\ - (\theta ^{(n_u)})^T- \\ \end{bmatrix}&lt;/script&gt;&lt;h3 id=&quot;2-2-1-Collaborative-filtering-cost-function&quot;&gt;&lt;a href=&quot;#2-2-1-Collaborative-filtering-cost-function&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 Collaborative filtering cost function&quot;&gt;&lt;/a&gt;2.2.1 Collaborative filtering cost function&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(x^{(1)},\cdots x^{(n_m)}, \theta ^{(1)},\cdots \theta^{(n_u)}) = \dfrac{1}{2}\sum_{ (i,j):r(i,j)=1}^{ } ((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)}  )^2&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmp = X*Theta&#39; .* R - Y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = sum(sum(tmp.^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-2-Collaborative-filtering-gradient&quot;&gt;&lt;a href=&quot;#2-2-2-Collaborative-filtering-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 Collaborative filtering gradient&quot;&gt;&lt;/a&gt;2.2.2 Collaborative filtering gradient&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J}{\partial x_{k}^{(i)}} = \sum_{j:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )\theta _{k}^{(j)}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J}{\partial x_{k}^{(j)}} = \sum_{i:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )x_{k}^{(i)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_grad = tmp*Theta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta_grad = tmp&#39;*X;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-3-Regularized-cost-function&quot;&gt;&lt;a href=&quot;#2-2-3-Regularized-cost-function&quot; class=&quot;headerlink&quot; title=&quot;2.2.3 Regularized cost function&quot;&gt;&lt;/a&gt;2.2.3 Regularized cost function&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*} J(x^{(1)},\cdots x^{(n_m)}, \theta ^{(1)},\cdots \theta^{(n_u)}) &amp; = \dfrac{1}{2}\sum_{ (i,j):r(i,j)=1}^{ } ((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)}  )^2 \\ &amp;+ \left ( \dfrac{\lambda }{2} \sum_{j=1}^{n_u} \sum_{k=1}^{n} (\theta _{k}^{(j)} )^2 \right ) + \left ( \dfrac{\lambda }{2} \sum_{i=1}^{n_m} \sum_{k=1}^{n} (x _{k}^{(i)} )^2 \right ) \end{align*}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = J + lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*(sum(sum(Theta.^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))) + lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*(sum(sum(X.^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-4-Regularized-gradient&quot;&gt;&lt;a href=&quot;#2-2-4-Regularized-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.2.4 Regularized gradient&quot;&gt;&lt;/a&gt;2.2.4 Regularized gradient&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J}{\partial x_{k}^{(j)}} = \sum_{j:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )\theta _{k}^{(i)} + \lambda x_{k}^{(j)}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J}{\partial \theta _{k}^{(j)}} = \sum_{i:r(i,j)=1}^{ }((\theta ^{(j)})^Tx^{(i)} -y^{(i,j)} )x _{k}^{(i)} + \lambda \theta _{k}^{(j)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_grad = X_grad + lambda*X;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta_grad = Theta_grad + lambda*Theta;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Unsupervised Learning</title>
    <link href="http://artwalk.github.io/2018/01/30/Unsupervised-Learning/"/>
    <id>http://artwalk.github.io/2018/01/30/Unsupervised-Learning/</id>
    <published>2018-01-29T16:04:36.000Z</published>
    <updated>2018-01-29T16:59:33.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-1-Finding-closest-centroids"><a href="#1-1-1-Finding-closest-centroids" class="headerlink" title="1.1.1 Finding closest centroids"></a>1.1.1 Finding closest centroids</h2><script type="math/tex; mode=display">c^{(i)} :=  j , min \left (   \left \| x^{(i)}-\mu _j \right \|^2 \right )</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">v = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:K</span><br><span class="line">    v = [v, sum((X - centroids(j,:)).^<span class="number">2</span>, <span class="number">2</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">[v, idx] = min(v, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>The $\left |  \right |$ symbol means <a href="https://en.wikipedia.org/wiki/Norm_(mathematics" target="_blank" rel="noopener">Norm</a>) not Absolute value the first time as I thought. 😂</p><h2 id="1-1-2-Computing-centroid-means"><a href="#1-1-2-Computing-centroid-means" class="headerlink" title="1.1.2 Computing centroid means"></a>1.1.2 Computing centroid means</h2><script type="math/tex; mode=display">\mu _k := \dfrac{1}{\left | C_k \right |}\sum_{i\in  C_k}^{ }x^{(i)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:K</span><br><span class="line">    <span class="built_in">j</span> = (idx == <span class="built_in">i</span>);</span><br><span class="line">    v = X(<span class="built_in">j</span>, :);</span><br><span class="line">    n = <span class="built_in">size</span>(v, <span class="number">1</span>);</span><br><span class="line">    centroids(<span class="built_in">i</span>, :) = sum(v)/n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UEBpwso.gif" alt=""></p><h2 id="2-2-Implementing-PCA"><a href="#2-2-Implementing-PCA" class="headerlink" title="2.2 Implementing PCA"></a>2.2 Implementing PCA</h2><script type="math/tex; mode=display">\sum = \dfrac{1}{m}X^TX</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sigma = X'*X/m;</span><br><span class="line">[U, S, V] = svd(sigma);</span><br></pre></td></tr></table></figure><h2 id="2-3-1-Projecting-the-data-onto-the-principal-components"><a href="#2-3-1-Projecting-the-data-onto-the-principal-components" class="headerlink" title="2.3.1 Projecting the data onto the principal components"></a>2.3.1 Projecting the data onto the principal components</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Z = X * U;</span><br><span class="line">Z = Z(:,<span class="number">1</span>:K);</span><br></pre></td></tr></table></figure><h2 id="2-3-2-Reconstructing-an-approximation-of-the-data"><a href="#2-3-2-Reconstructing-an-approximation-of-the-data" class="headerlink" title="2.3.2 Reconstructing an approximation of the data"></a>2.3.2 Reconstructing an approximation of the data</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_rec = Z * U(:,<span class="number">1</span>:K)';</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/TjyYT8G.gif" alt=""></p><a id="more"></a><p><img src="https://i.imgur.com/duSTjdI.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-1-Finding-closest-centroids&quot;&gt;&lt;a href=&quot;#1-1-1-Finding-closest-centroids&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 Finding closest centroids&quot;&gt;&lt;/a&gt;1.1.1 Finding closest centroids&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;c^{(i)} :=  j , min \left (   \left \| x^{(i)}-\mu _j \right \|^2 \right )&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v = [v, sum((X - centroids(j,:)).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[v, idx] = min(v, [], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The $\left |  \right |$ symbol means &lt;a href=&quot;https://en.wikipedia.org/wiki/Norm_(mathematics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Norm&lt;/a&gt;) not Absolute value the first time as I thought. 😂&lt;/p&gt;
&lt;h2 id=&quot;1-1-2-Computing-centroid-means&quot;&gt;&lt;a href=&quot;#1-1-2-Computing-centroid-means&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 Computing centroid means&quot;&gt;&lt;/a&gt;1.1.2 Computing centroid means&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mu _k := \dfrac{1}{\left | C_k \right |}\sum_{i\in  C_k}^{ }x^{(i)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt; = (idx == &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v = X(&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;, :);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = &lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(v, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    centroids(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;, :) = sum(v)/n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UEBpwso.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-2-Implementing-PCA&quot;&gt;&lt;a href=&quot;#2-2-Implementing-PCA&quot; class=&quot;headerlink&quot; title=&quot;2.2 Implementing PCA&quot;&gt;&lt;/a&gt;2.2 Implementing PCA&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum = \dfrac{1}{m}X^TX&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sigma = X&#39;*X/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[U, S, V] = svd(sigma);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-1-Projecting-the-data-onto-the-principal-components&quot;&gt;&lt;a href=&quot;#2-3-1-Projecting-the-data-onto-the-principal-components&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 Projecting the data onto the principal components&quot;&gt;&lt;/a&gt;2.3.1 Projecting the data onto the principal components&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Z = X * U;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z = Z(:,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:K);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-2-Reconstructing-an-approximation-of-the-data&quot;&gt;&lt;a href=&quot;#2-3-2-Reconstructing-an-approximation-of-the-data&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 Reconstructing an approximation of the data&quot;&gt;&lt;/a&gt;2.3.2 Reconstructing an approximation of the data&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_rec = Z * U(:,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:K)&#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TjyYT8G.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Support Vector Machines</title>
    <link href="http://artwalk.github.io/2018/01/19/Support-Vector-Machines/"/>
    <id>http://artwalk.github.io/2018/01/19/Support-Vector-Machines/</id>
    <published>2018-01-19T14:33:07.000Z</published>
    <updated>2018-01-19T15:38:25.402Z</updated>
    
    <content type="html"><![CDATA[<p>I heard SVM many times before, and got to see what it is now. 😄</p><h2 id="1-2-1-Gaussian-Kernel"><a href="#1-2-1-Gaussian-Kernel" class="headerlink" title="1.2.1 Gaussian Kernel"></a>1.2.1 Gaussian Kernel</h2><script type="math/tex; mode=display">K_{gaussian}(x^{(i)}, x^{(j)}) =exp\left ( -\dfrac{\left \| x^{(i)} - x^{(j) } \right \|^2}{2\sigma ^{2}} \right ) = exp\left ( -\dfrac{\sum_{k=1}^{n}(x_k^{(i)} - x_k^{(j)})^2}{2\sigma ^{2}} \right )</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sim = <span class="built_in">exp</span>(-sum((x2-x1).^<span class="number">2</span>)./(<span class="number">2</span>*sigma.^<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="1-2-3-Example-Dataset-3"><a href="#1-2-3-Example-Dataset-3" class="headerlink" title="1.2.3 Example Dataset 3"></a>1.2.3 Example Dataset 3</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">30</span>];</span><br><span class="line">mix = <span class="built_in">realmax</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c = l</span><br><span class="line">    <span class="keyword">for</span> s = l</span><br><span class="line">        model= svmTrain(X, y, c, @(x1, x2) gaussianKernel(x1, x2, s));</span><br><span class="line"></span><br><span class="line">        p = svmPredict(model, Xval);</span><br><span class="line">        m = mean(double(p ~= yval));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> m &lt; mix</span><br><span class="line">            C = c;sigma = s;mix = m;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>I wrote the Gaussian Kernel function in a way that it can be pass sigma as a vector and get a sim vector, therefore  <code>g = gaussianKernel(x1, x2, s)</code>  is a vector and can skip <code>for s = l</code>  which is a redundant compute in <code>for c = l</code> loop. Then if the <code>svmTrain</code> can be computer as a vector, the <code>for c = l</code> can also be skip.</p><p>But it can’t. 😢</p><p>Is it has any connections with the functional programming?</p><h2 id="2-1-1-Vocabulary-List"><a href="#2-1-1-Vocabulary-List" class="headerlink" title="2.1.1 Vocabulary List"></a>2.1.1 Vocabulary List</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">i</span> = <span class="built_in">find</span>(strcmp(vocabList, str));</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">i</span></span><br><span class="line">    word_indices = [word_indices; i];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Extracting-Features-from-Emails"><a href="#2-2-Extracting-Features-from-Emails" class="headerlink" title="2.2 Extracting Features from Emails"></a>2.2 Extracting Features from Emails</h2><script type="math/tex; mode=display">x = \begin{bmatrix} 0 \\ \vdots \\ 1 \\ 0 \\ \vdots \\ 1 \\ 0 \\ \vdots \\ 0 \\ \end{bmatrix} \in \mathbb{R}^n</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = word_indices</span><br><span class="line">    x(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.imgur.com/rBji3uP.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I heard SVM many times before, and got to see what it is now. 😄&lt;/p&gt;
&lt;h2 id=&quot;1-2-1-Gaussian-Kernel&quot;&gt;&lt;a href=&quot;#1-2-1-Gaussian-Kernel&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 Gaussian Kernel&quot;&gt;&lt;/a&gt;1.2.1 Gaussian Kernel&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;K_{gaussian}(x^{(i)}, x^{(j)}) =exp\left ( -\dfrac{\left \| x^{(i)} - x^{(j) } \right \|^2}{2\sigma ^{2}} \right ) = exp\left ( -\dfrac{\sum_{k=1}^{n}(x_k^{(i)} - x_k^{(j)})^2}{2\sigma ^{2}} \right )&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sim = &lt;span class=&quot;built_in&quot;&gt;exp&lt;/span&gt;(-sum((x2-x1).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)./(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*sigma.^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-3-Example-Dataset-3&quot;&gt;&lt;a href=&quot;#1-2-3-Example-Dataset-3&quot; class=&quot;headerlink&quot; title=&quot;1.2.3 Example Dataset 3&quot;&gt;&lt;/a&gt;1.2.3 Example Dataset 3&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;l = [&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.03&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mix = &lt;span class=&quot;built_in&quot;&gt;realmax&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c = l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; s = l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model= svmTrain(X, y, c, @(x1, x2) gaussianKernel(x1, x2, s));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = svmPredict(model, Xval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m = mean(double(p ~= yval));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &amp;lt; mix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            C = c;sigma = s;mix = m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I wrote the Gaussian Kernel function in a way that it can be pass sigma as a vector and get a sim vector, therefore  &lt;code&gt;g = gaussianKernel(x1, x2, s)&lt;/code&gt;  is a vector and can skip &lt;code&gt;for s = l&lt;/code&gt;  which is a redundant compute in &lt;code&gt;for c = l&lt;/code&gt; loop. Then if the &lt;code&gt;svmTrain&lt;/code&gt; can be computer as a vector, the &lt;code&gt;for c = l&lt;/code&gt; can also be skip.&lt;/p&gt;
&lt;p&gt;But it can’t. 😢&lt;/p&gt;
&lt;p&gt;Is it has any connections with the functional programming?&lt;/p&gt;
&lt;h2 id=&quot;2-1-1-Vocabulary-List&quot;&gt;&lt;a href=&quot;#2-1-1-Vocabulary-List&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 Vocabulary List&quot;&gt;&lt;/a&gt;2.1.1 Vocabulary List&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(strcmp(vocabList, str));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    word_indices = [word_indices; i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-2-Extracting-Features-from-Emails&quot;&gt;&lt;a href=&quot;#2-2-Extracting-Features-from-Emails&quot; class=&quot;headerlink&quot; title=&quot;2.2 Extracting Features from Emails&quot;&gt;&lt;/a&gt;2.2 Extracting Features from Emails&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = \begin{bmatrix} 0 \\ \vdots \\ 1 \\ 0 \\ \vdots \\ 1 \\ 0 \\ \vdots \\ 0 \\ \end{bmatrix} \in \mathbb{R}^n&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = word_indices&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Advice for Applying Machine Learning</title>
    <link href="http://artwalk.github.io/2018/01/16/Advice-for-Applying-Machine-Learning/"/>
    <id>http://artwalk.github.io/2018/01/16/Advice-for-Applying-Machine-Learning/</id>
    <published>2018-01-16T04:04:50.000Z</published>
    <updated>2018-01-16T04:27:12.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-Regularized-linear-regression-cost-function"><a href="#1-2-Regularized-linear-regression-cost-function" class="headerlink" title="1.2 Regularized linear regression cost function"></a>1.2 Regularized linear regression cost function</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{2m}\left ( \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ) + \dfrac{\lambda }{2m}\left ( \sum_{j=1}^{n} \theta _{j}^{2} \right )</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = <span class="number">1</span>/(<span class="number">2</span>*m)*sum( (X*theta - y).^<span class="number">2</span> ) + lambda/(<span class="number">2</span>*m)*sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="1-3-Regularized-linear-regression-gradient"><a href="#1-3-Regularized-linear-regression-gradient" class="headerlink" title="1.3 Regularized linear regression gradient"></a>1.3 Regularized linear regression gradient</h2><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta_{0} } = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}; j=0</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta_{j} } = \left (  \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}\right ) + \dfrac{\lambda }{m}\theta _{j} ; j\geqslant 1</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = theta; r(<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">grad = <span class="number">1</span>/m*(X'*(X*theta-y)) + lambda/m*r;</span><br></pre></td></tr></table></figure><h2 id="2-1-Learning-curves"><a href="#2-1-Learning-curves" class="headerlink" title="2.1 Learning curves"></a>2.1 Learning curves</h2><script type="math/tex; mode=display">J_{train}(\theta ) = \dfrac{1}{2m}\left [ \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    xi = X(<span class="number">1</span>:<span class="built_in">i</span>,:); yi = y(<span class="number">1</span>:<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(xi, yi, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(xi, yi, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-Polynomial-regression"><a href="#3-Polynomial-regression" class="headerlink" title="3 Polynomial regression"></a>3 Polynomial regression</h2><script type="math/tex; mode=display">h_{\theta }(x) = \theta _{0} + \theta _{1}*(waterLevel) + \theta _{2}*(waterLevel)^{2} + ... + \theta _{p}*(waterLevel)^{p}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_poly = X.^[<span class="number">1</span>:<span class="number">1</span>:p];</span><br></pre></td></tr></table></figure><h2 id="3-3-Selecting-λ-using-a-cross-validation-set"><a href="#3-3-Selecting-λ-using-a-cross-validation-set" class="headerlink" title="3.3 Selecting λ using a cross validation set"></a>3.3 Selecting λ using a cross validation set</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(lambda_vec)</span><br><span class="line">    lambda = lambda_vec(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(X, y, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(X, y, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.imgur.com/yyXPMcV.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-2-Regularized-linear-regression-cost-function&quot;&gt;&lt;a href=&quot;#1-2-Regularized-linear-regression-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.2 Regularized linear regression cost function&quot;&gt;&lt;/a&gt;1.2 Regularized linear regression cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{2m}\left ( \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ) + \dfrac{\lambda }{2m}\left ( \sum_{j=1}^{n} \theta _{j}^{2} \right )&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*m)*sum( (X*theta - y).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ) + lambda/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*m)*sum(theta(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-3-Regularized-linear-regression-gradient&quot;&gt;&lt;a href=&quot;#1-3-Regularized-linear-regression-gradient&quot; class=&quot;headerlink&quot; title=&quot;1.3 Regularized linear regression gradient&quot;&gt;&lt;/a&gt;1.3 Regularized linear regression gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta_{0} } = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}; j=0&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta_{j} } = \left (  \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}\right ) + \dfrac{\lambda }{m}\theta _{j} ; j\geqslant 1&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = theta; r(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m*(X&#39;*(X*theta-y)) + lambda/m*r;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-1-Learning-curves&quot;&gt;&lt;a href=&quot;#2-1-Learning-curves&quot; class=&quot;headerlink&quot; title=&quot;2.1 Learning curves&quot;&gt;&lt;/a&gt;2.1 Learning curves&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J_{train}(\theta ) = \dfrac{1}{2m}\left [ \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xi = X(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:); yi = y(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theta = trainLinearReg(xi, yi, lambda);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_train(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(xi, yi, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_val(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(Xval, yval, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-Polynomial-regression&quot;&gt;&lt;a href=&quot;#3-Polynomial-regression&quot; class=&quot;headerlink&quot; title=&quot;3 Polynomial regression&quot;&gt;&lt;/a&gt;3 Polynomial regression&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_{\theta }(x) = \theta _{0} + \theta _{1}*(waterLevel) + \theta _{2}*(waterLevel)^{2} + ... + \theta _{p}*(waterLevel)^{p}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_poly = X.^[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:p];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-3-Selecting-λ-using-a-cross-validation-set&quot;&gt;&lt;a href=&quot;#3-3-Selecting-λ-using-a-cross-validation-set&quot; class=&quot;headerlink&quot; title=&quot;3.3 Selecting λ using a cross validation set&quot;&gt;&lt;/a&gt;3.3 Selecting λ using a cross validation set&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;(lambda_vec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lambda = lambda_vec(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theta = trainLinearReg(X, y, lambda);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_train(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(X, y, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_val(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(Xval, yval, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Neural Networks: Learning</title>
    <link href="http://artwalk.github.io/2018/01/11/Neural-Networks-Learning/"/>
    <id>http://artwalk.github.io/2018/01/11/Neural-Networks-Learning/</id>
    <published>2018-01-11T03:27:14.000Z</published>
    <updated>2018-01-11T04:17:04.848Z</updated>
    
    <content type="html"><![CDATA[<p>First, I have to say, it’s the hardest exercise I have ever made when I began this course.</p><h2 id="1-3-Feedforward-and-cost-function"><a href="#1-3-Feedforward-and-cost-function" class="headerlink" title="1.3 Feedforward and cost function"></a>1.3 Feedforward and cost function</h2><script type="math/tex; mode=display">J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a1 = [ones(m, <span class="number">1</span>), X];</span><br><span class="line">z2 = a1*Theta1';</span><br><span class="line">a2 = [ones(m, <span class="number">1</span>), sigmoid(z2)];</span><br><span class="line">z3 = a2*Theta2';</span><br><span class="line">a3 = sigmoid(z3);</span><br><span class="line"></span><br><span class="line">I = <span class="built_in">eye</span>(num_labels);</span><br><span class="line">Y = I(y, :);</span><br><span class="line"></span><br><span class="line">J = sum(sum((-Y.*<span class="built_in">log</span>(a3) - (<span class="number">1</span>-Y).*<span class="built_in">log</span>(<span class="number">1</span>-a3) ) / m));</span><br></pre></td></tr></table></figure><p>For now, I still confused about <code>I(y, :)</code>, how can it makes y(5000:1) to Y(5000:10) with the match index in each row?</p><h2 id="1-4-Regularized-cost-function"><a href="#1-4-Regularized-cost-function" class="headerlink" title="1.4 Regularized cost function"></a>1.4 Regularized cost function</h2><script type="math/tex; mode=display">J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]+\dfrac{\lambda }{2m}[\sum_{j=1}^{25}\sum_{k=1}^{400}(\Theta _{j,k}^{(1)})^{2} + \sum_{j=1}^{10}\sum_{k=1}^{25}(\Theta _{j,k}^{(2)})^{2}]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = lambda/<span class="number">2</span>/m * (sum(sum(Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)) + sum(sum(Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)));</span><br><span class="line">J = J + r;</span><br></pre></td></tr></table></figure><h2 id="2-1-Sigmoid-gradient"><a href="#2-1-Sigmoid-gradient" class="headerlink" title="2.1 Sigmoid gradient"></a>2.1 Sigmoid gradient</h2><script type="math/tex; mode=display">g'(z)=\dfrac{d}{dz}g(z)=g(z)(1-g(z))</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = sigmoid(z).*(<span class="number">1</span>-sigmoid(z));</span><br></pre></td></tr></table></figure><h2 id="2-3-Backpropagation"><a href="#2-3-Backpropagation" class="headerlink" title="2.3 Backpropagation"></a>2.3 Backpropagation</h2><script type="math/tex; mode=display">\delta _{k}^{(3)} = (a_{k}^{(3)} - y_{k})</script><script type="math/tex; mode=display">\delta ^{2} = (\Theta ^{(2)})^T\delta ^{(3)}.*g'(z^{(2)})</script><script type="math/tex; mode=display">\Delta ^{(l)} = \Delta ^{(l)} + \delta ^{(l+1)}(a^{(l)})^T</script><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">d3 = a3-Y;</span><br><span class="line">d2 = d3*Theta2.*[ones(m, <span class="number">1</span>), sigmoidGradient(z2)];</span><br><span class="line"></span><br><span class="line">D1 = d2(:,<span class="number">2</span>:<span class="keyword">end</span>)'*a1;</span><br><span class="line">D2 = d3'*a2;</span><br><span class="line"></span><br><span class="line">Theta1_grad = Theta1_grad + D1/m;</span><br><span class="line">Theta2_grad = Theta2_grad + D2/m;</span><br></pre></td></tr></table></figure><h2 id="2-5-Regularized-Neural-Networks"><a href="#2-5-Regularized-Neural-Networks" class="headerlink" title="2.5 Regularized Neural Networks"></a>2.5 Regularized Neural Networks</h2><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} \quad for j = 0</script><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} + \dfrac{\lambda }{m}\Theta _{ij}^{(l)}  \quad for j \geq 1</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br></pre></td></tr></table></figure><h2 id="The-hidden-layer"><a href="#The-hidden-layer" class="headerlink" title="The hidden layer"></a>The hidden layer</h2><p><img src="https://i.imgur.com/LqYfS7h.png" alt=""></p><a id="more"></a><p><img src="https://i.imgur.com/c1wo2Cy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First, I have to say, it’s the hardest exercise I have ever made when I began this course.&lt;/p&gt;
&lt;h2 id=&quot;1-3-Feedforward-and-cost-function&quot;&gt;&lt;a href=&quot;#1-3-Feedforward-and-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.3 Feedforward and cost function&quot;&gt;&lt;/a&gt;1.3 Feedforward and cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a1 = [ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), X];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;z2 = a1*Theta1&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2 = [ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), sigmoid(z2)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;z3 = a2*Theta2&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3 = sigmoid(z3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I = &lt;span class=&quot;built_in&quot;&gt;eye&lt;/span&gt;(num_labels);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Y = I(y, :);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = sum(sum((-Y.*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(a3) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-Y).*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-a3) ) / m));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For now, I still confused about &lt;code&gt;I(y, :)&lt;/code&gt;, how can it makes y(5000:1) to Y(5000:10) with the match index in each row?&lt;/p&gt;
&lt;h2 id=&quot;1-4-Regularized-cost-function&quot;&gt;&lt;a href=&quot;#1-4-Regularized-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.4 Regularized cost function&quot;&gt;&lt;/a&gt;1.4 Regularized cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]+\dfrac{\lambda }{2m}[\sum_{j=1}^{25}\sum_{k=1}^{400}(\Theta _{j,k}^{(1)})^{2} + \sum_{j=1}^{10}\sum_{k=1}^{25}(\Theta _{j,k}^{(2)})^{2}]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m * (sum(sum(Theta1(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) + sum(sum(Theta2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = J + r;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-1-Sigmoid-gradient&quot;&gt;&lt;a href=&quot;#2-1-Sigmoid-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.1 Sigmoid gradient&quot;&gt;&lt;/a&gt;2.1 Sigmoid gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;g&#39;(z)=\dfrac{d}{dz}g(z)=g(z)(1-g(z))&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g = sigmoid(z).*(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(z));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-Backpropagation&quot;&gt;&lt;a href=&quot;#2-3-Backpropagation&quot; class=&quot;headerlink&quot; title=&quot;2.3 Backpropagation&quot;&gt;&lt;/a&gt;2.3 Backpropagation&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\delta _{k}^{(3)} = (a_{k}^{(3)} - y_{k})&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\delta ^{2} = (\Theta ^{(2)})^T\delta ^{(3)}.*g&#39;(z^{(2)})&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta ^{(l)} = \Delta ^{(l)} + \delta ^{(l+1)}(a^{(l)})^T&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d3 = a3-Y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d2 = d3*Theta2.*[ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), sigmoidGradient(z2)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D1 = d2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&#39;*a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D2 = d3&#39;*a2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta1_grad = Theta1_grad + D1/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta2_grad = Theta2_grad + D2/m;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-5-Regularized-Neural-Networks&quot;&gt;&lt;a href=&quot;#2-5-Regularized-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;2.5 Regularized Neural Networks&quot;&gt;&lt;/a&gt;2.5 Regularized Neural Networks&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} \quad for j = 0&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} + \dfrac{\lambda }{m}\Theta _{ij}^{(l)}  \quad for j \geq 1&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Theta1_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) = Theta1_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) + lambda/m*Theta1(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta2_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) = Theta2_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) + lambda/m*Theta2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;The-hidden-layer&quot;&gt;&lt;a href=&quot;#The-hidden-layer&quot; class=&quot;headerlink&quot; title=&quot;The hidden layer&quot;&gt;&lt;/a&gt;The hidden layer&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LqYfS7h.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Neural Networks Representation</title>
    <link href="http://artwalk.github.io/2018/01/06/Neural-Networks-Representation/"/>
    <id>http://artwalk.github.io/2018/01/06/Neural-Networks-Representation/</id>
    <published>2018-01-05T16:00:53.000Z</published>
    <updated>2018-01-05T16:47:43.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks Representation"></a>Neural Networks Representation</h1><h2 id="1-3-Vectorizing-Logistic-Regression"><a href="#1-3-Vectorizing-Logistic-Regression" class="headerlink" title="1.3 Vectorizing Logistic Regression"></a>1.3 Vectorizing Logistic Regression</h2><p>Alright, I already used the Vectorized approach and without any loops last exercise.</p><h2 id="1-4-One-vs-all-Classification"><a href="#1-4-One-vs-all-Classification" class="headerlink" title="1.4 One-vs-all Classification"></a>1.4 One-vs-all Classification</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:num_labels</span><br><span class="line">    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == <span class="built_in">i</span>), lambda)), initial_theta, options);</span><br><span class="line"></span><br><span class="line">all_theta(<span class="built_in">i</span>,:) = [theta];</span><br></pre></td></tr></table></figure><p>the key points here are:</p><ul><li><code>for</code> is needed here to loop from <code>1</code> to <code>num_labels</code></li><li><code>all_theta</code> should assigned with <code>(i,:)</code>, otherwise it will be a one-dimensional vector.</li></ul><h2 id="1-4-1-One-vs-all-Prediction"><a href="#1-4-1-One-vs-all-Prediction" class="headerlink" title="1.4.1 One-vs-all Prediction"></a>1.4.1 One-vs-all Prediction</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = sigmoid(X * all_theta');</span><br><span class="line">[m, p] = max(A, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>the <code>max</code> function will return a two-dimensional vector, <code>m</code> is the value, and <code>p</code> is the max index in that row.</p><h2 id="2-Neural-Networks"><a href="#2-Neural-Networks" class="headerlink" title="2 Neural Networks"></a>2 Neural Networks</h2><p>Finally, I touched the Neural Networks with so many classes after. 😳</p><p>The $\theta1, \theta2$ are trained to predict.</p><p>Before this, I wondering what is the process of prediction with a trained model. Is it the same with the training process?</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a0x = <span class="built_in">ones</span>(m, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">A1 = [a0x, X];</span><br><span class="line">A2 = [a0x, sigmoid(A1 * Theta1<span class="string">')];</span></span><br><span class="line"><span class="string">A3 = sigmoid(A2 * Theta2'</span>);</span><br><span class="line"></span><br><span class="line">[v, p] =  max(A3, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ailb9HX.png" alt=""></p><p>Amazing ha! 🤩</p><p>First I forgot to <code>sigmoid</code> the hidden layer and output layer. The Accuracy shows </p><blockquote><p>Training Set Accuracy: 69.62</p></blockquote><p>And it will got the same accuracy if the output layer has no <code>sigmoid</code> . It also happened in the previous <strong>One-vs-all Prediction</strong>.</p><p>Therefore I still have the question. 🧐</p><p>It’s time to keep on the training part. 💪</p><a id="more"></a><p><img src="https://i.imgur.com/arYwzJt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Neural-Networks-Representation&quot;&gt;&lt;a href=&quot;#Neural-Networks-Representation&quot; class=&quot;headerlink&quot; title=&quot;Neural Networks Representation&quot;&gt;&lt;/a&gt;Neural Networks Representation&lt;/h1&gt;&lt;h2 id=&quot;1-3-Vectorizing-Logistic-Regression&quot;&gt;&lt;a href=&quot;#1-3-Vectorizing-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;1.3 Vectorizing Logistic Regression&quot;&gt;&lt;/a&gt;1.3 Vectorizing Logistic Regression&lt;/h2&gt;&lt;p&gt;Alright, I already used the Vectorized approach and without any loops last exercise.&lt;/p&gt;
&lt;h2 id=&quot;1-4-One-vs-all-Classification&quot;&gt;&lt;a href=&quot;#1-4-One-vs-all-Classification&quot; class=&quot;headerlink&quot; title=&quot;1.4 One-vs-all Classification&quot;&gt;&lt;/a&gt;1.4 One-vs-all Classification&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initial_theta = &lt;span class=&quot;built_in&quot;&gt;zeros&lt;/span&gt;(n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options = optimset(&lt;span class=&quot;string&quot;&gt;&#39;GradObj&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;on&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;MaxIter&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:num_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;), lambda)), initial_theta, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all_theta(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:) = [theta];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;the key points here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; is needed here to loop from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;num_labels&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all_theta&lt;/code&gt; should assigned with &lt;code&gt;(i,:)&lt;/code&gt;, otherwise it will be a one-dimensional vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-4-1-One-vs-all-Prediction&quot;&gt;&lt;a href=&quot;#1-4-1-One-vs-all-Prediction&quot; class=&quot;headerlink&quot; title=&quot;1.4.1 One-vs-all Prediction&quot;&gt;&lt;/a&gt;1.4.1 One-vs-all Prediction&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = sigmoid(X * all_theta&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[m, p] = max(A, [], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;the &lt;code&gt;max&lt;/code&gt; function will return a two-dimensional vector, &lt;code&gt;m&lt;/code&gt; is the value, and &lt;code&gt;p&lt;/code&gt; is the max index in that row.&lt;/p&gt;
&lt;h2 id=&quot;2-Neural-Networks&quot;&gt;&lt;a href=&quot;#2-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;2 Neural Networks&quot;&gt;&lt;/a&gt;2 Neural Networks&lt;/h2&gt;&lt;p&gt;Finally, I touched the Neural Networks with so many classes after. 😳&lt;/p&gt;
&lt;p&gt;The $\theta1, \theta2$ are trained to predict.&lt;/p&gt;
&lt;p&gt;Before this, I wondering what is the process of prediction with a trained model. Is it the same with the training process?&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a0x = &lt;span class=&quot;built_in&quot;&gt;ones&lt;/span&gt;(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A1 = [a0x, X];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A2 = [a0x, sigmoid(A1 * Theta1&lt;span class=&quot;string&quot;&gt;&#39;)];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;A3 = sigmoid(A2 * Theta2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[v, p] =  max(A3, [], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ailb9HX.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Amazing ha! 🤩&lt;/p&gt;
&lt;p&gt;First I forgot to &lt;code&gt;sigmoid&lt;/code&gt; the hidden layer and output layer. The Accuracy shows &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Training Set Accuracy: 69.62&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it will got the same accuracy if the output layer has no &lt;code&gt;sigmoid&lt;/code&gt; . It also happened in the previous &lt;strong&gt;One-vs-all Prediction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Therefore I still have the question. 🧐&lt;/p&gt;
&lt;p&gt;It’s time to keep on the training part. 💪&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Logistic Regression</title>
    <link href="http://artwalk.github.io/2018/01/03/Logistic-Regression/"/>
    <id>http://artwalk.github.io/2018/01/03/Logistic-Regression/</id>
    <published>2018-01-03T13:59:14.000Z</published>
    <updated>2018-01-03T15:05:22.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-1-Warmup-exercise-sigmoid-function"><a href="#1-2-1-Warmup-exercise-sigmoid-function" class="headerlink" title="1.2.1 Warmup exercise: sigmoid function"></a>1.2.1 Warmup exercise: sigmoid function</h2><p>As the sigmoid function is defined as:</p><script type="math/tex; mode=display">g(z) = \dfrac{1}{1+e^{-z}}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = <span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-z))</span><br></pre></td></tr></table></figure><h2 id="1-2-2-Cost-function-and-gradient"><a href="#1-2-2-Cost-function-and-gradient" class="headerlink" title="1.2.2 Cost function and gradient"></a>1.2.2 Cost function and gradient</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))]</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m</span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m</span><br></pre></td></tr></table></figure><h2 id="2-3-Cost-function-and-gradient"><a href="#2-3-Cost-function-and-gradient" class="headerlink" title="2.3 Cost function and gradient"></a>2.3 Cost function and gradient</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))] + \dfrac{\lambda }{2m}\sum_{j=1}^{n}\theta _{j}^{2}</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)} + \dfrac{\lambda }{m}\theta _{j}</script><p>for $j = 0$, the $+ \lambda\theta$ part = 0</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r1 = sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)*lambda/<span class="number">2</span>/m</span><br><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m + r1</span><br><span class="line"></span><br><span class="line">r2 = <span class="built_in">ones</span>(<span class="built_in">size</span>(theta))</span><br><span class="line">r2(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m + (theta.*r2)*lambda/m</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/94LgVsH.png" alt="costFunctionReg"></p><p>Yes, yes, I know I passed. 😄</p><p>But, god knows what happened? 🤔</p><a id="more"></a><p><img src="https://i.imgur.com/OFkLk5J.png" alt="3 Logistic Regression"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-2-1-Warmup-exercise-sigmoid-function&quot;&gt;&lt;a href=&quot;#1-2-1-Warmup-exercise-sigmoid-function&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 Warmup exercise: sigmoid function&quot;&gt;&lt;/a&gt;1.2.1 Warmup exercise: sigmoid function&lt;/h2&gt;&lt;p&gt;As the sigmoid function is defined as:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(z) = \dfrac{1}{1+e^{-z}}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;built_in&quot;&gt;exp&lt;/span&gt;(-z))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-2-Cost-function-and-gradient&quot;&gt;&lt;a href=&quot;#1-2-2-Cost-function-and-gradient&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 Cost function and gradient&quot;&gt;&lt;/a&gt;1.2.2 Cost function and gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))]&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = (-y&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(sigmoid(X*theta)) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-y)&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(X*theta)))/m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = (X&#39;*(sigmoid(X*theta) - y))/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-Cost-function-and-gradient&quot;&gt;&lt;a href=&quot;#2-3-Cost-function-and-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.3 Cost function and gradient&quot;&gt;&lt;/a&gt;2.3 Cost function and gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))] + \dfrac{\lambda }{2m}\sum_{j=1}^{n}\theta _{j}^{2}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)} + \dfrac{\lambda }{m}\theta _{j}&lt;/script&gt;&lt;p&gt;for $j = 0$, the $+ \lambda\theta$ part = 0&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r1 = sum(theta(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)*lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = (-y&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(sigmoid(X*theta)) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-y)&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(X*theta)))/m + r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r2 = &lt;span class=&quot;built_in&quot;&gt;ones&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(theta))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = (X&#39;*(sigmoid(X*theta) - y))/m + (theta.*r2)*lambda/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/94LgVsH.png&quot; alt=&quot;costFunctionReg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Yes, yes, I know I passed. 😄&lt;/p&gt;
&lt;p&gt;But, god knows what happened? 🤔&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning by Stanford University</title>
    <link href="http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/"/>
    <id>http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/</id>
    <published>2017-12-29T10:16:21.000Z</published>
    <updated>2017-12-29T14:20:38.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Machine-Learning-by-Stanford-University"><a href="#Machine-Learning-by-Stanford-University" class="headerlink" title="Machine Learning by Stanford University"></a>Machine Learning by Stanford University</h1><p>It is a note about the process that I’m trying to learn Machine Learning on coursera. </p><p>I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. </p><p>But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.</p><p>Still, I am too old to learn and have no confidence to guarantee I can really master it one day.</p><p>😂😂😂</p><hr><h2 id="1-Linear-Regression-with-One-Variable"><a href="#1-Linear-Regression-with-One-Variable" class="headerlink" title="1 Linear Regression with One Variable"></a>1 Linear Regression with One Variable</h2><h2 id="2-Linear-Regression-with-Multiple-Variables"><a href="#2-Linear-Regression-with-Multiple-Variables" class="headerlink" title="2 Linear Regression with Multiple Variables"></a>2 Linear Regression with Multiple Variables</h2><h3 id="ex1"><a href="#ex1" class="headerlink" title="ex1"></a>ex1</h3><p>This is my favorite part, I love coding 😄.</p><h4 id="ComputeCost"><a href="#ComputeCost" class="headerlink" title="ComputeCost"></a>ComputeCost</h4><p>You see, the cost function here </p><p>(OMG: the formula code is <code>J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</code> in markdown) 🤯</p><script type="math/tex; mode=display">J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</script><script type="math/tex; mode=display">h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n</script><p>In fact, I found it is <code>X * theta</code> in the real calculation by <code>Octave</code> instead of <code>theta&#39; * X</code> as the formula shows.</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = sum(((X * theta) - y).^<span class="number">2</span>)/<span class="number">2</span>/m</span><br></pre></td></tr></table></figure><h4 id="GradientDescent"><a href="#GradientDescent" class="headerlink" title="GradientDescent"></a>GradientDescent</h4><p>Similarly, the Gradient Descent here:</p><p>repeat until convergence: {</p><p>​    <script type="math/tex">\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}</script></p><p>​    <script type="math/tex">(for\  j := 0…n)</script></p><p>}</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">theta = theta - alpha/m*(X' * ((X * theta) - y))</span><br></pre></td></tr></table></figure><p>It take me hours 💥 to figure out why should I using  <code>X&#39; *  ((X * theta) - y))</code> </p><p>Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to <code>sum()</code> part as the formule shows.</p><p>I am still a little bit confused although I passed the test. 😵</p><h2 id="3-Logistic-Regression"><a href="#3-Logistic-Regression" class="headerlink" title="3 Logistic Regression"></a>3 Logistic Regression</h2><p>To Be Continued…</p><a id="more"></a><p><img src="https://i.imgur.com/v4JpxOp.png" alt="1 Linear Regression with One Variable"></p><p><img src="https://i.imgur.com/G2Yn9nA.png" alt="2 Linear Regression with Multiple Variables"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Machine-Learning-by-Stanford-University&quot;&gt;&lt;a href=&quot;#Machine-Learning-by-Stanford-University&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning by Stanford University&quot;&gt;&lt;/a&gt;Machine Learning by Stanford University&lt;/h1&gt;&lt;p&gt;It is a note about the process that I’m trying to learn Machine Learning on coursera. &lt;/p&gt;
&lt;p&gt;I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. &lt;/p&gt;
&lt;p&gt;But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.&lt;/p&gt;
&lt;p&gt;Still, I am too old to learn and have no confidence to guarantee I can really master it one day.&lt;/p&gt;
&lt;p&gt;😂😂😂&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-Linear-Regression-with-One-Variable&quot;&gt;&lt;a href=&quot;#1-Linear-Regression-with-One-Variable&quot; class=&quot;headerlink&quot; title=&quot;1 Linear Regression with One Variable&quot;&gt;&lt;/a&gt;1 Linear Regression with One Variable&lt;/h2&gt;&lt;h2 id=&quot;2-Linear-Regression-with-Multiple-Variables&quot;&gt;&lt;a href=&quot;#2-Linear-Regression-with-Multiple-Variables&quot; class=&quot;headerlink&quot; title=&quot;2 Linear Regression with Multiple Variables&quot;&gt;&lt;/a&gt;2 Linear Regression with Multiple Variables&lt;/h2&gt;&lt;h3 id=&quot;ex1&quot;&gt;&lt;a href=&quot;#ex1&quot; class=&quot;headerlink&quot; title=&quot;ex1&quot;&gt;&lt;/a&gt;ex1&lt;/h3&gt;&lt;p&gt;This is my favorite part, I love coding 😄.&lt;/p&gt;
&lt;h4 id=&quot;ComputeCost&quot;&gt;&lt;a href=&quot;#ComputeCost&quot; class=&quot;headerlink&quot; title=&quot;ComputeCost&quot;&gt;&lt;/a&gt;ComputeCost&lt;/h4&gt;&lt;p&gt;You see, the cost function here &lt;/p&gt;
&lt;p&gt;(OMG: the formula code is &lt;code&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/code&gt; in markdown) 🤯&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n&lt;/script&gt;&lt;p&gt;In fact, I found it is &lt;code&gt;X * theta&lt;/code&gt; in the real calculation by &lt;code&gt;Octave&lt;/code&gt; instead of &lt;code&gt;theta&amp;#39; * X&lt;/code&gt; as the formula shows.&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = sum(((X * theta) - y).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;GradientDescent&quot;&gt;&lt;a href=&quot;#GradientDescent&quot; class=&quot;headerlink&quot; title=&quot;GradientDescent&quot;&gt;&lt;/a&gt;GradientDescent&lt;/h4&gt;&lt;p&gt;Similarly, the Gradient Descent here:&lt;/p&gt;
&lt;p&gt;repeat until convergence: {&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;(for\  j := 0…n)&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theta = theta - alpha/m*(X&#39; * ((X * theta) - y))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It take me hours 💥 to figure out why should I using  &lt;code&gt;X&amp;#39; *  ((X * theta) - y))&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to &lt;code&gt;sum()&lt;/code&gt; part as the formule shows.&lt;/p&gt;
&lt;p&gt;I am still a little bit confused although I passed the test. 😵&lt;/p&gt;
&lt;h2 id=&quot;3-Logistic-Regression&quot;&gt;&lt;a href=&quot;#3-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;3 Logistic Regression&quot;&gt;&lt;/a&gt;3 Logistic Regression&lt;/h2&gt;&lt;p&gt;To Be Continued…&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Batch replace NamedColors to RGB in Storyboard</title>
    <link href="http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/"/>
    <id>http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/</id>
    <published>2017-10-23T08:41:08.000Z</published>
    <updated>2018-04-15T15:28:10.008Z</updated>
    
    <content type="html"><![CDATA[<p>Updates: 2018-04-15</p><p>As the Xcode updated to 9.3, the NamedColors will cause error instead of warning, the shell don’t have to much value.</p><p>And there is a fast way to do it by click the color in Storyboard and touch the <code>Hex Color #</code>  say “FFFFFF” after you choosed the NamedColor.</p><hr><p>NamedColors is a new feature that really convenient for developers to use in Xcode</p><p>But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…</p><p>The main idea is:</p><ul><li>Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.</li><li>Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.</li></ul><p>First, save it as <code>NamedColors2RGB.py</code>  in your project root folder.</p><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.getcwd()</span><br><span class="line"></span><br><span class="line">colorDict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># read all colorset</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">if</span> d.endswith(<span class="string">".colorset"</span>):</span><br><span class="line">            colorK = d.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"found "</span> + colorK</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file == <span class="string">"Contents.json"</span>:</span><br><span class="line">                    f = open(os.path.join(root, d, file))</span><br><span class="line">                    jd = json.load(f)</span><br><span class="line">                    rgb = jd[<span class="string">"colors"</span>][<span class="number">0</span>][<span class="string">"color"</span>][<span class="string">"components"</span>]</span><br><span class="line">                    colorDict[colorK] = <span class="string">'red="&#123;&#125;" green="&#123;&#125;" blue="&#123;&#125;" alpha="&#123;&#125;" colorSpace="calibratedRGB"'</span>.format(rgb[<span class="string">"red"</span>], rgb[<span class="string">"green"</span>], rgb[<span class="string">"blue"</span>], rgb[<span class="string">"alpha"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># replacing</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith((<span class="string">".storyboard"</span>, <span class="string">".xib"</span>)):</span><br><span class="line">            path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Replacing namedColor in "</span> + path</span><br><span class="line">            f = open(path)</span><br><span class="line">            nf = f.read()</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;namedColor name=.*\n.*\n +&lt;/namedColor&gt;\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;capability name=\"Named colors\" minToolsVersion=\".*\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> colorDict.items():</span><br><span class="line">                nf = re.sub(<span class="string">r'name="&#123;&#125;"'</span>.format(k), v, nf)</span><br><span class="line"></span><br><span class="line">            f = open(path, <span class="string">'w'</span>)</span><br><span class="line">            f.write(nf)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>Then, <code>Xcode -&gt; Project File -&gt; Build Phases -&gt; Add Build Phase -&gt; Add Run Script</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> = <span class="string">"Release"</span> ]; <span class="keyword">then</span></span><br><span class="line">    python NamedColors2RGB.py</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>If you found anyway to reverse it back to NamedColors, please leave a msg to me.</p><p>After all, once the NamedColors changed, all the color in the interface builder should be changed too.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Updates: 2018-04-15&lt;/p&gt;
&lt;p&gt;As the Xcode updated to 9.3, the NamedColors will cause error instead of warning, the shell don’t have to much value.&lt;/p&gt;
&lt;p&gt;And there is a fast way to do it by click the color in Storyboard and touch the &lt;code&gt;Hex Color #&lt;/code&gt;  say “FFFFFF” after you choosed the NamedColor.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;NamedColors is a new feature that really convenient for developers to use in Xcode&lt;/p&gt;
&lt;p&gt;But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…&lt;/p&gt;
&lt;p&gt;The main idea is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.&lt;/li&gt;
&lt;li&gt;Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, save it as &lt;code&gt;NamedColors2RGB.py&lt;/code&gt;  in your project root folder.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://artwalk.github.io/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Building Apps for iPhone X</title>
    <link href="http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/"/>
    <id>http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/</id>
    <published>2017-10-20T14:37:50.000Z</published>
    <updated>2017-10-20T15:36:14.082Z</updated>
    
    <content type="html"><![CDATA[<p>First, Watching <a href="https://developer.apple.com/videos/play/fall2017/201/" target="_blank" rel="noopener">Building Apps for iPhone X</a> with 2x speed to get a glance,  it will speed 13/2 minutes.</p><ul><li>The key point is to open Safe Area in Storyboard.</li><li>The LayoutConstraint attracted to superview can beyond the Safe Area.</li></ul><a id="more"></a><p>My current app has 17 Storyboards and 28 ViewControllers.</p><p>In each ViewController, the previous develepers used an UIView on top to cover the system’s navigationController to do some tricks, which means the constraint of the view has a <code>height == 64</code>, and <code>top == superview.top</code>.</p><p>Although it’s a little disgusting, but it works on previous devices which navigationbar’s height are always 64.</p><p>But on iPhone X, it need to use Safe Area. Which means I have better to delete the fake navigationView. But that means move all the buttons, actions, animations to the system’s navigationController if the segue kind is <code>push</code>.</p><p>Honestly to say, it’s much easier than I thought after all works done.</p><p>For the segue kind is <code>present modally</code>, the fake view still do its job by changed it’s height only if the device is iPhone X.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> top = <span class="type">UIApplication</span>.shared.keyWindow?.safeAreaInsets.top, top &gt; <span class="number">0</span> &#123;</span><br><span class="line">      viewHeight.constant = <span class="number">88</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other usefull tools</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">navigationItem.setHidesBackButton(<span class="literal">true</span>, animated: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">navigationController?.interactivePopGestureRecognizer?.isEnabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.layer.zPosition = -<span class="number">1</span> <span class="comment">// put the navigationBar under the vc'view</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First, Watching &lt;a href=&quot;https://developer.apple.com/videos/play/fall2017/201/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building Apps for iPhone X&lt;/a&gt; with 2x speed to get a glance,  it will speed 13/2 minutes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key point is to open Safe Area in Storyboard.&lt;/li&gt;
&lt;li&gt;The LayoutConstraint attracted to superview can beyond the Safe Area.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Codility Stacks and Queues</title>
    <link href="http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/"/>
    <id>http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/</id>
    <published>2017-09-19T01:26:34.000Z</published>
    <updated>2017-09-19T05:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="StoneWall"><a href="#StoneWall" class="headerlink" title="StoneWall"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/" target="_blank" rel="noopener">StoneWall</a></h2><p>64%, timeout.</p><p>It seems Swift stack is not fast enough. :(</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> H : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">H</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> !stack.isEmpty &amp;&amp; $<span class="number">1</span> &lt; stack.last! &#123;</span><br><span class="line">            stack.popLast()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> stack.isEmpty || $<span class="number">1</span> &gt; stack.last! &#123;</span><br><span class="line">            stack.append($<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> $<span class="number">0</span> + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nesting"><a href="#Nesting" class="headerlink" title="Nesting"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/nesting/" target="_blank" rel="noopener">Nesting</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> S : <span class="keyword">inout</span> String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> <span class="type">S</span>.characters &#123;</span><br><span class="line">        sum += <span class="type">String</span>(<span class="built_in">c</span>) == <span class="string">"("</span> ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;StoneWall&quot;&gt;&lt;a href=&quot;#StoneWall&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Sorting</title>
    <link href="http://artwalk.github.io/2017/09/18/Codility-Sorting/"/>
    <id>http://artwalk.github.io/2017/09/18/Codility-Sorting/</id>
    <published>2017-09-17T16:22:18.000Z</published>
    <updated>2017-09-18T16:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a><a href="https://codility.com/programmers/lessons/6-sorting/distinct/" target="_blank" rel="noopener">Distinct</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Set</span>(<span class="type">A</span>).<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a><a href="https://codility.com/programmers/lessons/6-sorting/triangle/" target="_blank" rel="noopener">Triangle</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.<span class="built_in">count</span> &lt; <span class="number">3</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedA = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;sortedA.<span class="built_in">count</span>-<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> iv = sortedA[i], ij = sortedA[i+<span class="number">1</span>], ik = sortedA[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> iv + ij &gt; ik &amp;&amp; iv + ik &gt; ij &amp;&amp; ij + ik &gt; iv &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxProductOfThree"><a href="#MaxProductOfThree" class="headerlink" title="MaxProductOfThree"></a><a href="https://codility.com/programmers/lessons/6-sorting/max_product_of_three/" target="_blank" rel="noopener">MaxProductOfThree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">let</span> n = a.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b1 = a[<span class="number">0</span>] * a[<span class="number">1</span>] * a[n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> b2 = a[n-<span class="number">3</span>] * a[n-<span class="number">2</span>] * a[n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  b1 &gt; b2 ? b1 : b2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;Distinct&quot;&gt;&lt;a href=&quot;#Distinct&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Prefix Sums</title>
    <link href="http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/"/>
    <id>http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/</id>
    <published>2017-09-17T15:45:41.000Z</published>
    <updated>2017-09-17T16:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="PassingCars"><a href="#PassingCars" class="headerlink" title="PassingCars"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/passing_cars/" target="_blank" rel="noopener">PassingCars</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">A</span>[i] == <span class="number">0</span> &#123;</span><br><span class="line">            res += sum</span><br><span class="line">            <span class="keyword">if</span> res &gt; <span class="number">1000000000</span> &#123;</span><br><span class="line">                res = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDiv"><a href="#CountDiv" class="headerlink" title="CountDiv"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/count_div/" target="_blank" rel="noopener">CountDiv</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : Int, <span class="number">_</span> B : Int, <span class="number">_</span> K : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = (<span class="type">Double</span>(<span class="type">A</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.up)</span><br><span class="line">    <span class="keyword">let</span> j = (<span class="type">Double</span>(<span class="type">B</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.down)</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">Int</span>(j - i) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;PassingCars&quot;&gt;&lt;a href=&quot;#PassingCars&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>codility</title>
    <link href="http://artwalk.github.io/2017/09/09/Codility/"/>
    <id>http://artwalk.github.io/2017/09/09/Codility/</id>
    <published>2017-09-09T14:22:59.000Z</published>
    <updated>2017-09-11T09:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BinaryGap"><a href="#BinaryGap" class="headerlink" title="BinaryGap"></a>BinaryGap</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="type">String</span>(<span class="type">N</span>, radix: <span class="number">2</span>).trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"0"</span>))</span><br><span class="line">    <span class="keyword">let</span> sum = s.components(separatedBy: <span class="string">"1"</span>).<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = $<span class="number">1</span>.characters.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">return</span> i &gt; $<span class="number">0</span> ? i : $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OddOccurrencesInArray"><a href="#OddOccurrencesInArray" class="headerlink" title="OddOccurrencesInArray"></a>OddOccurrencesInArray</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> ^ $<span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicRotation"><a href="#CyclicRotation" class="headerlink" title="CyclicRotation"></a>CyclicRotation</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int], <span class="number">_</span> K : Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.isEmpty &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="type">A</span>.<span class="built_in">count</span> - (<span class="type">K</span> % <span class="type">A</span>.<span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(<span class="type">A</span>[i..&lt;<span class="type">A</span>.<span class="built_in">count</span>] + <span class="type">A</span>[<span class="number">0</span>..&lt;i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FrogJmp"><a href="#FrogJmp" class="headerlink" title="FrogJmp"></a>FrogJmp</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> X : Int, <span class="number">_</span> Y : Int, <span class="number">_</span> D : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>((<span class="type">Double</span>(<span class="type">Y</span> - <span class="type">X</span>) / <span class="type">Double</span>(<span class="type">D</span>)).rounded(.up))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TapeEquilibrium"><a href="#TapeEquilibrium" class="headerlink" title="TapeEquilibrium"></a>TapeEquilibrium</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">Int</span>.<span class="built_in">max</span>, a2 = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;, a1 = <span class="number">0</span></span><br><span class="line">    <span class="type">A</span>[<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>].forEach &#123;</span><br><span class="line">        a1 += $<span class="number">0</span>; a2 -= $<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="built_in">abs</span>(a1 - a2)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> &gt; tmp &#123; <span class="built_in">min</span> = tmp &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a>PermMissingElem</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = (<span class="number">1</span> + <span class="type">A</span>.<span class="built_in">count</span>) * <span class="type">A</span>.<span class="built_in">count</span> / <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> real = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">count</span> - (real - sum) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MissingInteger"><a href="#MissingInteger" class="headerlink" title="MissingInteger"></a>MissingInteger</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bList:[<span class="type">Bool</span>] = <span class="type">Array</span>(repeating: <span class="literal">true</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> $<span class="number">0</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            bList[$<span class="number">0</span>] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> bList[index] == <span class="literal">false</span> &#123;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxCounters"><a href="#MaxCounters" class="headerlink" title="MaxCounters"></a>MaxCounters</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int, <span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="type">N</span>), <span class="built_in">max</span> = <span class="number">0</span>, newMax = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">let</span> v = $<span class="number">0</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v == <span class="type">N</span> &#123;</span><br><span class="line">            <span class="built_in">max</span> = newMax <span class="comment">// for O(N + M), skip: arr = Array(repeating: max, count: N)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[v] = (arr[v] &gt; <span class="built_in">max</span> ? arr[v] : <span class="built_in">max</span>) + <span class="number">1</span></span><br><span class="line">            newMax = newMax &lt; arr[v] ? arr[v] : newMax</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="built_in">map</span> &#123; $<span class="number">0</span> &lt; <span class="built_in">max</span> ? <span class="built_in">max</span> : $<span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Disqus-with-Code-style"><a href="#Disqus-with-Code-style" class="headerlink" title="Disqus with Code style"></a>Disqus with Code style</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;<span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"Swift"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BinaryGap&quot;&gt;&lt;a href=&quot;#BinaryGap&quot; class=&quot;headerlink&quot; title=&quot;BinaryGap&quot;&gt;&lt;/a&gt;BinaryGap&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="codility" scheme="http://artwalk.github.io/tags/codility/"/>
    
  </entry>
  
  <entry>
    <title>22 Generate Parentheses</title>
    <link href="http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/"/>
    <id>http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/</id>
    <published>2017-09-06T16:52:09.000Z</published>
    <updated>2017-09-07T13:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h1><p>Tips:</p><ul><li>If there is a <code>(</code> on the left, it should have a <code>)</code> somewhere on the right</li><li><strong>N</strong> will have one more <code>()</code> comparing with <strong>N-1</strong></li></ul><p>Therefore, Iterate all items in <strong>N-1</strong> array, for each Parentheses String, </p><ul><li>Left → Right, if the char is <code>(</code>, insert a <code>()</code> behind</li><li>Add <code>()</code> in the Leftmost</li></ul><p>Put these two new strings into a Set collection to eliminate redundancy.</p><a id="more"></a><p>对于 N-1 的集合里的每个 String, </p><ul><li>遍历，从左往右，碰到左括号，插入<code>()</code></li><li>最左边补 <code>()</code></li></ul><p>放到 Set 里去重</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dict: [<span class="type">Int</span>:[<span class="type">String</span>]] = [<span class="number">0</span>:[], <span class="number">1</span>:[<span class="string">"()"</span>], <span class="number">2</span>:[<span class="string">"(())"</span>, <span class="string">"()()"</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> res = dict[n] &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> setN = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">            <span class="keyword">let</span> pre = generateParenthesis(n-<span class="number">1</span>)</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;$<span class="number">0</span>.characters.<span class="built_in">count</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i)</span><br><span class="line">                    <span class="keyword">let</span> char: <span class="type">Character</span> = $<span class="number">0</span>[index]</span><br><span class="line">                    <span class="keyword">if</span> <span class="type">String</span>(char) == <span class="string">"("</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i+<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">let</span> str = $<span class="number">0</span>.substring(to: index) + <span class="string">"()"</span> + $<span class="number">0</span>.substring(from: index)</span><br><span class="line">                        setN.insert(str)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                setN.insert(<span class="string">"()"</span> + $<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> res = <span class="type">Array</span>(setN)</span><br><span class="line">            dict[n] = res</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;22-Generate-Parentheses&quot;&gt;&lt;a href=&quot;#22-Generate-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;22 Generate Parentheses&quot;&gt;&lt;/a&gt;22 Generate Parentheses&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there is a &lt;code&gt;(&lt;/code&gt; on the left, it should have a &lt;code&gt;)&lt;/code&gt; somewhere on the right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; will have one more &lt;code&gt;()&lt;/code&gt; comparing with &lt;strong&gt;N-1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, Iterate all items in &lt;strong&gt;N-1&lt;/strong&gt; array, for each Parentheses String, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left → Right, if the char is &lt;code&gt;(&lt;/code&gt;, insert a &lt;code&gt;()&lt;/code&gt; behind&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;()&lt;/code&gt; in the Leftmost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put these two new strings into a Set collection to eliminate redundancy.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>18 4Sum</title>
    <link href="http://artwalk.github.io/2017/09/04/18-4Sum/"/>
    <id>http://artwalk.github.io/2017/09/04/18-4Sum/</id>
    <published>2017-09-03T16:31:19.000Z</published>
    <updated>2017-09-03T16:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18 4Sum"></a>18 4Sum</h1><p>Tips:</p><p>Just like 3Sum, sort array first, then</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">   [-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">//  i→</span></span><br><span class="line"><span class="comment">//      j→</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//          k→      ←f</span></span><br></pre></td></tr></table></figure><p>When i, j, k, f, are iterating, the same value should be skipped for saving time.</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> sortNums = nums.sorted()</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = sortNums.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt; <span class="number">4</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> result = [[<span class="type">Int</span>]]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= <span class="built_in">count</span> - <span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> iv = sortNums[i]</span><br><span class="line">            <span class="keyword">var</span> j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= <span class="built_in">count</span> - <span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> jv = sortNums[j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> k = j + <span class="number">1</span>, f = <span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">                loopkf: <span class="keyword">while</span> k &lt; f &#123;</span><br><span class="line">                    <span class="keyword">let</span> kv = sortNums[k], fv = sortNums[f]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> sum = iv + jv + kv + fv</span><br><span class="line">                    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                        result.append([iv, jv, kv, fv])</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span> &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span>  &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> jv == sortNums[j] &amp;&amp; j &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; j += <span class="number">1</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> iv == sortNums[i] &amp;&amp; i &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line">s.fourSum([<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s.fourSum([<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">4</span>,<span class="number">0</span>,-<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>,-<span class="number">2</span>], <span class="number">7</span>)</span><br><span class="line">s.fourSum([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18-4Sum&quot;&gt;&lt;a href=&quot;#18-4Sum&quot; class=&quot;headerlink&quot; title=&quot;18 4Sum&quot;&gt;&lt;/a&gt;18 4Sum&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Just like 3Sum, sort array first, then&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   [-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  i→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      j→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//          k→      ←f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When i, j, k, f, are iterating, the same value should be skipped for saving time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>19 Remove Nth Node From End of List</title>
    <link href="http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-09-03T15:16:26.000Z</published>
    <updated>2017-09-03T15:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19 Remove Nth Node From End of List"></a>19 Remove Nth Node From End of List</h1><p>Tips:</p><p>Traverse all the Note and put their reference into a <code>[ListNode]</code> , once you can get their sequence number. </p><p>Be careful that <code>list.count == n</code> which means you have to delete the <code>head</code></p><a id="more"></a><p>Note 的值并不重要，遍历一遍的同时把他们的地址引用扔到一个数组里面，序列号就有了，删除时把上一个的 next 指针指向 next.next</p><p>另外要注意下 n 是 head 时，上一个 note 是 nil</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> list = [<span class="type">ListNode</span>]()</span><br><span class="line">        <span class="keyword">var</span> root = head</span><br><span class="line">        <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            list.append(cur!)</span><br><span class="line">            cur = cur!.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = list.<span class="built_in">count</span> - n</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            root = root?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list[i-<span class="number">1</span>].next = list[i-<span class="number">1</span>].next?.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(cur!.val)</span><br><span class="line">        cur = cur?.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = <span class="type">ListNode</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> &#123;</span><br><span class="line">    cur?.next = <span class="type">ListNode</span>(i)</span><br><span class="line">    cur = cur?.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printList(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line"><span class="keyword">let</span> s1 = s.removeNthFromEnd(head, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = s.removeNthFromEnd(s1, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;19 Remove Nth Node From End of List&quot;&gt;&lt;/a&gt;19 Remove Nth Node From End of List&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Traverse all the Note and put their reference into a &lt;code&gt;[ListNode]&lt;/code&gt; , once you can get their sequence number. &lt;/p&gt;
&lt;p&gt;Be careful that &lt;code&gt;list.count == n&lt;/code&gt; which means you have to delete the &lt;code&gt;head&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>17 Letter Combinations of a Phone Number</title>
    <link href="http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-09-03T14:03:13.000Z</published>
    <updated>2017-09-03T14:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17    Letter Combinations of a Phone Number"></a>17    Letter Combinations of a Phone Number</h1><p>Tips:</p><p>The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.</p><p>The point is using each new character in the <code>string</code> to Multiply the <code>[String]</code> which was generated in the previous step.</p><a id="more"></a><p>结果是一颗树，如果一次构建，再遍历，结构会很复杂并且占空间</p><p>本质上是用已经生成的 [String] 里的 每个元素加上 String 的每个元素</p><p>分而治之就好办了（两个函数）</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dict = [<span class="number">2</span>:<span class="string">"abc"</span>, <span class="number">3</span>:<span class="string">"def"</span>, <span class="number">4</span>:<span class="string">"ghi"</span>, <span class="number">5</span>:<span class="string">"jkl"</span>, <span class="number">6</span>:<span class="string">"mno"</span>, <span class="number">7</span>:<span class="string">"pqrs"</span>, <span class="number">8</span>:<span class="string">"tuv"</span>, <span class="number">9</span>:<span class="string">"wxyz"</span> ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sxs</span><span class="params">(s1: [String], s2: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">        s2.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> s1.isEmpty &#123;</span><br><span class="line">                res.append(<span class="string">"<span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s1.forEach &#123; s <span class="keyword">in</span></span><br><span class="line">                    res.append(<span class="string">"<span class="subst">\(s)</span><span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(<span class="number">_</span> digits: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line">        digits.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            res = sxs(s1: res, s2: dict[<span class="type">Int</span>(<span class="type">String</span>(<span class="built_in">c</span>))!]!)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17-Letter-Combinations-of-a-Phone-Number&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number&quot; class=&quot;headerlink&quot; title=&quot;17    Letter Combinations of a Phone Number&quot;&gt;&lt;/a&gt;17    Letter Combinations of a Phone Number&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.&lt;/p&gt;
&lt;p&gt;The point is using each new character in the &lt;code&gt;string&lt;/code&gt; to Multiply the &lt;code&gt;[String]&lt;/code&gt; which was generated in the previous step.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
