<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Artwalk&#39;s Blog</title>
  
  <subtitle>游走的艺术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://artwalk.github.io/"/>
  <updated>2017-12-29T14:20:38.230Z</updated>
  <id>http://artwalk.github.io/</id>
  
  <author>
    <name>Artwalk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Machine Learning by Stanford University</title>
    <link href="http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/"/>
    <id>http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/</id>
    <published>2017-12-29T10:16:21.000Z</published>
    <updated>2017-12-29T14:20:38.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Machine-Learning-by-Stanford-University"><a href="#Machine-Learning-by-Stanford-University" class="headerlink" title="Machine Learning by Stanford University"></a>Machine Learning by Stanford University</h1><p>It is a note about the process that I’m trying to learn Machine Learning on coursera. </p><p>I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. </p><p>But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.</p><p>Still, I am too old to learn and have no confidence to guarantee I can really master it one day.</p><p>😂😂😂</p><hr><h2 id="1-Linear-Regression-with-One-Variable"><a href="#1-Linear-Regression-with-One-Variable" class="headerlink" title="1 Linear Regression with One Variable"></a>1 Linear Regression with One Variable</h2><h2 id="2-Linear-Regression-with-Multiple-Variables"><a href="#2-Linear-Regression-with-Multiple-Variables" class="headerlink" title="2 Linear Regression with Multiple Variables"></a>2 Linear Regression with Multiple Variables</h2><h3 id="ex1"><a href="#ex1" class="headerlink" title="ex1"></a>ex1</h3><p>This is my favorite part, I love coding 😄.</p><h4 id="ComputeCost"><a href="#ComputeCost" class="headerlink" title="ComputeCost"></a>ComputeCost</h4><p>You see, the cost function here </p><p>(OMG: the formula code is <code>J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</code> in markdown) 🤯</p><script type="math/tex; mode=display">J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</script><script type="math/tex; mode=display">h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n</script><p>In fact, I found it is <code>X * theta</code> in the real calculation by <code>Octave</code> instead of <code>theta&#39; * X</code> as the formula shows.</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = sum(((X * theta) - y).^<span class="number">2</span>)/<span class="number">2</span>/m</span><br></pre></td></tr></table></figure><h4 id="GradientDescent"><a href="#GradientDescent" class="headerlink" title="GradientDescent"></a>GradientDescent</h4><p>Similarly, the Gradient Descent here:</p><p>repeat until convergence: {</p><p>​    <script type="math/tex">\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}</script></p><p>​    <script type="math/tex">(for\  j := 0…n)</script></p><p>}</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">theta = theta - alpha/m*(X' * ((X * theta) - y))</span><br></pre></td></tr></table></figure><p>It take me hours 💥 to figure out why should I using  <code>X&#39; *  ((X * theta) - y))</code> </p><p>Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to <code>sum()</code> part as the formule shows.</p><p>I am still a little bit confused although I passed the test. 😵</p><h2 id="3-Logistic-Regression"><a href="#3-Logistic-Regression" class="headerlink" title="3 Logistic Regression"></a>3 Logistic Regression</h2><p>To Be Continued…</p><a id="more"></a><p><img src="https://i.imgur.com/v4JpxOp.png" alt="1 Linear Regression with One Variable"></p><p><img src="https://i.imgur.com/G2Yn9nA.png" alt="2 Linear Regression with Multiple Variables"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Machine-Learning-by-Stanford-University&quot;&gt;&lt;a href=&quot;#Machine-Learning-by-Stanford-University&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning by Stanford University&quot;&gt;&lt;/a&gt;Machine Learning by Stanford University&lt;/h1&gt;&lt;p&gt;It is a note about the process that I’m trying to learn Machine Learning on coursera. &lt;/p&gt;
&lt;p&gt;I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. &lt;/p&gt;
&lt;p&gt;But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.&lt;/p&gt;
&lt;p&gt;Still, I am too old to learn and have no confidence to guarantee I can really master it one day.&lt;/p&gt;
&lt;p&gt;😂😂😂&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-Linear-Regression-with-One-Variable&quot;&gt;&lt;a href=&quot;#1-Linear-Regression-with-One-Variable&quot; class=&quot;headerlink&quot; title=&quot;1 Linear Regression with One Variable&quot;&gt;&lt;/a&gt;1 Linear Regression with One Variable&lt;/h2&gt;&lt;h2 id=&quot;2-Linear-Regression-with-Multiple-Variables&quot;&gt;&lt;a href=&quot;#2-Linear-Regression-with-Multiple-Variables&quot; class=&quot;headerlink&quot; title=&quot;2 Linear Regression with Multiple Variables&quot;&gt;&lt;/a&gt;2 Linear Regression with Multiple Variables&lt;/h2&gt;&lt;h3 id=&quot;ex1&quot;&gt;&lt;a href=&quot;#ex1&quot; class=&quot;headerlink&quot; title=&quot;ex1&quot;&gt;&lt;/a&gt;ex1&lt;/h3&gt;&lt;p&gt;This is my favorite part, I love coding 😄.&lt;/p&gt;
&lt;h4 id=&quot;ComputeCost&quot;&gt;&lt;a href=&quot;#ComputeCost&quot; class=&quot;headerlink&quot; title=&quot;ComputeCost&quot;&gt;&lt;/a&gt;ComputeCost&lt;/h4&gt;&lt;p&gt;You see, the cost function here &lt;/p&gt;
&lt;p&gt;(OMG: the formula code is &lt;code&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/code&gt; in markdown) 🤯&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n&lt;/script&gt;&lt;p&gt;In fact, I found it is &lt;code&gt;X * theta&lt;/code&gt; in the real calculation by &lt;code&gt;Octave&lt;/code&gt; instead of &lt;code&gt;theta&amp;#39; * X&lt;/code&gt; as the formula shows.&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = sum(((X * theta) - y).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;GradientDescent&quot;&gt;&lt;a href=&quot;#GradientDescent&quot; class=&quot;headerlink&quot; title=&quot;GradientDescent&quot;&gt;&lt;/a&gt;GradientDescent&lt;/h4&gt;&lt;p&gt;Similarly, the Gradient Descent here:&lt;/p&gt;
&lt;p&gt;repeat until convergence: {&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;(for\  j := 0…n)&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theta = theta - alpha/m*(X&#39; * ((X * theta) - y))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It take me hours 💥 to figure out why should I using  &lt;code&gt;X&amp;#39; *  ((X * theta) - y))&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to &lt;code&gt;sum()&lt;/code&gt; part as the formule shows.&lt;/p&gt;
&lt;p&gt;I am still a little bit confused although I passed the test. 😵&lt;/p&gt;
&lt;h2 id=&quot;3-Logistic-Regression&quot;&gt;&lt;a href=&quot;#3-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;3 Logistic Regression&quot;&gt;&lt;/a&gt;3 Logistic Regression&lt;/h2&gt;&lt;p&gt;To Be Continued…&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Batch replace NamedColors to RGB in Storyboard</title>
    <link href="http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/"/>
    <id>http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/</id>
    <published>2017-10-23T08:41:08.000Z</published>
    <updated>2017-12-29T13:57:28.511Z</updated>
    
    <content type="html"><![CDATA[<p>NamedColors is a new feature that really convenient for developers to use in Xcode</p><p>But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…</p><p>The main idea is:</p><ul><li>Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.</li><li>Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.</li></ul><p>First, save it as <code>NamedColors2RGB.py</code>  in your project root folder.</p><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.getcwd()</span><br><span class="line"></span><br><span class="line">colorDict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># read all colorset</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">if</span> d.endswith(<span class="string">".colorset"</span>):</span><br><span class="line">            colorK = d.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"found "</span> + colorK</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file == <span class="string">"Contents.json"</span>:</span><br><span class="line">                    f = open(os.path.join(root, d, file))</span><br><span class="line">                    jd = json.load(f)</span><br><span class="line">                    rgb = jd[<span class="string">"colors"</span>][<span class="number">0</span>][<span class="string">"color"</span>][<span class="string">"components"</span>]</span><br><span class="line">                    colorDict[colorK] = <span class="string">'red="&#123;&#125;" green="&#123;&#125;" blue="&#123;&#125;" alpha="&#123;&#125;" colorSpace="calibratedRGB"'</span>.format(rgb[<span class="string">"red"</span>], rgb[<span class="string">"green"</span>], rgb[<span class="string">"blue"</span>], rgb[<span class="string">"alpha"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># replacing</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith((<span class="string">".storyboard"</span>, <span class="string">".xib"</span>)):</span><br><span class="line">            path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Replacing namedColor in "</span> + path</span><br><span class="line">            f = open(path)</span><br><span class="line">            nf = f.read()</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;namedColor name=.*\n.*\n +&lt;/namedColor&gt;\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;capability name=\"Named colors\" minToolsVersion=\".*\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> colorDict.items():</span><br><span class="line">                nf = re.sub(<span class="string">r'name="&#123;&#125;"'</span>.format(k), v, nf)</span><br><span class="line"></span><br><span class="line">            f = open(path, <span class="string">'w'</span>)</span><br><span class="line">            f.write(nf)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>Then, <code>Xcode -&gt; Project File -&gt; Build Phases -&gt; Add Build Phase -&gt; Add Run Script</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> = <span class="string">"Release"</span> ]; <span class="keyword">then</span></span><br><span class="line">    python NamedColors2RGB.py</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>If you found anyway to reverse it back to NamedColors, please leave a msg to me.</p><p>After all, once the NamedColors changed, all the color in the interface builder should be changed too.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NamedColors is a new feature that really convenient for developers to use in Xcode&lt;/p&gt;
&lt;p&gt;But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…&lt;/p&gt;
&lt;p&gt;The main idea is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.&lt;/li&gt;
&lt;li&gt;Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, save it as &lt;code&gt;NamedColors2RGB.py&lt;/code&gt;  in your project root folder.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://artwalk.github.io/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Building Apps for iPhone X</title>
    <link href="http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/"/>
    <id>http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/</id>
    <published>2017-10-20T14:37:50.000Z</published>
    <updated>2017-10-20T15:36:14.082Z</updated>
    
    <content type="html"><![CDATA[<p>First, Watching <a href="https://developer.apple.com/videos/play/fall2017/201/" target="_blank" rel="noopener">Building Apps for iPhone X</a> with 2x speed to get a glance,  it will speed 13/2 minutes.</p><ul><li>The key point is to open Safe Area in Storyboard.</li><li>The LayoutConstraint attracted to superview can beyond the Safe Area.</li></ul><a id="more"></a><p>My current app has 17 Storyboards and 28 ViewControllers.</p><p>In each ViewController, the previous develepers used an UIView on top to cover the system’s navigationController to do some tricks, which means the constraint of the view has a <code>height == 64</code>, and <code>top == superview.top</code>.</p><p>Although it’s a little disgusting, but it works on previous devices which navigationbar’s height are always 64.</p><p>But on iPhone X, it need to use Safe Area. Which means I have better to delete the fake navigationView. But that means move all the buttons, actions, animations to the system’s navigationController if the segue kind is <code>push</code>.</p><p>Honestly to say, it’s much easier than I thought after all works done.</p><p>For the segue kind is <code>present modally</code>, the fake view still do its job by changed it’s height only if the device is iPhone X.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> top = <span class="type">UIApplication</span>.shared.keyWindow?.safeAreaInsets.top, top &gt; <span class="number">0</span> &#123;</span><br><span class="line">      viewHeight.constant = <span class="number">88</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other usefull tools</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">navigationItem.setHidesBackButton(<span class="literal">true</span>, animated: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">navigationController?.interactivePopGestureRecognizer?.isEnabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.layer.zPosition = -<span class="number">1</span> <span class="comment">// put the navigationBar under the vc'view</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First, Watching &lt;a href=&quot;https://developer.apple.com/videos/play/fall2017/201/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building Apps for iPhone X&lt;/a&gt; with 2x speed to get a glance,  it will speed 13/2 minutes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key point is to open Safe Area in Storyboard.&lt;/li&gt;
&lt;li&gt;The LayoutConstraint attracted to superview can beyond the Safe Area.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Codility Stacks and Queues</title>
    <link href="http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/"/>
    <id>http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/</id>
    <published>2017-09-19T01:26:34.000Z</published>
    <updated>2017-09-19T05:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="StoneWall"><a href="#StoneWall" class="headerlink" title="StoneWall"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/" target="_blank" rel="noopener">StoneWall</a></h2><p>64%, timeout.</p><p>It seems Swift stack is not fast enough. :(</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> H : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">H</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> !stack.isEmpty &amp;&amp; $<span class="number">1</span> &lt; stack.last! &#123;</span><br><span class="line">            stack.popLast()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> stack.isEmpty || $<span class="number">1</span> &gt; stack.last! &#123;</span><br><span class="line">            stack.append($<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> $<span class="number">0</span> + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nesting"><a href="#Nesting" class="headerlink" title="Nesting"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/nesting/" target="_blank" rel="noopener">Nesting</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> S : <span class="keyword">inout</span> String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> <span class="type">S</span>.characters &#123;</span><br><span class="line">        sum += <span class="type">String</span>(<span class="built_in">c</span>) == <span class="string">"("</span> ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;StoneWall&quot;&gt;&lt;a href=&quot;#StoneWall&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Sorting</title>
    <link href="http://artwalk.github.io/2017/09/18/Codility-Sorting/"/>
    <id>http://artwalk.github.io/2017/09/18/Codility-Sorting/</id>
    <published>2017-09-17T16:22:18.000Z</published>
    <updated>2017-09-18T16:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a><a href="https://codility.com/programmers/lessons/6-sorting/distinct/" target="_blank" rel="noopener">Distinct</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Set</span>(<span class="type">A</span>).<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a><a href="https://codility.com/programmers/lessons/6-sorting/triangle/" target="_blank" rel="noopener">Triangle</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.<span class="built_in">count</span> &lt; <span class="number">3</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedA = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;sortedA.<span class="built_in">count</span>-<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> iv = sortedA[i], ij = sortedA[i+<span class="number">1</span>], ik = sortedA[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> iv + ij &gt; ik &amp;&amp; iv + ik &gt; ij &amp;&amp; ij + ik &gt; iv &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxProductOfThree"><a href="#MaxProductOfThree" class="headerlink" title="MaxProductOfThree"></a><a href="https://codility.com/programmers/lessons/6-sorting/max_product_of_three/" target="_blank" rel="noopener">MaxProductOfThree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">let</span> n = a.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b1 = a[<span class="number">0</span>] * a[<span class="number">1</span>] * a[n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> b2 = a[n-<span class="number">3</span>] * a[n-<span class="number">2</span>] * a[n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  b1 &gt; b2 ? b1 : b2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;Distinct&quot;&gt;&lt;a href=&quot;#Distinct&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Prefix Sums</title>
    <link href="http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/"/>
    <id>http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/</id>
    <published>2017-09-17T15:45:41.000Z</published>
    <updated>2017-09-17T16:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="PassingCars"><a href="#PassingCars" class="headerlink" title="PassingCars"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/passing_cars/" target="_blank" rel="noopener">PassingCars</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">A</span>[i] == <span class="number">0</span> &#123;</span><br><span class="line">            res += sum</span><br><span class="line">            <span class="keyword">if</span> res &gt; <span class="number">1000000000</span> &#123;</span><br><span class="line">                res = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDiv"><a href="#CountDiv" class="headerlink" title="CountDiv"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/count_div/" target="_blank" rel="noopener">CountDiv</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : Int, <span class="number">_</span> B : Int, <span class="number">_</span> K : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = (<span class="type">Double</span>(<span class="type">A</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.up)</span><br><span class="line">    <span class="keyword">let</span> j = (<span class="type">Double</span>(<span class="type">B</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.down)</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">Int</span>(j - i) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;PassingCars&quot;&gt;&lt;a href=&quot;#PassingCars&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>codility</title>
    <link href="http://artwalk.github.io/2017/09/09/Codility/"/>
    <id>http://artwalk.github.io/2017/09/09/Codility/</id>
    <published>2017-09-09T14:22:59.000Z</published>
    <updated>2017-09-11T09:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BinaryGap"><a href="#BinaryGap" class="headerlink" title="BinaryGap"></a>BinaryGap</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="type">String</span>(<span class="type">N</span>, radix: <span class="number">2</span>).trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"0"</span>))</span><br><span class="line">    <span class="keyword">let</span> sum = s.components(separatedBy: <span class="string">"1"</span>).<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = $<span class="number">1</span>.characters.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">return</span> i &gt; $<span class="number">0</span> ? i : $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OddOccurrencesInArray"><a href="#OddOccurrencesInArray" class="headerlink" title="OddOccurrencesInArray"></a>OddOccurrencesInArray</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> ^ $<span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicRotation"><a href="#CyclicRotation" class="headerlink" title="CyclicRotation"></a>CyclicRotation</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int], <span class="number">_</span> K : Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.isEmpty &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="type">A</span>.<span class="built_in">count</span> - (<span class="type">K</span> % <span class="type">A</span>.<span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(<span class="type">A</span>[i..&lt;<span class="type">A</span>.<span class="built_in">count</span>] + <span class="type">A</span>[<span class="number">0</span>..&lt;i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FrogJmp"><a href="#FrogJmp" class="headerlink" title="FrogJmp"></a>FrogJmp</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> X : Int, <span class="number">_</span> Y : Int, <span class="number">_</span> D : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>((<span class="type">Double</span>(<span class="type">Y</span> - <span class="type">X</span>) / <span class="type">Double</span>(<span class="type">D</span>)).rounded(.up))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TapeEquilibrium"><a href="#TapeEquilibrium" class="headerlink" title="TapeEquilibrium"></a>TapeEquilibrium</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">Int</span>.<span class="built_in">max</span>, a2 = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;, a1 = <span class="number">0</span></span><br><span class="line">    <span class="type">A</span>[<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>].forEach &#123;</span><br><span class="line">        a1 += $<span class="number">0</span>; a2 -= $<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="built_in">abs</span>(a1 - a2)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> &gt; tmp &#123; <span class="built_in">min</span> = tmp &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a>PermMissingElem</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = (<span class="number">1</span> + <span class="type">A</span>.<span class="built_in">count</span>) * <span class="type">A</span>.<span class="built_in">count</span> / <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> real = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">count</span> - (real - sum) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MissingInteger"><a href="#MissingInteger" class="headerlink" title="MissingInteger"></a>MissingInteger</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bList:[<span class="type">Bool</span>] = <span class="type">Array</span>(repeating: <span class="literal">true</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> $<span class="number">0</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            bList[$<span class="number">0</span>] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> bList[index] == <span class="literal">false</span> &#123;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxCounters"><a href="#MaxCounters" class="headerlink" title="MaxCounters"></a>MaxCounters</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int, <span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="type">N</span>), <span class="built_in">max</span> = <span class="number">0</span>, newMax = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">let</span> v = $<span class="number">0</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v == <span class="type">N</span> &#123;</span><br><span class="line">            <span class="built_in">max</span> = newMax <span class="comment">// for O(N + M), skip: arr = Array(repeating: max, count: N)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[v] = (arr[v] &gt; <span class="built_in">max</span> ? arr[v] : <span class="built_in">max</span>) + <span class="number">1</span></span><br><span class="line">            newMax = newMax &lt; arr[v] ? arr[v] : newMax</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="built_in">map</span> &#123; $<span class="number">0</span> &lt; <span class="built_in">max</span> ? <span class="built_in">max</span> : $<span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Disqus-with-Code-style"><a href="#Disqus-with-Code-style" class="headerlink" title="Disqus with Code style"></a>Disqus with Code style</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;<span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"Swift"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BinaryGap&quot;&gt;&lt;a href=&quot;#BinaryGap&quot; class=&quot;headerlink&quot; title=&quot;BinaryGap&quot;&gt;&lt;/a&gt;BinaryGap&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="codility" scheme="http://artwalk.github.io/tags/codility/"/>
    
  </entry>
  
  <entry>
    <title>22 Generate Parentheses</title>
    <link href="http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/"/>
    <id>http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/</id>
    <published>2017-09-06T16:52:09.000Z</published>
    <updated>2017-09-07T13:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h1><p>Tips:</p><ul><li>If there is a <code>(</code> on the left, it should have a <code>)</code> somewhere on the right</li><li><strong>N</strong> will have one more <code>()</code> comparing with <strong>N-1</strong></li></ul><p>Therefore, Iterate all items in <strong>N-1</strong> array, for each Parentheses String, </p><ul><li>Left → Right, if the char is <code>(</code>, insert a <code>()</code> behind</li><li>Add <code>()</code> in the Leftmost</li></ul><p>Put these two new strings into a Set collection to eliminate redundancy.</p><a id="more"></a><p>对于 N-1 的集合里的每个 String, </p><ul><li>遍历，从左往右，碰到左括号，插入<code>()</code></li><li>最左边补 <code>()</code></li></ul><p>放到 Set 里去重</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dict: [<span class="type">Int</span>:[<span class="type">String</span>]] = [<span class="number">0</span>:[], <span class="number">1</span>:[<span class="string">"()"</span>], <span class="number">2</span>:[<span class="string">"(())"</span>, <span class="string">"()()"</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> res = dict[n] &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> setN = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">            <span class="keyword">let</span> pre = generateParenthesis(n-<span class="number">1</span>)</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;$<span class="number">0</span>.characters.<span class="built_in">count</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i)</span><br><span class="line">                    <span class="keyword">let</span> char: <span class="type">Character</span> = $<span class="number">0</span>[index]</span><br><span class="line">                    <span class="keyword">if</span> <span class="type">String</span>(char) == <span class="string">"("</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i+<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">let</span> str = $<span class="number">0</span>.substring(to: index) + <span class="string">"()"</span> + $<span class="number">0</span>.substring(from: index)</span><br><span class="line">                        setN.insert(str)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                setN.insert(<span class="string">"()"</span> + $<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> res = <span class="type">Array</span>(setN)</span><br><span class="line">            dict[n] = res</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;22-Generate-Parentheses&quot;&gt;&lt;a href=&quot;#22-Generate-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;22 Generate Parentheses&quot;&gt;&lt;/a&gt;22 Generate Parentheses&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there is a &lt;code&gt;(&lt;/code&gt; on the left, it should have a &lt;code&gt;)&lt;/code&gt; somewhere on the right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; will have one more &lt;code&gt;()&lt;/code&gt; comparing with &lt;strong&gt;N-1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, Iterate all items in &lt;strong&gt;N-1&lt;/strong&gt; array, for each Parentheses String, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left → Right, if the char is &lt;code&gt;(&lt;/code&gt;, insert a &lt;code&gt;()&lt;/code&gt; behind&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;()&lt;/code&gt; in the Leftmost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put these two new strings into a Set collection to eliminate redundancy.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>18 4Sum</title>
    <link href="http://artwalk.github.io/2017/09/04/18-4Sum/"/>
    <id>http://artwalk.github.io/2017/09/04/18-4Sum/</id>
    <published>2017-09-03T16:31:19.000Z</published>
    <updated>2017-09-03T16:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18 4Sum"></a>18 4Sum</h1><p>Tips:</p><p>Just like 3Sum, sort array first, then</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">   [-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">//  i→</span></span><br><span class="line"><span class="comment">//      j→</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//          k→      ←f</span></span><br></pre></td></tr></table></figure><p>When i, j, k, f, are iterating, the same value should be skipped for saving time.</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> sortNums = nums.sorted()</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = sortNums.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt; <span class="number">4</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> result = [[<span class="type">Int</span>]]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= <span class="built_in">count</span> - <span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> iv = sortNums[i]</span><br><span class="line">            <span class="keyword">var</span> j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= <span class="built_in">count</span> - <span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> jv = sortNums[j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> k = j + <span class="number">1</span>, f = <span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">                loopkf: <span class="keyword">while</span> k &lt; f &#123;</span><br><span class="line">                    <span class="keyword">let</span> kv = sortNums[k], fv = sortNums[f]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> sum = iv + jv + kv + fv</span><br><span class="line">                    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                        result.append([iv, jv, kv, fv])</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span> &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span>  &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> jv == sortNums[j] &amp;&amp; j &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; j += <span class="number">1</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> iv == sortNums[i] &amp;&amp; i &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line">s.fourSum([<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s.fourSum([<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">4</span>,<span class="number">0</span>,-<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>,-<span class="number">2</span>], <span class="number">7</span>)</span><br><span class="line">s.fourSum([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18-4Sum&quot;&gt;&lt;a href=&quot;#18-4Sum&quot; class=&quot;headerlink&quot; title=&quot;18 4Sum&quot;&gt;&lt;/a&gt;18 4Sum&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Just like 3Sum, sort array first, then&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   [-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  i→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      j→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//          k→      ←f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When i, j, k, f, are iterating, the same value should be skipped for saving time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>19 Remove Nth Node From End of List</title>
    <link href="http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-09-03T15:16:26.000Z</published>
    <updated>2017-09-03T15:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19 Remove Nth Node From End of List"></a>19 Remove Nth Node From End of List</h1><p>Tips:</p><p>Traverse all the Note and put their reference into a <code>[ListNode]</code> , once you can get their sequence number. </p><p>Be careful that <code>list.count == n</code> which means you have to delete the <code>head</code></p><a id="more"></a><p>Note 的值并不重要，遍历一遍的同时把他们的地址引用扔到一个数组里面，序列号就有了，删除时把上一个的 next 指针指向 next.next</p><p>另外要注意下 n 是 head 时，上一个 note 是 nil</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> list = [<span class="type">ListNode</span>]()</span><br><span class="line">        <span class="keyword">var</span> root = head</span><br><span class="line">        <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            list.append(cur!)</span><br><span class="line">            cur = cur!.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = list.<span class="built_in">count</span> - n</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            root = root?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list[i-<span class="number">1</span>].next = list[i-<span class="number">1</span>].next?.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(cur!.val)</span><br><span class="line">        cur = cur?.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = <span class="type">ListNode</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> &#123;</span><br><span class="line">    cur?.next = <span class="type">ListNode</span>(i)</span><br><span class="line">    cur = cur?.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printList(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line"><span class="keyword">let</span> s1 = s.removeNthFromEnd(head, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = s.removeNthFromEnd(s1, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;19 Remove Nth Node From End of List&quot;&gt;&lt;/a&gt;19 Remove Nth Node From End of List&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Traverse all the Note and put their reference into a &lt;code&gt;[ListNode]&lt;/code&gt; , once you can get their sequence number. &lt;/p&gt;
&lt;p&gt;Be careful that &lt;code&gt;list.count == n&lt;/code&gt; which means you have to delete the &lt;code&gt;head&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>17 Letter Combinations of a Phone Number</title>
    <link href="http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-09-03T14:03:13.000Z</published>
    <updated>2017-09-03T14:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17    Letter Combinations of a Phone Number"></a>17    Letter Combinations of a Phone Number</h1><p>Tips:</p><p>The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.</p><p>The point is using each new character in the <code>string</code> to Multiply the <code>[String]</code> which was generated in the previous step.</p><a id="more"></a><p>结果是一颗树，如果一次构建，再遍历，结构会很复杂并且占空间</p><p>本质上是用已经生成的 [String] 里的 每个元素加上 String 的每个元素</p><p>分而治之就好办了（两个函数）</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dict = [<span class="number">2</span>:<span class="string">"abc"</span>, <span class="number">3</span>:<span class="string">"def"</span>, <span class="number">4</span>:<span class="string">"ghi"</span>, <span class="number">5</span>:<span class="string">"jkl"</span>, <span class="number">6</span>:<span class="string">"mno"</span>, <span class="number">7</span>:<span class="string">"pqrs"</span>, <span class="number">8</span>:<span class="string">"tuv"</span>, <span class="number">9</span>:<span class="string">"wxyz"</span> ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sxs</span><span class="params">(s1: [String], s2: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">        s2.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> s1.isEmpty &#123;</span><br><span class="line">                res.append(<span class="string">"<span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s1.forEach &#123; s <span class="keyword">in</span></span><br><span class="line">                    res.append(<span class="string">"<span class="subst">\(s)</span><span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(<span class="number">_</span> digits: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line">        digits.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            res = sxs(s1: res, s2: dict[<span class="type">Int</span>(<span class="type">String</span>(<span class="built_in">c</span>))!]!)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17-Letter-Combinations-of-a-Phone-Number&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number&quot; class=&quot;headerlink&quot; title=&quot;17    Letter Combinations of a Phone Number&quot;&gt;&lt;/a&gt;17    Letter Combinations of a Phone Number&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.&lt;/p&gt;
&lt;p&gt;The point is using each new character in the &lt;code&gt;string&lt;/code&gt; to Multiply the &lt;code&gt;[String]&lt;/code&gt; which was generated in the previous step.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>How to trust MitM Certificate on iPhone Simulator</title>
    <link href="http://artwalk.github.io/2017/06/07/How-to-trust-MitM-Certificate-on-iPhone-Simulator/"/>
    <id>http://artwalk.github.io/2017/06/07/How-to-trust-MitM-Certificate-on-iPhone-Simulator/</id>
    <published>2017-06-07T03:25:04.000Z</published>
    <updated>2017-06-07T03:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-trust-MitM-Certificate-on-iPhone-Simulator"><a href="#How-to-trust-MitM-Certificate-on-iPhone-Simulator" class="headerlink" title="How to trust MitM Certificate on iPhone Simulator"></a>How to trust MitM Certificate on iPhone Simulator</h1><p>Open Keychain and export the MitM Root certificate as .cer ( not .p12 ), drag it to the simulator, then go to <code>Settings.General.About.CertificateTrustSettings.ENABLE FULL TRUST FOR ROOT CERTIFICATES</code>, open the <code>Switch</code> which is your MitM. </p><a id="more"></a><p>Before that, I dragged .p12, and it can trusted in <code>Settings.General.Profiles</code>, but can’t be see in <code>Settings.General.About.Certificate Trust Settings</code>.</p><p>This wasted lots of time, and I found something like: <a href="https://stackoverflow.com/questions/2219707/adding-a-self-signed-certificate-to-iphone-simulator" target="_blank" rel="noopener">Modify TrustStore.sqlite3</a></p><p>That is terrible. There it no need to say the <code>TrustStore.sqlite3</code> no longer in at that path. </p><p>After read <a href="https://developer.apple.com/library/content/qa/qa1948/_index.html" target="_blank" rel="noopener">Installing a CA’s Root Certificate on Your Test Device</a> and found nothing.</p><p>I’m glad tried .cer several days later, now I can watch all requests on specific domains by <a href="https://itunes.apple.com/us/app/surge-web-developer-tool-and-proxy-utility/id1040100637?mt=8" target="_blank" rel="noopener">Surge</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;How-to-trust-MitM-Certificate-on-iPhone-Simulator&quot;&gt;&lt;a href=&quot;#How-to-trust-MitM-Certificate-on-iPhone-Simulator&quot; class=&quot;headerlink&quot; title=&quot;How to trust MitM Certificate on iPhone Simulator&quot;&gt;&lt;/a&gt;How to trust MitM Certificate on iPhone Simulator&lt;/h1&gt;&lt;p&gt;Open Keychain and export the MitM Root certificate as .cer ( not .p12 ), drag it to the simulator, then go to &lt;code&gt;Settings.General.About.CertificateTrustSettings.ENABLE FULL TRUST FOR ROOT CERTIFICATES&lt;/code&gt;, open the &lt;code&gt;Switch&lt;/code&gt; which is your MitM. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Surge" scheme="http://artwalk.github.io/tags/Surge/"/>
    
      <category term="Simulator" scheme="http://artwalk.github.io/tags/Simulator/"/>
    
  </entry>
  
  <entry>
    <title>HOW TO MAKE WEBSITES AGE-FRIENDLY</title>
    <link href="http://artwalk.github.io/2017/05/19/HOW-TO-MAKE-WEBSITES-AGE-FRIENDLY/"/>
    <id>http://artwalk.github.io/2017/05/19/HOW-TO-MAKE-WEBSITES-AGE-FRIENDLY/</id>
    <published>2017-05-18T23:37:06.000Z</published>
    <updated>2017-05-18T23:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）"><a href="#上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）" class="headerlink" title="上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）"></a>上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）</h1><p>原文：<a href="http://whatusersdo.com/blog/make-websites-age-friendly/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="noopener">GENERATION UX – HOW TO MAKE WEBSITES AGE-FRIENDLY</a><br>翻译：<a href="http://artwalk.github.io//2017/05/11/MagicLang">MagicLang</a></p><h2 id="技术不仅仅适用于新千年的孩纸"><a href="#技术不仅仅适用于新千年的孩纸" class="headerlink" title="技术不仅仅适用于新千年的孩纸"></a>技术不仅仅适用于新千年的孩纸</h2><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-109029.jpeg" target="_blank" rel="noopener"></a></p><p>50以上的人几乎占英国人口的三分之一。他们上网, 并且仅2015年他们花了 £144.5亿。76%的老年人每周至少上网买东西一次。50以上的老年人或者说 (数码潮时代出生的人), 也是富裕的一代, 在英国拥有几乎70% 的家庭财富。</p><p><strong>进入 数码潮老人 市场并不仅仅是抛出一些看起来年轻的老年人的照片。这也代表着你的网站需要对这部分人做到用户友好 。</strong></p><a id="more"></a><p>我们随着年龄的增长而改变。有四个主要类别的变化是明显的 —— 视力, 听觉, 精细动作控制和认知能力, 他们都影响老年人如何与网站互动。但是, 您可以设计页面时对 数码潮老人 友好。在测试合作伙伴, 我们有超过100检查用来评估一个网页。下面的概述可以让你在正确的方向上思考。</p><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><p>视力峰值约30岁。40岁以后, 许多人的视力明显恶化。老花眼—通常被称为与年龄相关的远视—只是影响 数码潮老人 的问题之一。不太出名的是, 衰老也会降低颜色知觉和颜色敏感性。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-219000.jpeg" target="_blank" rel="noopener"></a></p><p>如果您想确保 数码潮老人 在您的网站上有良好的体验, 请确保文本大小至少为 12pt, 并确保文本和背景的颜色对比度也很好。</p><h3 id="听觉"><a href="#听觉" class="headerlink" title="听觉"></a>听觉</h3><p>在听力方面, <em>有关听力损失的行动</em> (正式名称：英国皇家聋人协会 RNID) 说, 听力损失在50岁左右开始急剧增加, 人过60，55% 以上会耳聋或听力困难。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/night-television-tv-theme-machines.jpg" target="_blank" rel="noopener"></a></p><p>如果您的网站上有音频或视频内容, 请确保没有太多的背景噪音, 它们有准确的字幕（或隐藏字幕），或提供抄本。</p><h3 id="精细动作控制"><a href="#精细动作控制" class="headerlink" title="精细动作控制"></a>精细动作控制</h3><p>精细动作控制和手眼协调也随着时间的推移而减少。各种疾病, 如关节炎, 会影响精细动作控制, 可能在 40 岁后出现。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-270700.jpeg" target="_blank" rel="noopener"></a></p><p>您确保的事情包括可点击的链接和按钮有一个体面的可点击区域, 并可以使用键盘导航。没有太多的功能需要稳定的手, 比如悬停在元素上以显示帮助弹出窗口, 这都将会有帮助。</p><h3 id="认知能力"><a href="#认知能力" class="headerlink" title="认知能力"></a>认知能力</h3><p>随着年龄的增长, 我们在网站上变得更加保守—一项研究表明, 45% 的接受访谈的老年人不愿尝试新事物或浏览网站。互动往往是缓慢和有条不紊的。老年人比30岁以下的人更有可能放弃一项任务。</p><p>确保您的网站理解和使用尽可能简单。使用简单的英语, 并保持缩写和行话的最低限度。尽量不要有太多的组件分心, 如自动改变旋转。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-399161.jpeg" target="_blank" rel="noopener"></a></p><p>不用说, 数码潮老人 没有受到这些体贴因素的照顾。在这个人口统计中, 有很多人没有出现任何问题。但通过确保你的网站是年龄友好的, 你会给自己一个更大的机会, 进入这个市场。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot;&gt;&lt;a href=&quot;#上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot; class=&quot;headerlink&quot; title=&quot;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot;&gt;&lt;/a&gt;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;http://whatusersdo.com/blog/make-websites-age-friendly/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GENERATION UX – HOW TO MAKE WEBSITES AGE-FRIENDLY&lt;/a&gt;&lt;br&gt;翻译：&lt;a href=&quot;http://artwalk.github.io//2017/05/11/MagicLang&quot;&gt;MagicLang&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术不仅仅适用于新千年的孩纸&quot;&gt;&lt;a href=&quot;#技术不仅仅适用于新千年的孩纸&quot; class=&quot;headerlink&quot; title=&quot;技术不仅仅适用于新千年的孩纸&quot;&gt;&lt;/a&gt;技术不仅仅适用于新千年的孩纸&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-109029.jpeg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;50以上的人几乎占英国人口的三分之一。他们上网, 并且仅2015年他们花了 £144.5亿。76%的老年人每周至少上网买东西一次。50以上的老年人或者说 (数码潮时代出生的人), 也是富裕的一代, 在英国拥有几乎70% 的家庭财富。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进入 数码潮老人 市场并不仅仅是抛出一些看起来年轻的老年人的照片。这也代表着你的网站需要对这部分人做到用户友好 。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
  <entry>
    <title>Lessons in Navigating Large Companies</title>
    <link href="http://artwalk.github.io/2017/05/18/Lessons-in-Navigating-Large-Companies/"/>
    <id>http://artwalk.github.io/2017/05/18/Lessons-in-Navigating-Large-Companies/</id>
    <published>2017-05-18T09:19:05.000Z</published>
    <updated>2017-05-18T23:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卓越企业家-如何呆在大型公司养老"><a href="#卓越企业家-如何呆在大型公司养老" class="headerlink" title="卓越企业家-如何呆在大型公司养老"></a>卓越企业家-如何呆在大型公司养老</h1><p>原文：<a href="https://www.linkedin.com/pulse/entrepreneur-heart-lessons-navigating-large-companies-nazila-alasti?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="noopener">Entrepreneur at Heart - Lessons in Navigating Large Companies</a><br>翻译：<a href="http://artwalk.github.io//2017/05/11/MagicLang">MagicLang</a></p><p>反应是一致的。 什么？你你你 真的打算加入一个大公司吗？在我的朋友和同事中, 我被称为创业者。 我已经花了一半以上时间在的创业中, 过去6年是 Jooners 创始人兼首席执行官。早在2014成功的卖掉公司后, 我加入了 ebay。<br><a id="more"></a></p><p>通常, 人们都是从大公司跳槽到小公司。</p><p>我正在做相反的事情。</p><p>为啥呢?</p><p>因为… 像我这样的建设者和企业家喜欢 ebay，我是好奇在管理规模上。</p><p>这一切都自有道理。</p><p>创业人士, 具有高风险承受力。我们在处理不可预知性方面受过培训, 并能在不完全信息的情况下做出快速决策。大公司在新市场或新产品中的努力, 需要这种敏捷性。因此, 一个大型公司的新生项目配备了足智多谋的创业员工, 使其具有完善的战略意义。</p><p>然而, 这两个世界是截然不同的, 在其中一个有效的可能不适用于另一个。</p><p>这里是我的观察, 我从创业公司的 15 人到 ebay 的 12600 人。</p><ol><li><strong>向历史学习</strong>。花6月 (喘口气) 来了解公司在你到达之前是如何到达这里的。公司越大越老, 情况越复杂。 与老前辈建立非正式的关系, 了解情况。不像初创公司, 这里有历史, 并很重要。</li><li><strong>检查你的步调</strong>。 在创业公司的你不自觉的想要快。时间是你的敌人。在大公司, 急着完成项目, 过河拆桥, 将击沉你。不要把持久的成绩与清空清单混为一谈。 发掘在这个新的地方完成事情的正确步伐。</li><li><strong>把你的观点当作问题来表述</strong>。 许多你 “想出” 的点子, 可能已经被考虑过了。 明白为什么他们没有扎根。如果它真是一个新的想法或意见, 保持好奇和谦逊将赢得你的盟友, 并增加你的成功机会。</li><li><strong>小心 干活 vs. 管理</strong>。 在初创企业中, 项目工作与管理项目之间的界线往往模糊不清。这与大公司的不同, 在那里规模庞大的 “干活”, 需要资源和预算。这些资源需要管理。否则, 事情将无法完成。那么你的工作究竟是什么？你是在管理还是在干活？</li><li><strong>寻找 看起来相似的</strong>。 有没有人曾经走过你的道路？ 最近是否有收购和企业家进入公司？ 找到他们并向他们学习。 请他们把你指向那些对他们有用的人或过程。</li><li><strong>目标: 直接通信的代理</strong>。非正式的关系和对小公司高管的访问确保了您的项目与公司目标之间的一定程度的协调。 在大公司里, 并非所有的工作都是显而易见的。在接受工作分配之前, 请将目标与公司目标一致, 并把它们映射到更大的目的。 你有视线吗？ 你能解释一下这项工作是如何帮助公司的主要目标吗？如果没有, 请三思而后行。</li><li><strong>不需要英雄</strong>! 在创业的初创企业中, 预算是令人钦佩的。在大公司里, 没那么多。请参阅 #4。</li><li><strong>风控</strong>。 考虑在扩大对项目的支持方面花费25-30% 的时间。如果只有一个大佬在支持, 那么你需要 B 计划, 以防大佬跑了或者他们对项目没激情了。</li><li><strong>向上的指挥链</strong>… 你领导的领导知道你的项目吗？支持项目吗？如果不, 为什么不支持？能见度 2 或 3 级以上的指挥链信号都和项目息息相关。缺乏能见度是可以接受的, 但不要停留在阴影太长。</li><li><strong>最后</strong>…成为一个大组织的自我激励的创业雇佣是令人振奋的。 要有耐心。 要谦虚。从容不迫，校准影响期望值。记住, 时间可以是你的朋友。 祝你有个愉快的过渡。</li></ol><p>感谢 ebay 这个 非凡及罕见 的终身机会!</p><p>你有经历过从一个小公司到一个更大的企业吗？ 你学到了什么？可以在下面👇留言</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;卓越企业家-如何呆在大型公司养老&quot;&gt;&lt;a href=&quot;#卓越企业家-如何呆在大型公司养老&quot; class=&quot;headerlink&quot; title=&quot;卓越企业家-如何呆在大型公司养老&quot;&gt;&lt;/a&gt;卓越企业家-如何呆在大型公司养老&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;https://www.linkedin.com/pulse/entrepreneur-heart-lessons-navigating-large-companies-nazila-alasti?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entrepreneur at Heart - Lessons in Navigating Large Companies&lt;/a&gt;&lt;br&gt;翻译：&lt;a href=&quot;http://artwalk.github.io//2017/05/11/MagicLang&quot;&gt;MagicLang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;反应是一致的。 什么？你你你 真的打算加入一个大公司吗？在我的朋友和同事中, 我被称为创业者。 我已经花了一半以上时间在的创业中, 过去6年是 Jooners 创始人兼首席执行官。早在2014成功的卖掉公司后, 我加入了 ebay。&lt;br&gt;
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
  <entry>
    <title>Softwares speed up your learning</title>
    <link href="http://artwalk.github.io/2017/05/18/Softwares-speed-up-your-learning/"/>
    <id>http://artwalk.github.io/2017/05/18/Softwares-speed-up-your-learning/</id>
    <published>2017-05-17T22:23:19.000Z</published>
    <updated>2017-05-17T23:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Podcasts and videos are a typical way to study online, but they are numberless and as the collect is in human’s nature, how to increase this speed become more essential.</p><p>Typically, people can deal with native languages at a high speed.<br>As for me, 2x is comfortable, 3x is acceptable, 4x is fine with subtitle.</p><h2 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h2><p>A few years ago, I used to use Windows when I was still a university student, KMPlayer was the best in all type of video players, because other players may got distorted sound while changing. Later, the author left the company and rewrote a new one with <code>C++</code> and renamed it to <a href="https://potplayer.daum.net/" target="_blank" rel="noopener">PotPlayer</a>.</p><p>As on macOS, Movist is my first choice, which is also come from Korea. needless to say its brilliance and simplicity, it provide 4x without too much losses in audio track.<br>Other players like <a href="https://mpv.io/" target="_blank" rel="noopener">MPV</a>, although it provide no rate limit( yes, you can speed up to whatever you like) and open sourced, but you have to modify <code>~/.config/mpv/mpv.conf</code> each time if you want to change the default settings.</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><p>The good news is Podcasts on iPhone already have 2x (the odd thing is iTunes Podcasts don’t), and many study type apps also have this useful feature.</p><p>But I haven’t found any app provide more than 2x.</p><p>According to <a href="https://developer.apple.com/reference/avfoundation/avplayer#//apple_ref/occ/instp/AVPlayer/rate" target="_blank" rel="noopener"></a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="type">AVAudioPlayer</span>()</span><br><span class="line">player.prepareToPlay()</span><br><span class="line">player.enableRate = <span class="literal">true</span></span><br><span class="line">player.rate = <span class="number">2.0</span></span><br><span class="line">player.play()</span><br></pre></td></tr></table></figure><p>It seems merely change the <code>player.rate = 3.0</code> can do it if the audio is a file-based media. Dose this would cause distortion?</p><p>I’ll try it if I spare time one day.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Podcasts and videos are a typical way to study online, but they are numberless and as the collect is in human’s nature, how to increase t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MagicLang</title>
    <link href="http://artwalk.github.io/2017/05/11/MagicLang/"/>
    <id>http://artwalk.github.io/2017/05/11/MagicLang/</id>
    <published>2017-05-11T04:36:10.000Z</published>
    <updated>2017-05-18T23:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MagicLang"><a href="#MagicLang" class="headerlink" title="MagicLang"></a><a href="https://github.com/Artwalk/MagicLang" target="_blank" rel="noopener">MagicLang</a></h1><h2 id="Magicka-The-Other-Side-of-the-Language"><a href="#Magicka-The-Other-Side-of-the-Language" class="headerlink" title="Magicka: The Other Side of the Language"></a><a href="https://github.com/Artwalk/MagicLang" target="_blank" rel="noopener">Magicka: The Other Side of the Language</a></h2><p>魔能：语言的另一面</p><p>这里的 Language 不仅仅是编程语言，也泛指自然语言哈~</p><p>自从考试连续五次战五渣后 T\^T，最近打算认认真真的恶补英语<br>平时看到不错的 Blog 有时间就顺手转换下 (￣▽￣)~*</p><p>鉴于 1/3 的脚已跨入棺材⚰，先用养老镇楼好了~</p><hr><ol><li><a href="Contents/001.md">卓越企业家-如何呆在大型公司养老</a></li><li><a href="Contents/002.md">上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MagicLang&quot;&gt;&lt;a href=&quot;#MagicLang&quot; class=&quot;headerlink&quot; title=&quot;MagicLang&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Artwalk/MagicLang&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
  <entry>
    <title>Developer Differences: Makers vs Menders</title>
    <link href="http://artwalk.github.io/2016/12/27/Developer-Differences-Makers-vs-Menders/"/>
    <id>http://artwalk.github.io/2016/12/27/Developer-Differences-Makers-vs-Menders/</id>
    <published>2016-12-27T10:13:53.000Z</published>
    <updated>2016-12-27T10:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发者的区别︰-制造者-vs-修理工"><a href="#开发者的区别︰-制造者-vs-修理工" class="headerlink" title="开发者的区别︰ 制造者 vs 修理工"></a>开发者的区别︰ 制造者 vs 修理工</h1><p><a href="https://dev.to/corgibytes/developer-differences-makers-vs-menders?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="noopener">Developer Differences: Makers vs Menders</a></p><p>当你想到一个开发者会想到什么？生活在旧金山在下一个 Facebook 一天工作 23 小时的 基情程序员？如果是，你并不孤单。像许多行业一样，软件开发是充斥着刻板印象。特别普遍的一个想法是，所有的开发者，如果有机会，会选择完全重写应用程序。</p><a id="more"></a><p>确实有很多软件开发人员喜欢从一个干净的石板入手，但也一群程序员喜欢使现有的应用程序更好。而不是从零开始构建 80%解决方案，这些开发人员非常适合接手一个稳定项目，并长时间维护它。没有那种更好。在软件世界中两者都被需要。你只需要了解何时使用哪个。</p><h2 id="制造者享受初始开发与-MPVs"><a href="#制造者享受初始开发与-MPVs" class="headerlink" title="制造者享受初始开发与 MPVs"></a>制造者享受初始开发与 MPVs</h2><p>为了演示这些开发人员有什么不同，让我们看看典型的产品生命周期。当一个项目开始时，必须有一个起飞式的爆炸开发。对于开发人员来说，标识为”制造者”适合这种状态。他们爱一个空白的画布。正因如此，这些类型的项目，往往称为新建项目。为开发人员享受测试想法的可行性，在这些项目上的工作就像一小片天堂。一切皆有可能。天空是蓝色的，点缀着白云，在他们心目中的草丛，总是更绿。</p><p>一旦项目具有所需的功能集，是将它推向市场的时候了。这经常是通过作为最小可行产品 (MVP)。该应用程序很小，心智模型通常不太复杂。在这一点上，市场将决定下一步会发生什么。该应用程序将获得牵引，并扩大其用户群，或者它会消褪隐遁。</p><h2 id="修理工喜欢致力于应用程序的稳定和成长"><a href="#修理工喜欢致力于应用程序的稳定和成长" class="headerlink" title="修理工喜欢致力于应用程序的稳定和成长"></a>修理工喜欢致力于应用程序的稳定和成长</h2><p>在这个阶段，开发人员任务转变。他们将需要把重点放在诸如安全、 可扩展性、 性能、 bug 修复和增强功能而不是大思想和执行架构。会比在项目开始时遇到更多的细节，会挫折到产品所有者，开发者的兴趣开始减弱。在这一阶段精致的细节和工艺要求对制造者来说并不快乐。</p><p>但还有一组开发人员的天赋和兴趣非常适合这些类型的任务。到目前为止，他们还没有名称，但我们可称之为”修理工”。修理工爱重构，或编辑代码，使其更加清晰。Bug 修复真正能激发他们的兴趣，他们对测试有点头晕。这些在一个项目开始时，都是没用的素质，但随着你应用程序的成长，变得更加复杂，这些肯定都是你希望你团队拥有的特点。</p><h2 id="制造者︰-新建︰-修理工︰-重塑"><a href="#制造者︰-新建︰-修理工︰-重塑" class="headerlink" title="制造者︰ 新建︰ 修理工︰ 重塑"></a>制造者︰ 新建︰ 修理工︰ 重塑</h2><p>另一种分别制造者、修理工的方式是 新建和重塑的区别。新建时，你常常是从一块清除过的土地开始，类似于制造者很喜欢那空白文本编辑器。修补，更像”老房子”。往往有很好的理由应该保留现有结构，但是更新它需要挖，推倒墙壁，有时处理你发现的意想不到的事情。</p><h2 id="制造者和修理工的动机策略"><a href="#制造者和修理工的动机策略" class="headerlink" title="制造者和修理工的动机策略"></a>制造者和修理工的动机策略</h2><p>像任何组合的个性，多样性通常是一件好事。最有可能，你会想要你的团队有制造者和修理工的混合。关键知道如何激励他们，以会获得最佳的性能。制造者们像兔子一样 — — 他们在短时间内爆发速度。修理工像龟。在他们的世界，缓慢而稳定的改善会赢得比赛。</p><h2 id="让制造者尝试，并给他们一个最后期限"><a href="#让制造者尝试，并给他们一个最后期限" class="headerlink" title="让制造者尝试，并给他们一个最后期限"></a>让制造者尝试，并给他们一个最后期限</h2><p>没有什么是重复更烦恼制造者的了。所以用实验任务驱动你的制造者们。允许他们自由，展望未来，采用设计思维。需要用原型来验证概念？呼叫制造者吧。他们会享受快速造出来东西。制造者也有可能在短暂的高能时间的黑客马拉松茁壮成长。如果你在危机中和截止日期将至，制造者将站出来直面挑战，就像他们常常被时间压力驱动。跨越死线给他们一种成就感，敏捷开发是这些人良好的项目管理工具。只是不要指望他们待在原地上太长时间的一个项目。制造者喜欢探索新的想法，如果他们的项目太枯燥会很容易感到无聊。</p><h2 id="让修理工有一系列小小的胜利贯穿全天"><a href="#让修理工有一系列小小的胜利贯穿全天" class="headerlink" title="让修理工有一系列小小的胜利贯穿全天"></a>让修理工有一系列小小的胜利贯穿全天</h2><p>蓝天思考和截止日期驱动激励制造者的项目管理方法，经常包括了修理工。他们可能缺乏兴奋，他们弥补了一致性。修理工是解决技术债务、 修复 bug、 细调功能，创建样式指南，和监视支持票的理想人选。不像他们的制造者朋友，修理工最好的工作是稳定和相对可预测的。有尚未有人解决的问题吗？与修理工分享它。他们会喜欢挖很深并找出为什么。只是要小心不要事无巨细的管理你的修理工，这样会极度的惹恼他们。相反，发现长久积压的任务，并给你的修理工自主权，获取做什么以及何时。如果有优先级或截止日期，提前沟通，允许未知情况浮出水面。</p><p>因此，你呢？你是制造者还是修理工？介于两者之间？是什么促使你开发最好的软件？</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发者的区别︰-制造者-vs-修理工&quot;&gt;&lt;a href=&quot;#开发者的区别︰-制造者-vs-修理工&quot; class=&quot;headerlink&quot; title=&quot;开发者的区别︰ 制造者 vs 修理工&quot;&gt;&lt;/a&gt;开发者的区别︰ 制造者 vs 修理工&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://dev.to/corgibytes/developer-differences-makers-vs-menders?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Developer Differences: Makers vs Menders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你想到一个开发者会想到什么？生活在旧金山在下一个 Facebook 一天工作 23 小时的 基情程序员？如果是，你并不孤单。像许多行业一样，软件开发是充斥着刻板印象。特别普遍的一个想法是，所有的开发者，如果有机会，会选择完全重写应用程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Developer" scheme="http://artwalk.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>Swift Generics in protocol and enum</title>
    <link href="http://artwalk.github.io/2016/12/27/Swift-Generics-in-protocol-and-enum/"/>
    <id>http://artwalk.github.io/2016/12/27/Swift-Generics-in-protocol-and-enum/</id>
    <published>2016-12-26T16:40:15.000Z</published>
    <updated>2016-12-26T16:40:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift-Generics-in-protocol-and-enum"><a href="#Swift-Generics-in-protocol-and-enum" class="headerlink" title="Swift Generics in protocol and enum"></a>Swift Generics in protocol and enum</h1><ul><li>protocol can only be used as a generic constraint because it has Self or associated type requirements</li><li>Protocols do not allow generic parameters; use associated types instead</li><li>cannot specialize non-generic type</li></ul><a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Generic Type T in protocol</span></span><br><span class="line">    associatedtype <span class="type">T</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s:String)</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">launch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"network return string"</span></span><br><span class="line">        obj(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AReq</span>: <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="comment">// declare the Type of T</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">AObj</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">T</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BReq</span>: <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">BObj</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s:String)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">T</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AObj</span>: <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">"a"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> s: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"a"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BObj</span>: <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">"b"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> s: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"b"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Launch</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static func launch(req: BaseReq) -&gt; BaseReq &#123;</span></span><br><span class="line">    <span class="comment">// if you wrote like above, you will get:</span></span><br><span class="line">    <span class="comment">// error: protocol 'BaseReq' can only be used as a generic constraint because it has Self or associated type requirements</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">launch</span>&lt;U: BaseReq&gt;<span class="params">(req: U)</span></span> -&gt; <span class="type">U</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"network return string"</span></span><br><span class="line">        <span class="built_in">print</span>(req)</span><br><span class="line">        </span><br><span class="line">        req.obj(s)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> req</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cannot specialize non-generic type</span></span><br><span class="line"><span class="comment">// enum Result &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> suc(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> err(<span class="type">Error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> areq = <span class="type">AReq</span> &#123; (r) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> r &#123;</span><br><span class="line">    <span class="keyword">case</span> .suc(<span class="keyword">let</span> s):</span><br><span class="line">        <span class="comment">//S is AObj,  we can s.a</span></span><br><span class="line">        s.a</span><br><span class="line">    <span class="keyword">case</span> .err(<span class="keyword">let</span> r):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">areq.launch()</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="type">Launch</span>.launch(req: areq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> breq = <span class="type">BReq</span> &#123; (r) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> r &#123;</span><br><span class="line">    <span class="keyword">case</span> .suc(<span class="keyword">let</span> s):</span><br><span class="line">        <span class="comment">//S is BObj,  we can s.b</span></span><br><span class="line">        s.b</span><br><span class="line">    <span class="keyword">case</span> .err(<span class="keyword">let</span> r):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">breq.launch()</span><br><span class="line"><span class="type">Launch</span>.launch(req: breq)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift-Generics-in-protocol-and-enum&quot;&gt;&lt;a href=&quot;#Swift-Generics-in-protocol-and-enum&quot; class=&quot;headerlink&quot; title=&quot;Swift Generics in protocol and enum&quot;&gt;&lt;/a&gt;Swift Generics in protocol and enum&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;protocol can only be used as a generic constraint because it has Self or associated type requirements&lt;/li&gt;
&lt;li&gt;Protocols do not allow generic parameters; use associated types instead&lt;/li&gt;
&lt;li&gt;cannot specialize non-generic type&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://artwalk.github.io/tags/Swift/"/>
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>A primer on Artificial Intelligence</title>
    <link href="http://artwalk.github.io/2016/12/24/A-primer-on-Artificial-Intelligence/"/>
    <id>http://artwalk.github.io/2016/12/24/A-primer-on-Artificial-Intelligence/</id>
    <published>2016-12-24T06:07:32.000Z</published>
    <updated>2016-12-26T16:24:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四次工业革命︰-人工智能入门-AI"><a href="#第四次工业革命︰-人工智能入门-AI" class="headerlink" title="第四次工业革命︰ 人工智能入门 (AI)"></a>第四次工业革命︰ 人工智能入门 (AI)</h1><p>原文：<a href="https://medium.com/mmc-writes/the-fourth-industrial-revolution-a-primer-on-artificial-intelligence-ai-ff5e7fffcae1#.xou8lwimu" target="_blank" rel="noopener">The fourth industrial revolution: a primer on Artificial Intelligence (AI)</a></p><blockquote><p>“过去的10年是移动端的10年。未来10年是 AI 的10年”（Sundar Pichai, CEO of Google, 2016-10）</p></blockquote><p>TL; DR</p><a id="more"></a><p>从亚马逊 谷歌 微软 脸书，世界上最具影响力的技术公司领导人凸显了他们的热情为人工智能 (AI)。但什么是 AI？为什么很重要？并且为什么是现在？随着 AI 越来越引起人们的兴趣，这个领域主要还是只有专家理解。我们原始目标是为了使这一重要领域可以让更广泛的受众了解。</p><p>我们将首先解释 ‘AI’ 和关键术语包括机器学习的含义。我们还将说明 深度学习—AI 最有成效的领域之一是如何工作。我们会探讨 AI 解决了什么问题及为什么他们重要。我们到头条新闻背后看为什么上世纪 50 年代就发明了的 AI，如今已到来。</p><p>作为风险资本家，我们寻找将为消费者和企业创造价值的新趋势。我们相信 AI 是比转移到移动或云计算更重要的演化。”很难说 AI 对社会的未来 20 年多大的冲击” 亚马逊 CEO 杰夫 · 贝佐斯写道。我们希望本指南穿过的炒作，并解释为什么 —无论你是顾客，行政，企业家或投资者 — 这种新兴趋势对我们所有人都重要。</p><p>对更多的风险投资见解有兴趣吗？登录我们的博客。<br>一张地图包括在英国的 226 AI 初创企业，探讨这篇文章。你是 AI 企业家吗？这儿联系。</p><h2 id="1-什么是-AI？"><a href="#1-什么是-AI？" class="headerlink" title="1. 什么是 AI？"></a>1. 什么是 AI？</h2><h3 id="人工智能︰-智能程序的科学"><a href="#人工智能︰-智能程序的科学" class="headerlink" title="人工智能︰ 智能程序的科学"></a>人工智能︰ 智能程序的科学</h3><p>铸造于 1956 年由达特茅斯大学助理教授约翰 · 麦卡锡，’ 人工智能 (AI) 是一个一般术语，指的是硬件或软件，展示智能的行为。用教授麦卡锡的话说，是”科学和工程的智能机，特别是智能计算机程序”。<br>基础的 ‘AI’ 已经存在了几十年，在特定环境中，通过提供基本的基于规则的程序显示 ‘智慧’ 。确实取得了进展，但是，受到限制 — — 因为通过人们手写算法来解决许多实际问题都过于复杂。</p><p>复杂的事务，包括医疗诊断，预测时机器会失败，或衡量市场价值的某些资产，涉及到成千上万的数据集和变量之间的非线性关系。在这些情况下，很难使用的数据，我们有最好的效果 — — 以优化我们的预测。在其他情况下，包括识别图像中的对象和翻译语言，我们甚至不能制定规则来描述我们寻找的特征。我们如何能写一套规则，可以在所有情况下，描述一只狗的外观？</p><p><em>我们是否能把 复杂预测的难度 — — 数据优化和功能规范 — — 即，从程序员转移到程序吗？这是现代人工智能技术所承诺的。</em></p><h3 id="机器学习︰-减负功能优化"><a href="#机器学习︰-减负功能优化" class="headerlink" title="机器学习︰ 减负功能优化"></a>机器学习︰ 减负功能优化</h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*ubsoUx6Hw9cKCCL-D4NjXA.png" alt=""></p><p><strong>机器学习 （ML）</strong> 是 AI 的一个子集。所有的机器学习都是人工智能，但并不是所有 AI 都是机器学习 （图 1）。如今对 ‘AI’ 的兴趣反映为 机器学习的快速和显著的进步。</p><p>机器学习可以让我们解决问题，通过将对人类而言过于复杂的一些负担转移到算法上。正如 AI 先锋阿瑟 · 塞缪尔写于 1959 年，机器学习是 ‘研究 赋予计算机在隐式编程条件下 学习的能力(field of study that gives computers the ability to learn without being explicitly programmed.)’。</p><p>大多数机器学习的目标是开发一个预测引擎的特定用例。算法将接收有关域 （比如，一个人已经看过的电影） 的信息，并权衡，然后预测 （这人将来喜欢别的电影的概率）。通过给 ‘ 计算机学习能力 ‘ 的算法，即经过优化的任务 — — 衡器变量中可用的数据，作出对未来的准确预测。有时我们可以更进一步，根据首要任务的特定功能，给程序减负。</p><p>机器学习算法通过训练学习。一种算法最初接收其产出已知的例子，注意其预测和正确的输出之间的区别，调整输入，以提高其预测的准确性，直到它们的权重被优化好。因此，机器学习算法的定义特征是<strong>通过经验所提高的预测质量</strong>。我们提供 （通常提升一个点） 越多的数据，便可越好地创建预测引擎 （图 2 和 3。注意所需的数据集的大小是高度依赖于上下文 — — 当然，我们不能用这个例子一概而论。)</p><p><img src="https://cdn-images-1.medium.com/max/1200/1*iRvZ4oDFBdJM7fE0Vi-F-g.png" alt=""><br><img src="https://cdn-images-1.medium.com/max/1200/1*39NQr3cn6iyVimk_nEvpZg.png" alt=""></p><p>有超过 15 机器的学习，每个使用不同的算法结构优化基于收到的数据的预测方法。一种方法 — — 深度学习 — — 在新的领域提供突破性的成果，我们在下面探讨。但还有很多其他的没得到足够的重视，他们由于其适用性广泛的使用情况也是很有价值的。除去深度学习之外最有效的机器学习算法包括︰</p><ul><li><strong>随机森林</strong>，创造了许许多多的决策树优化预测;</li><li><strong>贝叶斯网络</strong> 使用概率的方法来分析变量和它们之间的关系</li><li><strong>支持向量机</strong> 输入分类示例，创建模型来分配新投入的一个类别</li></ul><p>每种方法各有其优点和缺点，组合起来可能更常用（合奏）。选定要解决特定问题的算法将取决因素包括可用的数据集的性质。在实践中，开发人员倾向于实验来看看那个更好。</p><p>机器学习的用例需要根据我们的需要和想象。有了正确的数据，我们可以生成数不尽的算法︰ 基于人们已经购买来推荐产品; 预测汽车装配生产线上的机器人何时失败; 预测一封电子邮件是否寄错了; 估算信用卡是被盗用的概率; 等等。</p><h3 id="深度学习︰-卸载功能规范"><a href="#深度学习︰-卸载功能规范" class="headerlink" title="深度学习︰ 卸载功能规范"></a>深度学习︰ 卸载功能规范</h3><p>甚至是一般的机器学习理论 — — 随机森林，贝叶斯网络，支持向量机和更多 — — 很难编写执行某些任务，从理解讲话，认识到图象中的目标对象的程序。为什么呢？因为我们没法找到一个实用、 可靠的方式去优化功能。如果我们想要写一个标识的汽车图片的计算机程序，例如，我们不能指定一辆车的算法的特点来处理所有情况下都能正确识别。汽车的形状、 尺寸和颜色种类繁多。他们的位置、 方向和姿势又不一样。背景、 照明和无数其他因素影响对象的外观。有太多的变化，没法编写一套规则集合。即使我们可以，如果不是一个可扩展的解决方案。我们需要为每个想鉴别的类型对象写一套程序。</p><p>进入<strong>深度学习 (DL)</strong>，彻底改变了的人工智能世界。深度学习是机器学习的一个子集 — — 超过 15 的办法之一。所有深度学习是机器学习，但并不是所有的机器学习是深度学习 （图 4，所示）。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*k5HI9WRsCuQss9QNDq0kBA.png" alt=""></p><p>深度学习很有用，因为它避免了程序员承担<strong>特征值</strong> （定义特征可从数据分析获得） 或优化 （如何权衡要提供准确的预测的数据） 的任务 — — 算法全搞定了。</p><p>这怎么做到的？在深入学习上的突破是<strong>脑模型，而非世界模型</strong>。我们自己的大脑学会做困难的事情 — — 包括理解语言和认识物体 — — 不是由处理详尽的规则，而是通过练习和反馈。作为一个孩子我们体验世界 （我们观察，例如，一辆汽车的图片），做出预测 （’ 车 ！’） 并接收反馈 （对了 ！）。我们是通过训练学习，并非详尽的规则。</p><p>深度学习使用相同的方法。人工的、基于软件的计算器，近似的大脑中的神经元功能连接在一起。他们形成<strong>神经网络</strong>，接收输入信号 （继续我们的示例中，一辆汽车的图片）;分析它; 预测，被告知预测是否正确。如果输出是错的， 神经元之间的连接被算法调整，将改变未来的预测。最初的网络会有错了很多次。但作为我们喂了数以百万计的例子，神经元之间的连接将进行调整，所以神经网络可以在几乎所有场合作出正确决定。熟（几乎）能生巧。</p><p>使用此过程中，提高效率，我们现在可以︰</p><ul><li>鉴别图片中的元素;</li><li>实时翻译;</li><li>语音控制设备 （通过苹果 Siri，谷歌 Now;亚马逊 Alexa 和微软 小娜）;</li><li>预测遗传变异如何影响 DNA 转录;</li><li>分析客户评论中的情绪</li><li>检测医学图像中的肿瘤；等。</li></ul><p>深度学习并不适合所有问题。它通常需要大型数据集进行训练。它需要大量运算能力和一个神经网络。它有一个“可解释性”问题 — — 很难知道神经网络是如何发展其预测的。但通过把程序员从复杂的特征值中解放出来，深度学习已成功为一系列的重要问题交付了预测引擎。因此，它已经是 AI 开发者 的一个牛逼的工具包。</p><h2 id="2-深度学习如何工作呢？"><a href="#2-深度学习如何工作呢？" class="headerlink" title="2.深度学习如何工作呢？"></a>2.深度学习如何工作呢？</h2><p>鉴于其重要性，它是有必要了解的如何深入学习的基础知识。深度学习涉及到使用人工的神经网络 — — 集合神经元 （基于软件的计算器） 连接在一起。</p><p>人工神经元有一个或多个输入。它执行数学计算基于这些提供的产出。输出将取决于每个输入的<strong>‘权重’</strong>和 ‘输入输出函数’ 在神经元中的配置 （图 5，所示）。输入输出函数可以发生变化。神经元可能是︰</p><ul><li>线性单元 （输出是成正比的总加权的输入;</li><li>阈值单位（输出设置为两个级别中的一个，具体取决于是否总投入是上面指定的值） </li><li>S形单元 （输出不断变化，但作为输入的变化不是线性增长）</li></ul><p>神经网络被创建当神经元连接到另一个;一个神经元的输出成为另一个的输入 （图 6，所示）。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*thwVgNJ2jfg2xjDyhAQC1g.png" alt=""></p><p>神经网络被组织成多层的神经元 （所以叫 ‘深度’ 学习）。’输入的层’ 接收信息，神经网络将处理 — — 例如，一组图片。’输出层’ 提供结果。输入和输出之间层是大多数活动发生的’隐藏的层’。通常情况下，每个神经元上一个级别的神经网络的输出作为下一层神经元的输入 （图 7，所示）。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*I-_yVADdhxhcnBLebmTxRQ.png" alt=""></p><p>让我们考虑一种图像识别算法的例子 — — 识别人类面孔的图片。当数据被送入神经网络时，第一层识别局部对比度模式 — — 低水平的功能，例如边缘。作为图像遍历网络，逐步提取 ‘高层次’ 特征 — — 从边缘到鼻子，从鼻子到脸 (图 8，下面)</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*-N5_FtLQFRCcpN2ykq0idQ.png" alt=""></p><p>在其输出层，基于它的训练神经网络将提供的图片是指定类型的概率 (人脸︰ 97%; 气球 2%; 叶 1%)。</p><p>通常情况下，通过显露的大量贴有标签的例子训练神经网络。检测到错误的神经元之间的连接权值调整的算法，以改进结果。广泛地重复这一优化过程，系统部署后，用没标示的图像进行评估。</p><p>以上就是一个简单的神经网络，但其结构可以改变和大多更复杂。变化包括于同一层上; 神经元之间的连接不同数目的神经元每层; 神经元连接到之前的网络输出层 （’递归’ 神经网络） 。</p><p>设计和改进神经网络需要相当的技巧。步骤包括构建网络中的一个特定的应用程序提供一个合适的训练数据集、 调整按进度，网络的结构、 结合多种方法。</p><h2 id="3-为什么-AI-重要？"><a href="#3-为什么-AI-重要？" class="headerlink" title="3.为什么 AI 重要？"></a>3.为什么 AI 重要？</h2><p>AI 重要是因为它处理非常非常困难的问题，解决这些问题的办法可以应用到人类其他领域分支 — — 从健康、 教育和商务到交通、 公用设施和娱乐。自 20 世纪 50 年代，AI 研究集中在五个领域︰</p><ol><li>推理︰ 解决问题，通过逻辑演绎的能力</li><li>知识︰ 关于世界的知识表示能力 (理解世界上确定的实体、 事件和情况; 这些元素具有属性; 这些元素可被分门别类)</li><li>规划︰ 能够设定和实现目标 （未来具体的状态，是可描述的，一系列的操作可影响到它的进展）</li><li>通讯︰ 理解书面语和口语的能力。</li><li>感知︰ 能够从视觉图像、 声音和其他传感器输入推断这个世界的事情。</li></ol><p>AI 是宝贵的因为在许多情况下，这些功能的进展提供了革命，而不是渐进的功能。示例的 AI 应用包括以下;还有更多。</p><ol><li>推理︰ 法律评估;金融资产管理;金融应用程序处理;游戏;自主武器系统。</li><li>知识︰ 医疗诊断;药物的创作;媒体建议;采购预测;金融市场交易;预防欺诈。</li><li>规划︰ 物流;调度;导航;物理和数字网络优化;预防性维护;需求预测;库存管理。</li><li>通讯︰ 语音控制;智能助理、 助理和客户支持;实时翻译书面语和口语语言;实时的转录。</li><li>感知︰ 自动驾驶汽车;医疗诊断;监视。</li></ol><p>在未来的几年中，机器学习能力将参与几乎所有部门的各种过程。考虑一个企业日常 — — 例如，在公司内的人力资源 (HR)  — — 描述了机器学习可以应用的范围︰</p><ul><li>招聘 增强靶向、 智能就业选配和部分自动的评估;</li><li>劳动力管理 预测规划的人员的要求和可能缺勤;</li><li>劳动力学习 更有效，更适合于员工的建议内容</li><li>预测有价值的员工离开的风险，可以减少员工流失。</li></ul><p>随着时间的推移，我们期望机器学习成为<strong>正常现象</strong>。机器学习将成为开发人员的标准工具包，最初会改善现有流程，然后重塑他们。</p><p>机器学习的<strong>二阶后果</strong>将超过其直接的影响。深度学习已经提高了计算机视觉，例如，自主汽车 （轿车和卡车） 是可行的突破点。但它们的影响将是什么？今天，90%的人和 80%的货运运输通过在英国的道路。自主车辆仅会影响︰</p><ul><li>安全 （90%的事故由司机注意力不集中引起的）</li><li>就业 （220 万人在英国运输和物流行业工作，每年工资越 57B 英镑）</li><li>保险 （自主研究预计英国汽车保险费随着时间的推移下降了 63%）</li><li>部门经济学 （消费者很可能会使用对运输的需求服务到位汽车所有权）;</li><li>车辆的吞吐量;城市规划;监管，等等。</li></ul><h2 id="4-为什么是-AI-今天时代来临？"><a href="#4-为什么是-AI-今天时代来临？" class="headerlink" title="4.为什么是 AI 今天时代来临？"></a>4.为什么是 AI 今天时代来临？</h2><p>人工智能的研究始于 20 世纪 50 年代;经过多次虚假的黎明，为什么是现在的转折点？由于近年来发明的新算法，更多的数据，更好的硬件，以及 云服务加速了开发者的安装，这些让 AI 更有效。</p><h3 id="1-改进算法"><a href="#1-改进算法" class="headerlink" title="1.改进算法"></a>1.改进算法</h3><p>深的学习并不是新东西 — — 1965 年发表第一个有效的、 多层神经网络的规范 — — 在过去十年期演化过程中，深度学习算法已经改变了结果。</p><p>我们已能够开始通过卷积神经网络 (CNN) 的开发，识别图像中的物体 （图 9，下）。从动物视觉皮层得到设计灵感，在神经网络中的每一层作为筛选器的一个特定的模式存在。到 2015 年，微软的基于 CNN 的计算机视觉系统比人类 （94.9%精度）更有效地识别图片中的对象 （95.1%精度）。”对我们的知识而言，”他们写道，”我们的结果是得到了第一个超越人类级别的性能。” CNN 有广泛的应用，包括视频和语音识别。</p><p>同时，语音和手写识别的进展也随着递归神经网络 (RNNs)迅速改善 (图 10) 。RNNs 有使数据循环的反馈连接，与传统的神经网络只能’前馈’不同。强大的新型 RNN 是 ‘长短期记忆’ (LSTM) 模型。增加连接和记忆细胞，RNNs ‘记住’ 他们看见数千步骤前的数据，并以此来告知他们之后的解释 — — 下一词的释义将通过它之前的文字的语音识别衡量。从 2012 年起谷歌 LSTMs 用于增强安卓系统的语音识别。就在六个星期前，微软工程师报道他们的系统达到的 5.9%的误码字率 — — 历史上第一次大致等于人的能力。</p><p><img src="https://cdn-images-1.medium.com/max/1200/1*2tTNfCBXOmYnU4ZOmGa8gA.png" alt=""><br><img src="https://cdn-images-1.medium.com/max/1200/1*8ZtNi8ho6sFXSryJZatnyg.png" alt=""></p><h3 id="2-专门的硬件"><a href="#2-专门的硬件" class="headerlink" title="2.专门的硬件"></a>2.专门的硬件</h3><p><strong>图形处理器 (GPUs)</strong> 是专业的电子线路，正在削减来训练神经网络用于深度学习所需的时间。</p><p>最初 GPUs 在 1990 年代后期诞生，以加速 3D 游戏和 3D 开发应用程序。平移或缩放操作摄像机在 3D 环境中的重复利用称为矩阵计算的数学过程。微处理器与串行架构，包括今天的计算机的 CPUs 都不适合这项任务。 大规模并行架构的 GPUs（Nvidia M40 有 3,072 内核）可以有效进行矩阵计算。</p><p>训练的神经网络广泛利用矩阵计算。这太明显了，因此，用于 3D 游戏的 GPUs 也适合用来加速深度学习。他们的性能相当客观;简单的 GPU 可以提高神经网络 5 倍时间，10 倍或更多在更难的问题。当结合合适的泛型深入学习框架的软件开发工具包，可以更好的提高训练速度 （图 11，所示）。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bMnbjzzYvyUIoeItFhwszw.png" alt=""></p><h3 id="3-广泛的数据"><a href="#3-广泛的数据" class="headerlink" title="3.广泛的数据"></a>3.广泛的数据</h3><p>神经网络用于深度学习通常需要海量数据训练 — — 从几个几千例子到数以百万计。幸运的是，创建和数据可用性已经急剧增长。今天，当我们进入 ‘第三次数据浪潮，<strong>人类每天产生 2.2 艾字节 （23 亿千兆字节） 的数据</strong>;世界上 90% 的数据产生在过去的 24 个月。</p><p>‘第一波数据浪潮’，在上世纪 80 年代开始，涉及创建文档和事务性数据，是由互联网连接的桌面 PC 催生的。紧接着’第二波数据浪潮’ — — 爆炸的非结构化的媒体 （电子邮件、 照片、 音乐和视频）、 web 数据和元数据造成了无处不在并连接的智能手机。今天我们正在进入 ‘第三代’数据，其中机传感器部署在行业和家庭中，产生额外的 监测、分析、元、数据。</p><p>既然今天生产的很多数据通过互联网传送使用，膨胀互联网流量作为人类的数据生产的巨大升幅的代理。虽然作为一个物种，我们在 1992 年每日传输 100 GB 的数据，到 2020 年我们将 每秒传输 61,000 GB  (如下图 12，— — 请注意对数刻度)。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*AUylp0jdTTmJ6PWxWEnkIw.png" alt=""></p><p>超出一般数据的可用性的增加，专家数据资源促进了机器学习的进展。例如 ImageNet，是超过 1000 万的手贴上标签图像自由可用数据库。它的存在一直支持对象分类深度学习算法的快速发展。</p><h3 id="4-云服务"><a href="#4-云服务" class="headerlink" title="4.云服务"></a>4.云服务</h3><p>开发者使用机器学习是由基于云计算的机器学习基础设施和行业领先的云提供商催化的。</p><p>谷歌、 亚马逊、 微软和 IBM 提供<strong>基于云计算基础设施</strong> （环境模型构建和迭代、 可伸缩 ‘GPUs 作为一项服务’ 和相关托管的服务） 来减少成本和难度的发展机器学习能力。</p><p>此外，他们提供新兴的<strong>基于云计算的机器学习服务</strong>（从图像识别语言翻译），开发人员可以在自己的应用程序中直接使用。谷歌机器学习提供方便服务︰ 视觉 （对象识别、 显式内容检测、 人脸检测和图像情感分析）;语音 （语音识别和语音文本）;文本分析 （实体识别、 情感分析、 语言检测和翻译）;和员工职位搜索 （机会浮现和资质匹配）。微软认知服务超过 21 项，包含领域有： 视觉、 语音、 语言、 知识和搜索。</p><h3 id="5-利益和企业家精神"><a href="#5-利益和企业家精神" class="headerlink" title="5.利益和企业家精神"></a>5.利益和企业家精神</h3><p>在过去<strong>五年中，公众对 AI 的兴趣增加六倍</strong>，（图 13），与 AI 公司的风险投资公司投资的数目增加了更多 （图 14）。我们已经进入一个良性的循环，机器学习的进展吸引了投资、 创业精神和意识。然后，反过来，促进进一步的进展。</p><p><img src="https://cdn-images-1.medium.com/max/1200/1*Xc3sRn7c3sovbRURo_8HFA.png" alt=""><br><img src="https://cdn-images-1.medium.com/max/1200/1*guXXm4xdQpjmAFyOoXWLag.png" alt=""></p><h2 id="5-接下来怎样？"><a href="#5-接下来怎样？" class="headerlink" title="5.接下来怎样？"></a>5.接下来怎样？</h2><p>机器学习的好处将是众多和显著。很多即将到来，从自主车辆到人机交互的新方法。有些将会不那么明显，但使日常业务流程和消费者服务更有效率。</p><p>任何范式转变，有时过高的期望将超过短期的潜力。我们期望将来在关于 AI一些方面幻灭，应遵守其长期并持久的价值，就像机器学习曾经提高了，然后重新构建了现有系统。</p><p>历史上，工业革命改变了生产和通信通过新的动力及传动来源。在 1780 年代第一次工业革命蒸汽动力用于机械化生产。在 1870 年代第二个使用电力驱动大批量生产。从 20 世纪 70 年代第三个用电子和软件来自动化生产和通信。今天，随着软件蚕食世界，我们的价值创造的主要来源是信息的处理。机器学习使我们做这些更加智能，产生效益即谦卑又具历史性。</p><p>…</p><p>我们会发布更多 AI 和风险资本的见解。为了避免遗漏，报名参加我们的博客文章。</p><p>一张地图的 226 AI 初创公司在英国和塑造着市场的主要趋势，探索这篇文章。如果你是一个 AI 企业家，取得联系。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第四次工业革命︰-人工智能入门-AI&quot;&gt;&lt;a href=&quot;#第四次工业革命︰-人工智能入门-AI&quot; class=&quot;headerlink&quot; title=&quot;第四次工业革命︰ 人工智能入门 (AI)&quot;&gt;&lt;/a&gt;第四次工业革命︰ 人工智能入门 (AI)&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;https://medium.com/mmc-writes/the-fourth-industrial-revolution-a-primer-on-artificial-intelligence-ai-ff5e7fffcae1#.xou8lwimu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The fourth industrial revolution: a primer on Artificial Intelligence (AI)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“过去的10年是移动端的10年。未来10年是 AI 的10年”（Sundar Pichai, CEO of Google, 2016-10）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TL; DR&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="http://artwalk.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Server side Swift</title>
    <link href="http://artwalk.github.io/2016/12/23/Server-side-Swift/"/>
    <id>http://artwalk.github.io/2016/12/23/Server-side-Swift/</id>
    <published>2016-12-23T12:36:00.000Z</published>
    <updated>2016-12-23T12:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器端-Swift︰-经验教训"><a href="#服务器端-Swift︰-经验教训" class="headerlink" title="服务器端 Swift︰ 经验教训"></a>服务器端 Swift︰ 经验教训</h1><p>原文链接：<a href="https://realm.io/news/slug-jeff-bergier-building-production-server-swift-app/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website" target="_blank" rel="noopener">Building a Production Server Swift App: Lessons Learned</a></p><p>当你用 Swift 在 Xcode 上开发时，你有想过可以在 Linux，Web，甚至 微软 Exchange 服务器上用 Swift 吗？😱 也许没想过。</p><p>在 Jeff Bergier 工作中，他运行的一个应用程序需要使用所有的这些。并且，全部是 Swift ！当从安全的 Darwin 和 Foundation 转移到野蛮的 Linux 时，你可能会碰到不少减速带。在Swift用户组的这次演讲中，Jeff 分享了这些，以便你进入这个令人兴奋的新路时会容易点 ！</p><a id="more"></a><h2 id="介绍-0-36"><a href="#介绍-0-36" class="headerlink" title="介绍 (0:36)"></a>介绍 (0:36)</h2><p>我是用户体验设计师在 Riverbed 工作。我们是做企业的，与手机、iOS 或苹果无关的网络硬件。我在Swift之前学过Objective-C，自学了 iOS 差不多三年。</p><h2 id="应用程序和它怎么开始的-1-20"><a href="#应用程序和它怎么开始的-1-20" class="headerlink" title="应用程序和它怎么开始的 (1:20)"></a>应用程序和它怎么开始的 (1:20)</h2><p>我生产服务器 Swift 应用程序是工作会议房间调度。它开始作为一个纯Storyboard原型。Storyboard是一种伟大的原型工具 — — 你可以扔在一起的所有table views，单击通过他们，无需任何代码，别人也很容易知道你在做什么。</p><p>Storyboard 变成 Swift playground，因为在工作的每个人都希望它能够与 Outlook 进行交互。使用 Outlook，您需要使用Exchange API，这是 xml 格式的。在工作编程马拉松中，我用 Python 的 CherryPy 框架 开发了真正的版本。</p><p>因为我不喜欢 Python，因为我想学 sever端的 Swift，我在业余时间重写了它。有几个 服务器端的 Swift 框架，特别是由 IBM 开发的那个。</p><p>我并没用 IBM 框架，尽管他们有很棒 GUI 工具以转到 Linux 服务器。我  Perfect，因为它似乎最容易启动和运行。</p><h2 id="为啥用-Server端-Swift？-7-01"><a href="#为啥用-Server端-Swift？-7-01" class="headerlink" title="为啥用 Server端 Swift？(7:01)"></a>为啥用 Server端 Swift？(7:01)</h2><p>我想学 JavaScript 和Server端的 Swift。Python 用来工作很好，但我认为 Xcode 超棒，因为自动完成和语法检查。在Server端 Swift，你不需要interface builder，因此，Xcode 几乎不崩溃。</p><p>类型安全也超棒。它能控制意外参数进入 func。另外，Safari 的调试工具类似于 Xcode 的。</p><h2 id="如何构建-7-01"><a href="#如何构建-7-01" class="headerlink" title="如何构建 (7:01)"></a>如何构建 (7:01)</h2><p>这是一个现代的 web 应用程序， 用 javascript 加载 HTML。JavaScript 将 post 请求发送到服务器。然后服务器发送回一个 JSON 字符串，然后 JavaScript 将 JSON 字符串转换成 HTML 元素，并显示它们。我用 Bootstrap 和 JavaScript，然后有用一些 cookie 存储会话信息。我也在 cookie 中存储一些 AES 证书，以便我可以在用户回访时解密他们的密码。</p><p>就像 CherryPy 后端，像大多数 web 框架工作方式类似，在那里你有一个路由器的概念。我在 <code>/</code> 侦听所有或 POST 请求，然后它进入我的 Swift 代码。Perfect 没有会话管理器，所以我得到我自己设置 cookie 并根据请求将其还原。每个有 JSON payload 的请求，Swift 会解包，决定他们在哪个过程中，哪些数据与 exchange 服务器通信，然后返回新的 JSON 字符串。</p><h2 id="忘了-XcodeProj-11-02"><a href="#忘了-XcodeProj-11-02" class="headerlink" title="忘了 .XcodeProj (11:02)"></a>忘了 .XcodeProj (11:02)</h2><p>框架不是 Xcode 项目，但可以刚刚好用 Xcode 编辑代码。我甚至没把它放到 repo 里，因为它是一次性的。我们改用 Swift 包管理器代替。</p><p>出于某种原因，它将系统设置为 10.10，如果您使用任何更新的代码，你得告诉它要做 10.12。此外，因为您的 web 框架要需要跟它的静态文件，您必须添加一个复制文件阶段，否则 web 服务器找不到他们。</p><h2 id="Foundation-几乎是现在的-17-13"><a href="#Foundation-几乎是现在的-17-13" class="headerlink" title="Foundation 几乎是现在的 (17:13)"></a>Foundation 几乎是现在的 (17:13)</h2><p>我会仍然默认情况下使用的基础类型，即使这样，Xcode 也没法告诉你它能否运行在 Linux 上。 我刚用时，Perfect 没有像 NSURLSession 这样的大类，但现在他们有了。</p><p>这代码是我用来 舍入日期的; 你可以选择到就近的 15 分钟。它看起来像标准 iOS Foundation 代码。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">roundedTimeInterval</span><span class="params">(from date: Date)</span></span> -&gt; <span class="type">TimeInterval</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> dc = <span class="type">Calendar</span>.current.dateComponents([.minute, .second], from: date)</span><br><span class="line">   <span class="keyword">let</span> originalMinute = <span class="type">Double</span>(dc.minute ?? <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">let</span> originalSeconds = <span class="type">Double</span>(dc.second ?? <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">let</span> roundTo = <span class="number">15.0</span></span><br><span class="line">   <span class="keyword">let</span> roundedMinute = round(originalMinute / roundTo) * roundTo</span><br><span class="line">   <span class="keyword">let</span> interval = ((roundedMinute - originalMinute) * <span class="number">60</span>) - originalSeconds</span><br><span class="line">   <span class="keyword">return</span> interval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">roundMinutes</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">let</span> timeInterval = type(of: <span class="keyword">self</span>).roundedTimeInterval(from: <span class="keyword">self</span>)</span><br><span class="line"> <span class="keyword">self</span> += timeInterval</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你如何知道一个基础类型可以在 Linux 通过？你可以去苹果的 GitHub 上查一下。如果你找到类似的你见过的，这意味着它可能通过。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">DateComponents</span> : <span class="title">ReferenceConvertible</span>, <span class="title">Hashable</span>, <span class="title">Equatable</span>, <span class="title">_MutableBoxing</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ReferenceType</span> = <span class="type">NSDateComponents</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _handle: _MutableHandle&lt;<span class="type">NSDateComponents</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//// Initialize a 'DateComponents', optionally specifying values for its fields.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(calendar: <span class="type">Calendar</span>? = <span class="literal">nil</span>,</span><br><span class="line">              timeZone: <span class="type">TimeZone</span>? = <span class="literal">nil</span>,</span><br><span class="line">              era: <span class="type">Int</span>? = <span class="literal">nil</span>,</span><br><span class="line">              ...</span><br><span class="line">              )</span><br><span class="line">    _handle = <span class="type">MutableHandle</span>(adoptingReference: <span class="type">NSDateComponents</span>())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> _calendar = calendar &#123; <span class="keyword">self</span>.calendar = _calendar &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> _timezone = timeZone &#123; <span class="keyword">self</span>.timeZone = _timeZone &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> _era = era &#123; <span class="keyword">self</span>.era = era &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看到这个，这是一个 NSURLAuthenticationChallenge 对象，但它没被实现。这是一个坏的迹象。这会在运行时崩溃。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">URLAuthenticationChallenge</span>: <span class="title">NSObject</span>, <span class="title">NSSecureCoding</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">var</span> supportsSecureCoding: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder:<span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="type">NSUnimplemented</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</span><br><span class="line">    <span class="type">NSUnimplented</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是我第一次尝试相同的算法，这样写似乎更正常 （我想要范围在 15 分钟之内）。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// get date and components</span></span><br><span class="line"><span class="keyword">var</span> dc = <span class="type">Calendar</span>.current.dateComponents(</span><br><span class="line"> [.year, .month, .day, .hour, .minute, .second, .calendar, .timeZone],</span><br><span class="line"> from: <span class="type">Date</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// get originals and do rounding</span></span><br><span class="line"><span class="keyword">let</span> originalMinute = <span class="type">Double</span>(dc.minute ?? <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> roundTo = <span class="number">15.0</span></span><br><span class="line"><span class="keyword">let</span> roundedMinute = <span class="type">Int</span>(round(originalMinute / roundTo) * roundTo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// modify components</span></span><br><span class="line">dc.minute = roundedMinute</span><br><span class="line">dc.second = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate new date</span></span><br><span class="line"><span class="keyword">let</span> roundedDate = dc.date! <span class="comment">// crashes on linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fatal error: copy(with:) is not yet implemented: file Foundation/NSCalendar.swift, line 1434</span></span><br></pre></td></tr></table></figure><p>我设置 分 为 roundedMinute , 秒 为 0，然后我问他们要新的日期，而不是以前那个我得到的时间间隔，然后添加和减去原来的。这部分在 Linux 上崩溃，因为 copyWithZone 没在 NSDate 上实现。你可能会感到有点意外。</p><h2 id="经常在-Linux-上试验-20-05"><a href="#经常在-Linux-上试验-20-05" class="headerlink" title="经常在 Linux 上试验  (20:05)"></a>经常在 Linux 上试验  (20:05)</h2><p>你永远不知道什么时候 NSUnimplemented 或 copyWithZone 不执行。如果你是真的很关系，我会建议为每次提交设个 CI。我一直在使用一款叫做 Veertu;它在  app store 被沙盒化，免费，它在 headlist 模式中运行虚拟机。</p><p>你不需要看到 Linux 的可怕 UI。它自动下载 Linux 并为您安装。</p><h2 id="JSON-容易得多-21-21"><a href="#JSON-容易得多-21-21" class="headerlink" title="JSON 容易得多 (21:21)"></a>JSON 容易得多 (21:21)</h2><p>你已经知道如何处理 NSJSONSerialization。它仍然返回 data.jsonEncodedString，给你大多数的集合可以调用。然后每个字符串和其他一些事情有相反，所以你可以把任何字符串转换成对象，只要它是真实的 JSON。如果你想要处理，确实有些是在 try 抛出。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PerfectLib</span><br><span class="line"><span class="keyword">let</span> data: [<span class="type">String</span> : <span class="type">Any</span>] = [</span><br><span class="line"> <span class="string">"date"</span> : <span class="string">"2016-01-01T12-12-00"</span>,</span><br><span class="line"> <span class="string">"name"</span> : <span class="string">"Billy"</span>,</span><br><span class="line"> <span class="string">"age"</span> : <span class="number">22</span>,</span><br><span class="line"> <span class="string">"emails"</span> : [</span><br><span class="line"> <span class="string">"something@something.com"</span>,</span><br><span class="line"> <span class="string">"somethingelse@something.com"</span></span><br><span class="line"> ]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> json = <span class="keyword">try</span> data.jsonEncodedString()</span><br></pre></td></tr></table></figure><h2 id="随机很难-21-58"><a href="#随机很难-21-58" class="headerlink" title="随机很难 (21:58)"></a>随机很难 (21:58)</h2><p>Linux 没 arc4random_uniform()，但我看到有些可以安装。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(<span class="type">Linux</span>)</span><br><span class="line"><span class="keyword">import</span> Glibc</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="keyword">import</span> Darwin</span><br><span class="line">#endif</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> ... <span class="number">5</span> &#123;</span><br><span class="line"> #<span class="keyword">if</span> os(<span class="type">Linux</span>)</span><br><span class="line"> <span class="keyword">let</span> randomNumber = random()</span><br><span class="line"> #<span class="keyword">else</span></span><br><span class="line"> <span class="keyword">let</span> randomNumber = <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>.<span class="built_in">max</span>))</span><br><span class="line"> #endif</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"Round <span class="subst">\(i)</span>: <span class="subst">\(randomNumber)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种循环生成五个随机数并将它们打印。如果它是在 Linux 上，它使用 Glibc 的 random() 函数。此随机数生成器是完全无用的。</p><p>最简单的方法，我发现做随机数字已开放，对 devrandom 的访问和读取字节关闭它。它适用于 Mac 和 Linux，所以你不必单独做 arc4random。也有几个库比如 Turnstile 和 Crypto。</p><h2 id="避免-if-os-Linux-24-25"><a href="#避免-if-os-Linux-24-25" class="headerlink" title="避免 #if os(Linux) (24:25)"></a>避免 #if os(Linux) (24:25)</h2><p>当你这样做时，你就失去 Xcode 的所有帮助。它不能做语法检查，它不能做的最基本的东西，和它绝对不能告诉是否它将工作。基本上，该代码在那块之间并不存在。我会建议避免它，另找一个解决方案，在这两个平台上运行。</p><p>另一件事是，如果有时 Linux 的 Foundation 让你失望，你可以选择任何框架的新的 Foundation。Perfect 需要做的事情有很多，它是非常模块化。</p><h2 id="线程-（26-13）"><a href="#线程-（26-13）" class="headerlink" title="线程 （26:13）"></a>线程 （26:13）</h2><p>线程不工作。你可以设置你的计时器，并手动发动，它将运行一次然后永远不会再次触发。我认为这是Perfect不得不做的; 他们有他们自己 runloop，与对 NSTimer 预期的不一样。</p><p>Prefect 有自己的线程框架，和你可以自己创建线程。如果他们是串行或并行，你可以 dispatch。</p><h2 id="不要强行解包-28-31"><a href="#不要强行解包-28-31" class="headerlink" title="不要强行解包 (28: 31)"></a>不要强行解包 (28: 31)</h2><p>不要强行解包。当你强打开某人的 iOS 应用程序上的东西，它会为了用户在设备上的崩溃。当你强迫打开服务器上的东西，它对每个人都崩溃。</p><p>Q&amp;A （31：24）</p><p>问︰ 当你调用 URLs 时，有什么其他限制？</p><p>杰夫︰ 我喜欢写我的代码是清洁，速度较慢，且易于读取通过生成更多的对象，而不是再有他们在身边的方式。我不知道性能有多好，而且它还没有测试在荷载作用下。一般情况下，一些 Perfect 组员 做各种 Swift 网络框架和传统的 web 框架之间的性能比较, Swift 的似乎做得不错。但老实说没有测试它的性能。</p><p>问︰ 未来的三到五年内，你对服务器端 Swift有什么看法？</p><p>杰夫︰ 我认为现在是太早了。我认为至少要一年创业公司-Y 才有可能用它，大公司要多年以后了。</p><p>问︰ 用 Swift 代替 Python 做了什么权衡？</p><p>杰夫︰ 我发现 Xcode 的自动补全和其他的东西帮助巨大。我发现 类型检查 帮助很大。我们在 Python 中写的方式并不是真正的面向对象，仅仅因为每个人都认为它是那样。Python 对 JSON 类型数据结构处理的更好。</p><hr><p>PS：这么折腾，用 Go 不好吗 😂😂😂</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务器端-Swift︰-经验教训&quot;&gt;&lt;a href=&quot;#服务器端-Swift︰-经验教训&quot; class=&quot;headerlink&quot; title=&quot;服务器端 Swift︰ 经验教训&quot;&gt;&lt;/a&gt;服务器端 Swift︰ 经验教训&lt;/h1&gt;&lt;p&gt;原文链接：&lt;a href=&quot;https://realm.io/news/slug-jeff-bergier-building-production-server-swift-app/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building a Production Server Swift App: Lessons Learned&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你用 Swift 在 Xcode 上开发时，你有想过可以在 Linux，Web，甚至 微软 Exchange 服务器上用 Swift 吗？😱 也许没想过。&lt;/p&gt;
&lt;p&gt;在 Jeff Bergier 工作中，他运行的一个应用程序需要使用所有的这些。并且，全部是 Swift ！当从安全的 Darwin 和 Foundation 转移到野蛮的 Linux 时，你可能会碰到不少减速带。在Swift用户组的这次演讲中，Jeff 分享了这些，以便你进入这个令人兴奋的新路时会容易点 ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://artwalk.github.io/tags/Swift/"/>
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
