<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Artwalk&#39;s Blog</title>
  
  <subtitle>游走的艺术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://artwalk.github.io/"/>
  <updated>2018-01-16T04:27:12.906Z</updated>
  <id>http://artwalk.github.io/</id>
  
  <author>
    <name>Artwalk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Advice for Applying Machine Learning</title>
    <link href="http://artwalk.github.io/2018/01/16/Advice-for-Applying-Machine-Learning/"/>
    <id>http://artwalk.github.io/2018/01/16/Advice-for-Applying-Machine-Learning/</id>
    <published>2018-01-16T04:04:50.000Z</published>
    <updated>2018-01-16T04:27:12.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-Regularized-linear-regression-cost-function"><a href="#1-2-Regularized-linear-regression-cost-function" class="headerlink" title="1.2 Regularized linear regression cost function"></a>1.2 Regularized linear regression cost function</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{2m}\left ( \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ) + \dfrac{\lambda }{2m}\left ( \sum_{j=1}^{n} \theta _{j}^{2} \right )</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = <span class="number">1</span>/(<span class="number">2</span>*m)*sum( (X*theta - y).^<span class="number">2</span> ) + lambda/(<span class="number">2</span>*m)*sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="1-3-Regularized-linear-regression-gradient"><a href="#1-3-Regularized-linear-regression-gradient" class="headerlink" title="1.3 Regularized linear regression gradient"></a>1.3 Regularized linear regression gradient</h2><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta_{0} } = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}; j=0</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta_{j} } = \left (  \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}\right ) + \dfrac{\lambda }{m}\theta _{j} ; j\geqslant 1</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = theta; r(<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">grad = <span class="number">1</span>/m*(X'*(X*theta-y)) + lambda/m*r;</span><br></pre></td></tr></table></figure><h2 id="2-1-Learning-curves"><a href="#2-1-Learning-curves" class="headerlink" title="2.1 Learning curves"></a>2.1 Learning curves</h2><script type="math/tex; mode=display">J_{train}(\theta ) = \dfrac{1}{2m}\left [ \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    xi = X(<span class="number">1</span>:<span class="built_in">i</span>,:); yi = y(<span class="number">1</span>:<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(xi, yi, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(xi, yi, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-Polynomial-regression"><a href="#3-Polynomial-regression" class="headerlink" title="3 Polynomial regression"></a>3 Polynomial regression</h2><script type="math/tex; mode=display">h_{\theta }(x) = \theta _{0} + \theta _{1}*(waterLevel) + \theta _{2}*(waterLevel)^{2} + ... + \theta _{p}*(waterLevel)^{p}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_poly = X.^[<span class="number">1</span>:<span class="number">1</span>:p];</span><br></pre></td></tr></table></figure><h2 id="3-3-Selecting-λ-using-a-cross-validation-set"><a href="#3-3-Selecting-λ-using-a-cross-validation-set" class="headerlink" title="3.3 Selecting λ using a cross validation set"></a>3.3 Selecting λ using a cross validation set</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(lambda_vec)</span><br><span class="line">    lambda = lambda_vec(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(X, y, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(X, y, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.imgur.com/yyXPMcV.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-2-Regularized-linear-regression-cost-function&quot;&gt;&lt;a href=&quot;#1-2-Regularized-linear-regression-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.2 Regularized linear regression cost function&quot;&gt;&lt;/a&gt;1.2 Regularized linear regression cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{2m}\left ( \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ) + \dfrac{\lambda }{2m}\left ( \sum_{j=1}^{n} \theta _{j}^{2} \right )&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*m)*sum( (X*theta - y).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ) + lambda/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*m)*sum(theta(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-3-Regularized-linear-regression-gradient&quot;&gt;&lt;a href=&quot;#1-3-Regularized-linear-regression-gradient&quot; class=&quot;headerlink&quot; title=&quot;1.3 Regularized linear regression gradient&quot;&gt;&lt;/a&gt;1.3 Regularized linear regression gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta_{0} } = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}; j=0&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta_{j} } = \left (  \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )x_{j}^{(i)}\right ) + \dfrac{\lambda }{m}\theta _{j} ; j\geqslant 1&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = theta; r(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m*(X&#39;*(X*theta-y)) + lambda/m*r;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-1-Learning-curves&quot;&gt;&lt;a href=&quot;#2-1-Learning-curves&quot; class=&quot;headerlink&quot; title=&quot;2.1 Learning curves&quot;&gt;&lt;/a&gt;2.1 Learning curves&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J_{train}(\theta ) = \dfrac{1}{2m}\left [ \sum_{i=1}^{m}(h_{\theta }(x^{(i)}) - y^{(i)}  )^2 \right ]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xi = X(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:); yi = y(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theta = trainLinearReg(xi, yi, lambda);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_train(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(xi, yi, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_val(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(Xval, yval, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-Polynomial-regression&quot;&gt;&lt;a href=&quot;#3-Polynomial-regression&quot; class=&quot;headerlink&quot; title=&quot;3 Polynomial regression&quot;&gt;&lt;/a&gt;3 Polynomial regression&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_{\theta }(x) = \theta _{0} + \theta _{1}*(waterLevel) + \theta _{2}*(waterLevel)^{2} + ... + \theta _{p}*(waterLevel)^{p}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_poly = X.^[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:p];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-3-Selecting-λ-using-a-cross-validation-set&quot;&gt;&lt;a href=&quot;#3-3-Selecting-λ-using-a-cross-validation-set&quot; class=&quot;headerlink&quot; title=&quot;3.3 Selecting λ using a cross validation set&quot;&gt;&lt;/a&gt;3.3 Selecting λ using a cross validation set&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;(lambda_vec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lambda = lambda_vec(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theta = trainLinearReg(X, y, lambda);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_train(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(X, y, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_val(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = linearRegCostFunction(Xval, yval, theta, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Neural Networks: Learning</title>
    <link href="http://artwalk.github.io/2018/01/11/Neural-Networks-Learning/"/>
    <id>http://artwalk.github.io/2018/01/11/Neural-Networks-Learning/</id>
    <published>2018-01-11T03:27:14.000Z</published>
    <updated>2018-01-11T04:17:04.848Z</updated>
    
    <content type="html"><![CDATA[<p>First, I have to say, it’s the hardest exercise I have ever made when I began this course.</p><h2 id="1-3-Feedforward-and-cost-function"><a href="#1-3-Feedforward-and-cost-function" class="headerlink" title="1.3 Feedforward and cost function"></a>1.3 Feedforward and cost function</h2><script type="math/tex; mode=display">J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a1 = [ones(m, <span class="number">1</span>), X];</span><br><span class="line">z2 = a1*Theta1';</span><br><span class="line">a2 = [ones(m, <span class="number">1</span>), sigmoid(z2)];</span><br><span class="line">z3 = a2*Theta2';</span><br><span class="line">a3 = sigmoid(z3);</span><br><span class="line"></span><br><span class="line">I = <span class="built_in">eye</span>(num_labels);</span><br><span class="line">Y = I(y, :);</span><br><span class="line"></span><br><span class="line">J = sum(sum((-Y.*<span class="built_in">log</span>(a3) - (<span class="number">1</span>-Y).*<span class="built_in">log</span>(<span class="number">1</span>-a3) ) / m));</span><br></pre></td></tr></table></figure><p>For now, I still confused about <code>I(y, :)</code>, how can it makes y(5000:1) to Y(5000:10) with the match index in each row?</p><h2 id="1-4-Regularized-cost-function"><a href="#1-4-Regularized-cost-function" class="headerlink" title="1.4 Regularized cost function"></a>1.4 Regularized cost function</h2><script type="math/tex; mode=display">J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]+\dfrac{\lambda }{2m}[\sum_{j=1}^{25}\sum_{k=1}^{400}(\Theta _{j,k}^{(1)})^{2} + \sum_{j=1}^{10}\sum_{k=1}^{25}(\Theta _{j,k}^{(2)})^{2}]</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = lambda/<span class="number">2</span>/m * (sum(sum(Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)) + sum(sum(Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)));</span><br><span class="line">J = J + r;</span><br></pre></td></tr></table></figure><h2 id="2-1-Sigmoid-gradient"><a href="#2-1-Sigmoid-gradient" class="headerlink" title="2.1 Sigmoid gradient"></a>2.1 Sigmoid gradient</h2><script type="math/tex; mode=display">g'(z)=\dfrac{d}{dz}g(z)=g(z)(1-g(z))</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = sigmoid(z).*(<span class="number">1</span>-sigmoid(z));</span><br></pre></td></tr></table></figure><h2 id="2-3-Backpropagation"><a href="#2-3-Backpropagation" class="headerlink" title="2.3 Backpropagation"></a>2.3 Backpropagation</h2><script type="math/tex; mode=display">\delta _{k}^{(3)} = (a_{k}^{(3)} - y_{k})</script><script type="math/tex; mode=display">\delta ^{2} = (\Theta ^{(2)})^T\delta ^{(3)}.*g'(z^{(2)})</script><script type="math/tex; mode=display">\Delta ^{(l)} = \Delta ^{(l)} + \delta ^{(l+1)}(a^{(l)})^T</script><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">d3 = a3-Y;</span><br><span class="line">d2 = d3*Theta2.*[ones(m, <span class="number">1</span>), sigmoidGradient(z2)];</span><br><span class="line"></span><br><span class="line">D1 = d2(:,<span class="number">2</span>:<span class="keyword">end</span>)'*a1;</span><br><span class="line">D2 = d3'*a2;</span><br><span class="line"></span><br><span class="line">Theta1_grad = Theta1_grad + D1/m;</span><br><span class="line">Theta2_grad = Theta2_grad + D2/m;</span><br></pre></td></tr></table></figure><h2 id="2-5-Regularized-Neural-Networks"><a href="#2-5-Regularized-Neural-Networks" class="headerlink" title="2.5 Regularized Neural Networks"></a>2.5 Regularized Neural Networks</h2><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} \quad for j = 0</script><script type="math/tex; mode=display">\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} + \dfrac{\lambda }{m}\Theta _{ij}^{(l)}  \quad for j \geq 1</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br></pre></td></tr></table></figure><h2 id="The-hidden-layer"><a href="#The-hidden-layer" class="headerlink" title="The hidden layer"></a>The hidden layer</h2><p><img src="https://i.imgur.com/LqYfS7h.png" alt=""></p><a id="more"></a><p><img src="https://i.imgur.com/c1wo2Cy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First, I have to say, it’s the hardest exercise I have ever made when I began this course.&lt;/p&gt;
&lt;h2 id=&quot;1-3-Feedforward-and-cost-function&quot;&gt;&lt;a href=&quot;#1-3-Feedforward-and-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.3 Feedforward and cost function&quot;&gt;&lt;/a&gt;1.3 Feedforward and cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a1 = [ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), X];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;z2 = a1*Theta1&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2 = [ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), sigmoid(z2)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;z3 = a2*Theta2&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3 = sigmoid(z3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I = &lt;span class=&quot;built_in&quot;&gt;eye&lt;/span&gt;(num_labels);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Y = I(y, :);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = sum(sum((-Y.*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(a3) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-Y).*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-a3) ) / m));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For now, I still confused about &lt;code&gt;I(y, :)&lt;/code&gt;, how can it makes y(5000:1) to Y(5000:10) with the match index in each row?&lt;/p&gt;
&lt;h2 id=&quot;1-4-Regularized-cost-function&quot;&gt;&lt;a href=&quot;#1-4-Regularized-cost-function&quot; class=&quot;headerlink&quot; title=&quot;1.4 Regularized cost function&quot;&gt;&lt;/a&gt;1.4 Regularized cost function&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta )=\dfrac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{K}[-y_{k}^{(i)}log((h_\theta(x^{(i)})_k) -(1-y_{k}^{(i)})log(1-(h_\theta(x^{(i)}))_k )]+\dfrac{\lambda }{2m}[\sum_{j=1}^{25}\sum_{k=1}^{400}(\Theta _{j,k}^{(1)})^{2} + \sum_{j=1}^{10}\sum_{k=1}^{25}(\Theta _{j,k}^{(2)})^{2}]&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m * (sum(sum(Theta1(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) + sum(sum(Theta2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = J + r;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-1-Sigmoid-gradient&quot;&gt;&lt;a href=&quot;#2-1-Sigmoid-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.1 Sigmoid gradient&quot;&gt;&lt;/a&gt;2.1 Sigmoid gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;g&#39;(z)=\dfrac{d}{dz}g(z)=g(z)(1-g(z))&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g = sigmoid(z).*(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(z));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-Backpropagation&quot;&gt;&lt;a href=&quot;#2-3-Backpropagation&quot; class=&quot;headerlink&quot; title=&quot;2.3 Backpropagation&quot;&gt;&lt;/a&gt;2.3 Backpropagation&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\delta _{k}^{(3)} = (a_{k}^{(3)} - y_{k})&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\delta ^{2} = (\Theta ^{(2)})^T\delta ^{(3)}.*g&#39;(z^{(2)})&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta ^{(l)} = \Delta ^{(l)} + \delta ^{(l+1)}(a^{(l)})^T&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d3 = a3-Y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d2 = d3*Theta2.*[ones(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), sigmoidGradient(z2)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D1 = d2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&#39;*a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D2 = d3&#39;*a2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta1_grad = Theta1_grad + D1/m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta2_grad = Theta2_grad + D2/m;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-5-Regularized-Neural-Networks&quot;&gt;&lt;a href=&quot;#2-5-Regularized-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;2.5 Regularized Neural Networks&quot;&gt;&lt;/a&gt;2.5 Regularized Neural Networks&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} \quad for j = 0&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial }{\partial \Theta _{ij}^{(l)}}J(\Theta ) = D_{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)} + \dfrac{\lambda }{m}\Theta _{ij}^{(l)}  \quad for j \geq 1&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Theta1_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) = Theta1_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) + lambda/m*Theta1(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theta2_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) = Theta2_grad(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;) + lambda/m*Theta2(:,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;The-hidden-layer&quot;&gt;&lt;a href=&quot;#The-hidden-layer&quot; class=&quot;headerlink&quot; title=&quot;The hidden layer&quot;&gt;&lt;/a&gt;The hidden layer&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LqYfS7h.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Neural Networks Representation</title>
    <link href="http://artwalk.github.io/2018/01/06/Neural-Networks-Representation/"/>
    <id>http://artwalk.github.io/2018/01/06/Neural-Networks-Representation/</id>
    <published>2018-01-05T16:00:53.000Z</published>
    <updated>2018-01-05T16:47:43.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks Representation"></a>Neural Networks Representation</h1><h2 id="1-3-Vectorizing-Logistic-Regression"><a href="#1-3-Vectorizing-Logistic-Regression" class="headerlink" title="1.3 Vectorizing Logistic Regression"></a>1.3 Vectorizing Logistic Regression</h2><p>Alright, I already used the Vectorized approach and without any loops last exercise.</p><h2 id="1-4-One-vs-all-Classification"><a href="#1-4-One-vs-all-Classification" class="headerlink" title="1.4 One-vs-all Classification"></a>1.4 One-vs-all Classification</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:num_labels</span><br><span class="line">    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == <span class="built_in">i</span>), lambda)), initial_theta, options);</span><br><span class="line"></span><br><span class="line">all_theta(<span class="built_in">i</span>,:) = [theta];</span><br></pre></td></tr></table></figure><p>the key points here are:</p><ul><li><code>for</code> is needed here to loop from <code>1</code> to <code>num_labels</code></li><li><code>all_theta</code> should assigned with <code>(i,:)</code>, otherwise it will be a one-dimensional vector.</li></ul><h2 id="1-4-1-One-vs-all-Prediction"><a href="#1-4-1-One-vs-all-Prediction" class="headerlink" title="1.4.1 One-vs-all Prediction"></a>1.4.1 One-vs-all Prediction</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = sigmoid(X * all_theta');</span><br><span class="line">[m, p] = max(A, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>the <code>max</code> function will return a two-dimensional vector, <code>m</code> is the value, and <code>p</code> is the max index in that row.</p><h2 id="2-Neural-Networks"><a href="#2-Neural-Networks" class="headerlink" title="2 Neural Networks"></a>2 Neural Networks</h2><p>Finally, I touched the Neural Networks with so many classes after. 😳</p><p>The $\theta1, \theta2$ are trained to predict.</p><p>Before this, I wondering what is the process of prediction with a trained model. Is it the same with the training process?</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a0x = <span class="built_in">ones</span>(m, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">A1 = [a0x, X];</span><br><span class="line">A2 = [a0x, sigmoid(A1 * Theta1<span class="string">')];</span></span><br><span class="line"><span class="string">A3 = sigmoid(A2 * Theta2'</span>);</span><br><span class="line"></span><br><span class="line">[v, p] =  max(A3, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ailb9HX.png" alt=""></p><p>Amazing ha! 🤩</p><p>First I forgot to <code>sigmoid</code> the hidden layer and output layer. The Accuracy shows </p><blockquote><p>Training Set Accuracy: 69.62</p></blockquote><p>And it will got the same accuracy if the output layer has no <code>sigmoid</code> . It also happened in the previous <strong>One-vs-all Prediction</strong>.</p><p>Therefore I still have the question. 🧐</p><p>It’s time to keep on the training part. 💪</p><a id="more"></a><p><img src="https://i.imgur.com/arYwzJt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Neural-Networks-Representation&quot;&gt;&lt;a href=&quot;#Neural-Networks-Representation&quot; class=&quot;headerlink&quot; title=&quot;Neural Networks Representation&quot;&gt;&lt;/a&gt;Neural Networks Representation&lt;/h1&gt;&lt;h2 id=&quot;1-3-Vectorizing-Logistic-Regression&quot;&gt;&lt;a href=&quot;#1-3-Vectorizing-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;1.3 Vectorizing Logistic Regression&quot;&gt;&lt;/a&gt;1.3 Vectorizing Logistic Regression&lt;/h2&gt;&lt;p&gt;Alright, I already used the Vectorized approach and without any loops last exercise.&lt;/p&gt;
&lt;h2 id=&quot;1-4-One-vs-all-Classification&quot;&gt;&lt;a href=&quot;#1-4-One-vs-all-Classification&quot; class=&quot;headerlink&quot; title=&quot;1.4 One-vs-all Classification&quot;&gt;&lt;/a&gt;1.4 One-vs-all Classification&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initial_theta = &lt;span class=&quot;built_in&quot;&gt;zeros&lt;/span&gt;(n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options = optimset(&lt;span class=&quot;string&quot;&gt;&#39;GradObj&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;on&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;MaxIter&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:num_labels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;), lambda)), initial_theta, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all_theta(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:) = [theta];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;the key points here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; is needed here to loop from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;num_labels&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all_theta&lt;/code&gt; should assigned with &lt;code&gt;(i,:)&lt;/code&gt;, otherwise it will be a one-dimensional vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-4-1-One-vs-all-Prediction&quot;&gt;&lt;a href=&quot;#1-4-1-One-vs-all-Prediction&quot; class=&quot;headerlink&quot; title=&quot;1.4.1 One-vs-all Prediction&quot;&gt;&lt;/a&gt;1.4.1 One-vs-all Prediction&lt;/h2&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = sigmoid(X * all_theta&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[m, p] = max(A, [], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;the &lt;code&gt;max&lt;/code&gt; function will return a two-dimensional vector, &lt;code&gt;m&lt;/code&gt; is the value, and &lt;code&gt;p&lt;/code&gt; is the max index in that row.&lt;/p&gt;
&lt;h2 id=&quot;2-Neural-Networks&quot;&gt;&lt;a href=&quot;#2-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;2 Neural Networks&quot;&gt;&lt;/a&gt;2 Neural Networks&lt;/h2&gt;&lt;p&gt;Finally, I touched the Neural Networks with so many classes after. 😳&lt;/p&gt;
&lt;p&gt;The $\theta1, \theta2$ are trained to predict.&lt;/p&gt;
&lt;p&gt;Before this, I wondering what is the process of prediction with a trained model. Is it the same with the training process?&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a0x = &lt;span class=&quot;built_in&quot;&gt;ones&lt;/span&gt;(m, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A1 = [a0x, X];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A2 = [a0x, sigmoid(A1 * Theta1&lt;span class=&quot;string&quot;&gt;&#39;)];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;A3 = sigmoid(A2 * Theta2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[v, p] =  max(A3, [], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ailb9HX.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Amazing ha! 🤩&lt;/p&gt;
&lt;p&gt;First I forgot to &lt;code&gt;sigmoid&lt;/code&gt; the hidden layer and output layer. The Accuracy shows &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Training Set Accuracy: 69.62&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it will got the same accuracy if the output layer has no &lt;code&gt;sigmoid&lt;/code&gt; . It also happened in the previous &lt;strong&gt;One-vs-all Prediction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Therefore I still have the question. 🧐&lt;/p&gt;
&lt;p&gt;It’s time to keep on the training part. 💪&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Logistic Regression</title>
    <link href="http://artwalk.github.io/2018/01/03/Logistic-Regression/"/>
    <id>http://artwalk.github.io/2018/01/03/Logistic-Regression/</id>
    <published>2018-01-03T13:59:14.000Z</published>
    <updated>2018-01-03T15:05:22.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-1-Warmup-exercise-sigmoid-function"><a href="#1-2-1-Warmup-exercise-sigmoid-function" class="headerlink" title="1.2.1 Warmup exercise: sigmoid function"></a>1.2.1 Warmup exercise: sigmoid function</h2><p>As the sigmoid function is defined as:</p><script type="math/tex; mode=display">g(z) = \dfrac{1}{1+e^{-z}}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = <span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-z))</span><br></pre></td></tr></table></figure><h2 id="1-2-2-Cost-function-and-gradient"><a href="#1-2-2-Cost-function-and-gradient" class="headerlink" title="1.2.2 Cost function and gradient"></a>1.2.2 Cost function and gradient</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))]</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m</span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m</span><br></pre></td></tr></table></figure><h2 id="2-3-Cost-function-and-gradient"><a href="#2-3-Cost-function-and-gradient" class="headerlink" title="2.3 Cost function and gradient"></a>2.3 Cost function and gradient</h2><script type="math/tex; mode=display">J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))] + \dfrac{\lambda }{2m}\sum_{j=1}^{n}\theta _{j}^{2}</script><script type="math/tex; mode=display">\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)} + \dfrac{\lambda }{m}\theta _{j}</script><p>for $j = 0$, the $+ \lambda\theta$ part = 0</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r1 = sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)*lambda/<span class="number">2</span>/m</span><br><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m + r1</span><br><span class="line"></span><br><span class="line">r2 = <span class="built_in">ones</span>(<span class="built_in">size</span>(theta))</span><br><span class="line">r2(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m + (theta.*r2)*lambda/m</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/94LgVsH.png" alt="costFunctionReg"></p><p>Yes, yes, I know I passed. 😄</p><p>But, god knows what happened? 🤔</p><a id="more"></a><p><img src="https://i.imgur.com/OFkLk5J.png" alt="3 Logistic Regression"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-2-1-Warmup-exercise-sigmoid-function&quot;&gt;&lt;a href=&quot;#1-2-1-Warmup-exercise-sigmoid-function&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 Warmup exercise: sigmoid function&quot;&gt;&lt;/a&gt;1.2.1 Warmup exercise: sigmoid function&lt;/h2&gt;&lt;p&gt;As the sigmoid function is defined as:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(z) = \dfrac{1}{1+e^{-z}}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;built_in&quot;&gt;exp&lt;/span&gt;(-z))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-2-Cost-function-and-gradient&quot;&gt;&lt;a href=&quot;#1-2-2-Cost-function-and-gradient&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 Cost function and gradient&quot;&gt;&lt;/a&gt;1.2.2 Cost function and gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))]&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)}&lt;/script&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = (-y&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(sigmoid(X*theta)) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-y)&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(X*theta)))/m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = (X&#39;*(sigmoid(X*theta) - y))/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-3-Cost-function-and-gradient&quot;&gt;&lt;a href=&quot;#2-3-Cost-function-and-gradient&quot; class=&quot;headerlink&quot; title=&quot;2.3 Cost function and gradient&quot;&gt;&lt;/a&gt;2.3 Cost function and gradient&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta ) = \dfrac{1}{m}\sum_{i=1}^{m} [-y^{(i)}log(h_\theta (x^{i})) - (1-y^{(i)})log(1-h_\theta (x^{(i)}))] + \dfrac{\lambda }{2m}\sum_{j=1}^{n}\theta _{j}^{2}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\partial J(\theta )}{\partial \theta _{j}} = \dfrac{1}{m}\sum_{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)} + \dfrac{\lambda }{m}\theta _{j}&lt;/script&gt;&lt;p&gt;for $j = 0$, the $+ \lambda\theta$ part = 0&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r1 = sum(theta(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)*lambda/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J = (-y&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(sigmoid(X*theta)) - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-y)&#39;*&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-sigmoid(X*theta)))/m + r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r2 = &lt;span class=&quot;built_in&quot;&gt;ones&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(theta))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grad = (X&#39;*(sigmoid(X*theta) - y))/m + (theta.*r2)*lambda/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/94LgVsH.png&quot; alt=&quot;costFunctionReg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Yes, yes, I know I passed. 😄&lt;/p&gt;
&lt;p&gt;But, god knows what happened? 🤔&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning by Stanford University</title>
    <link href="http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/"/>
    <id>http://artwalk.github.io/2017/12/29/Machine-Learning-by-Stanford-University/</id>
    <published>2017-12-29T10:16:21.000Z</published>
    <updated>2017-12-29T14:20:38.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Machine-Learning-by-Stanford-University"><a href="#Machine-Learning-by-Stanford-University" class="headerlink" title="Machine Learning by Stanford University"></a>Machine Learning by Stanford University</h1><p>It is a note about the process that I’m trying to learn Machine Learning on coursera. </p><p>I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. </p><p>But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.</p><p>Still, I am too old to learn and have no confidence to guarantee I can really master it one day.</p><p>😂😂😂</p><hr><h2 id="1-Linear-Regression-with-One-Variable"><a href="#1-Linear-Regression-with-One-Variable" class="headerlink" title="1 Linear Regression with One Variable"></a>1 Linear Regression with One Variable</h2><h2 id="2-Linear-Regression-with-Multiple-Variables"><a href="#2-Linear-Regression-with-Multiple-Variables" class="headerlink" title="2 Linear Regression with Multiple Variables"></a>2 Linear Regression with Multiple Variables</h2><h3 id="ex1"><a href="#ex1" class="headerlink" title="ex1"></a>ex1</h3><p>This is my favorite part, I love coding 😄.</p><h4 id="ComputeCost"><a href="#ComputeCost" class="headerlink" title="ComputeCost"></a>ComputeCost</h4><p>You see, the cost function here </p><p>(OMG: the formula code is <code>J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</code> in markdown) 🤯</p><script type="math/tex; mode=display">J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</script><script type="math/tex; mode=display">h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n</script><p>In fact, I found it is <code>X * theta</code> in the real calculation by <code>Octave</code> instead of <code>theta&#39; * X</code> as the formula shows.</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = sum(((X * theta) - y).^<span class="number">2</span>)/<span class="number">2</span>/m</span><br></pre></td></tr></table></figure><h4 id="GradientDescent"><a href="#GradientDescent" class="headerlink" title="GradientDescent"></a>GradientDescent</h4><p>Similarly, the Gradient Descent here:</p><p>repeat until convergence: {</p><p>​    <script type="math/tex">\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}</script></p><p>​    <script type="math/tex">(for\  j := 0…n)</script></p><p>}</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">theta = theta - alpha/m*(X' * ((X * theta) - y))</span><br></pre></td></tr></table></figure><p>It take me hours 💥 to figure out why should I using  <code>X&#39; *  ((X * theta) - y))</code> </p><p>Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to <code>sum()</code> part as the formule shows.</p><p>I am still a little bit confused although I passed the test. 😵</p><h2 id="3-Logistic-Regression"><a href="#3-Logistic-Regression" class="headerlink" title="3 Logistic Regression"></a>3 Logistic Regression</h2><p>To Be Continued…</p><a id="more"></a><p><img src="https://i.imgur.com/v4JpxOp.png" alt="1 Linear Regression with One Variable"></p><p><img src="https://i.imgur.com/G2Yn9nA.png" alt="2 Linear Regression with Multiple Variables"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Machine-Learning-by-Stanford-University&quot;&gt;&lt;a href=&quot;#Machine-Learning-by-Stanford-University&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning by Stanford University&quot;&gt;&lt;/a&gt;Machine Learning by Stanford University&lt;/h1&gt;&lt;p&gt;It is a note about the process that I’m trying to learn Machine Learning on coursera. &lt;/p&gt;
&lt;p&gt;I heard AI a year ago, but never really look into it as an elderly who is hardly to accept new things. &lt;/p&gt;
&lt;p&gt;But it seems I will loss job at this generation AI🤖️ revolution, therefore I’ll try my best to learn it.&lt;/p&gt;
&lt;p&gt;Still, I am too old to learn and have no confidence to guarantee I can really master it one day.&lt;/p&gt;
&lt;p&gt;😂😂😂&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-Linear-Regression-with-One-Variable&quot;&gt;&lt;a href=&quot;#1-Linear-Regression-with-One-Variable&quot; class=&quot;headerlink&quot; title=&quot;1 Linear Regression with One Variable&quot;&gt;&lt;/a&gt;1 Linear Regression with One Variable&lt;/h2&gt;&lt;h2 id=&quot;2-Linear-Regression-with-Multiple-Variables&quot;&gt;&lt;a href=&quot;#2-Linear-Regression-with-Multiple-Variables&quot; class=&quot;headerlink&quot; title=&quot;2 Linear Regression with Multiple Variables&quot;&gt;&lt;/a&gt;2 Linear Regression with Multiple Variables&lt;/h2&gt;&lt;h3 id=&quot;ex1&quot;&gt;&lt;a href=&quot;#ex1&quot; class=&quot;headerlink&quot; title=&quot;ex1&quot;&gt;&lt;/a&gt;ex1&lt;/h3&gt;&lt;p&gt;This is my favorite part, I love coding 😄.&lt;/p&gt;
&lt;h4 id=&quot;ComputeCost&quot;&gt;&lt;a href=&quot;#ComputeCost&quot; class=&quot;headerlink&quot; title=&quot;ComputeCost&quot;&gt;&lt;/a&gt;ComputeCost&lt;/h4&gt;&lt;p&gt;You see, the cost function here &lt;/p&gt;
&lt;p&gt;(OMG: the formula code is &lt;code&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/code&gt; in markdown) 🤯&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x) = \theta^Tx = \theta_0x_0 + \theta_1x_1 + … + \theta_nx_n&lt;/script&gt;&lt;p&gt;In fact, I found it is &lt;code&gt;X * theta&lt;/code&gt; in the real calculation by &lt;code&gt;Octave&lt;/code&gt; instead of &lt;code&gt;theta&amp;#39; * X&lt;/code&gt; as the formula shows.&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;J = sum(((X * theta) - y).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;GradientDescent&quot;&gt;&lt;a href=&quot;#GradientDescent&quot; class=&quot;headerlink&quot; title=&quot;GradientDescent&quot;&gt;&lt;/a&gt;GradientDescent&lt;/h4&gt;&lt;p&gt;Similarly, the Gradient Descent here:&lt;/p&gt;
&lt;p&gt;repeat until convergence: {&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;\theta_j:=\theta_j-\alpha\cfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )x_j^{(i)}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;script type=&quot;math/tex&quot;&gt;(for\  j := 0…n)&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theta = theta - alpha/m*(X&#39; * ((X * theta) - y))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It take me hours 💥 to figure out why should I using  &lt;code&gt;X&amp;#39; *  ((X * theta) - y))&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Because all the variables X, theta , y, each of them is a vector, X’ * (…) equal to &lt;code&gt;sum()&lt;/code&gt; part as the formule shows.&lt;/p&gt;
&lt;p&gt;I am still a little bit confused although I passed the test. 😵&lt;/p&gt;
&lt;h2 id=&quot;3-Logistic-Regression&quot;&gt;&lt;a href=&quot;#3-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;3 Logistic Regression&quot;&gt;&lt;/a&gt;3 Logistic Regression&lt;/h2&gt;&lt;p&gt;To Be Continued…&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://artwalk.github.io/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://artwalk.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Batch replace NamedColors to RGB in Storyboard</title>
    <link href="http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/"/>
    <id>http://artwalk.github.io/2017/10/23/Batch-replace-NamedColors-to-RGB-in-Storyboard/</id>
    <published>2017-10-23T08:41:08.000Z</published>
    <updated>2017-12-29T13:57:28.511Z</updated>
    
    <content type="html"><![CDATA[<p>NamedColors is a new feature that really convenient for developers to use in Xcode</p><p>But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…</p><p>The main idea is:</p><ul><li>Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.</li><li>Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.</li></ul><p>First, save it as <code>NamedColors2RGB.py</code>  in your project root folder.</p><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.getcwd()</span><br><span class="line"></span><br><span class="line">colorDict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># read all colorset</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">if</span> d.endswith(<span class="string">".colorset"</span>):</span><br><span class="line">            colorK = d.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"found "</span> + colorK</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file == <span class="string">"Contents.json"</span>:</span><br><span class="line">                    f = open(os.path.join(root, d, file))</span><br><span class="line">                    jd = json.load(f)</span><br><span class="line">                    rgb = jd[<span class="string">"colors"</span>][<span class="number">0</span>][<span class="string">"color"</span>][<span class="string">"components"</span>]</span><br><span class="line">                    colorDict[colorK] = <span class="string">'red="&#123;&#125;" green="&#123;&#125;" blue="&#123;&#125;" alpha="&#123;&#125;" colorSpace="calibratedRGB"'</span>.format(rgb[<span class="string">"red"</span>], rgb[<span class="string">"green"</span>], rgb[<span class="string">"blue"</span>], rgb[<span class="string">"alpha"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># replacing</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith((<span class="string">".storyboard"</span>, <span class="string">".xib"</span>)):</span><br><span class="line">            path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Replacing namedColor in "</span> + path</span><br><span class="line">            f = open(path)</span><br><span class="line">            nf = f.read()</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;namedColor name=.*\n.*\n +&lt;/namedColor&gt;\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line">            nf = re.sub(<span class="string">r" +&lt;capability name=\"Named colors\" minToolsVersion=\".*\n"</span>, <span class="string">''</span>, nf)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> colorDict.items():</span><br><span class="line">                nf = re.sub(<span class="string">r'name="&#123;&#125;"'</span>.format(k), v, nf)</span><br><span class="line"></span><br><span class="line">            f = open(path, <span class="string">'w'</span>)</span><br><span class="line">            f.write(nf)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>Then, <code>Xcode -&gt; Project File -&gt; Build Phases -&gt; Add Build Phase -&gt; Add Run Script</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> = <span class="string">"Release"</span> ]; <span class="keyword">then</span></span><br><span class="line">    python NamedColors2RGB.py</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>If you found anyway to reverse it back to NamedColors, please leave a msg to me.</p><p>After all, once the NamedColors changed, all the color in the interface builder should be changed too.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NamedColors is a new feature that really convenient for developers to use in Xcode&lt;/p&gt;
&lt;p&gt;But it is only a available on iOS 11, and it will cause app crash on iOS 10, 9…&lt;/p&gt;
&lt;p&gt;The main idea is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use NamedColors in StoryBoard to avoid fill color every time to benefit the new feature.&lt;/li&gt;
&lt;li&gt;Replace all NamedColors’ attributes to RGB in StoryBoard when build the project to avoid crash on iOS old version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, save it as &lt;code&gt;NamedColors2RGB.py&lt;/code&gt;  in your project root folder.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://artwalk.github.io/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Building Apps for iPhone X</title>
    <link href="http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/"/>
    <id>http://artwalk.github.io/2017/10/20/Building-Apps-for-iPhone-X/</id>
    <published>2017-10-20T14:37:50.000Z</published>
    <updated>2017-10-20T15:36:14.082Z</updated>
    
    <content type="html"><![CDATA[<p>First, Watching <a href="https://developer.apple.com/videos/play/fall2017/201/" target="_blank" rel="noopener">Building Apps for iPhone X</a> with 2x speed to get a glance,  it will speed 13/2 minutes.</p><ul><li>The key point is to open Safe Area in Storyboard.</li><li>The LayoutConstraint attracted to superview can beyond the Safe Area.</li></ul><a id="more"></a><p>My current app has 17 Storyboards and 28 ViewControllers.</p><p>In each ViewController, the previous develepers used an UIView on top to cover the system’s navigationController to do some tricks, which means the constraint of the view has a <code>height == 64</code>, and <code>top == superview.top</code>.</p><p>Although it’s a little disgusting, but it works on previous devices which navigationbar’s height are always 64.</p><p>But on iPhone X, it need to use Safe Area. Which means I have better to delete the fake navigationView. But that means move all the buttons, actions, animations to the system’s navigationController if the segue kind is <code>push</code>.</p><p>Honestly to say, it’s much easier than I thought after all works done.</p><p>For the segue kind is <code>present modally</code>, the fake view still do its job by changed it’s height only if the device is iPhone X.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> top = <span class="type">UIApplication</span>.shared.keyWindow?.safeAreaInsets.top, top &gt; <span class="number">0</span> &#123;</span><br><span class="line">      viewHeight.constant = <span class="number">88</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other usefull tools</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">navigationItem.setHidesBackButton(<span class="literal">true</span>, animated: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">navigationController?.interactivePopGestureRecognizer?.isEnabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.layer.zPosition = -<span class="number">1</span> <span class="comment">// put the navigationBar under the vc'view</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First, Watching &lt;a href=&quot;https://developer.apple.com/videos/play/fall2017/201/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building Apps for iPhone X&lt;/a&gt; with 2x speed to get a glance,  it will speed 13/2 minutes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key point is to open Safe Area in Storyboard.&lt;/li&gt;
&lt;li&gt;The LayoutConstraint attracted to superview can beyond the Safe Area.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://artwalk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Codility Stacks and Queues</title>
    <link href="http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/"/>
    <id>http://artwalk.github.io/2017/09/19/Codility-Stacks-and-Queues/</id>
    <published>2017-09-19T01:26:34.000Z</published>
    <updated>2017-09-19T05:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="StoneWall"><a href="#StoneWall" class="headerlink" title="StoneWall"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/" target="_blank" rel="noopener">StoneWall</a></h2><p>64%, timeout.</p><p>It seems Swift stack is not fast enough. :(</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> H : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">H</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> !stack.isEmpty &amp;&amp; $<span class="number">1</span> &lt; stack.last! &#123;</span><br><span class="line">            stack.popLast()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> stack.isEmpty || $<span class="number">1</span> &gt; stack.last! &#123;</span><br><span class="line">            stack.append($<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> $<span class="number">0</span> + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nesting"><a href="#Nesting" class="headerlink" title="Nesting"></a><a href="https://codility.com/programmers/lessons/7-stacks_and_queues/nesting/" target="_blank" rel="noopener">Nesting</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> S : <span class="keyword">inout</span> String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> <span class="type">S</span>.characters &#123;</span><br><span class="line">        sum += <span class="type">String</span>(<span class="built_in">c</span>) == <span class="string">"("</span> ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;StoneWall&quot;&gt;&lt;a href=&quot;#StoneWall&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Sorting</title>
    <link href="http://artwalk.github.io/2017/09/18/Codility-Sorting/"/>
    <id>http://artwalk.github.io/2017/09/18/Codility-Sorting/</id>
    <published>2017-09-17T16:22:18.000Z</published>
    <updated>2017-09-18T16:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a><a href="https://codility.com/programmers/lessons/6-sorting/distinct/" target="_blank" rel="noopener">Distinct</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Set</span>(<span class="type">A</span>).<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a><a href="https://codility.com/programmers/lessons/6-sorting/triangle/" target="_blank" rel="noopener">Triangle</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.<span class="built_in">count</span> &lt; <span class="number">3</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedA = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;sortedA.<span class="built_in">count</span>-<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> iv = sortedA[i], ij = sortedA[i+<span class="number">1</span>], ik = sortedA[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> iv + ij &gt; ik &amp;&amp; iv + ik &gt; ij &amp;&amp; ij + ik &gt; iv &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxProductOfThree"><a href="#MaxProductOfThree" class="headerlink" title="MaxProductOfThree"></a><a href="https://codility.com/programmers/lessons/6-sorting/max_product_of_three/" target="_blank" rel="noopener">MaxProductOfThree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="type">A</span>.sorted()</span><br><span class="line">    <span class="keyword">let</span> n = a.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b1 = a[<span class="number">0</span>] * a[<span class="number">1</span>] * a[n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> b2 = a[n-<span class="number">3</span>] * a[n-<span class="number">2</span>] * a[n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  b1 &gt; b2 ? b1 : b2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;Distinct&quot;&gt;&lt;a href=&quot;#Distinct&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Codility Prefix Sums</title>
    <link href="http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/"/>
    <id>http://artwalk.github.io/2017/09/17/Codility-Prefix-Sums/</id>
    <published>2017-09-17T15:45:41.000Z</published>
    <updated>2017-09-17T16:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please let me know if you have any questions about the algorithm. </p><p>:)</p><h2 id="PassingCars"><a href="#PassingCars" class="headerlink" title="PassingCars"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/passing_cars/" target="_blank" rel="noopener">PassingCars</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">A</span>[i] == <span class="number">0</span> &#123;</span><br><span class="line">            res += sum</span><br><span class="line">            <span class="keyword">if</span> res &gt; <span class="number">1000000000</span> &#123;</span><br><span class="line">                res = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDiv"><a href="#CountDiv" class="headerlink" title="CountDiv"></a><a href="https://codility.com/programmers/lessons/5-prefix_sums/count_div/" target="_blank" rel="noopener">CountDiv</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : Int, <span class="number">_</span> B : Int, <span class="number">_</span> K : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = (<span class="type">Double</span>(<span class="type">A</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.up)</span><br><span class="line">    <span class="keyword">let</span> j = (<span class="type">Double</span>(<span class="type">B</span>) / <span class="type">Double</span>(<span class="type">K</span>)).rounded(.down)</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">Int</span>(j - i) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please let me know if you have any questions about the algorithm. &lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;h2 id=&quot;PassingCars&quot;&gt;&lt;a href=&quot;#PassingCars&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Codility" scheme="http://artwalk.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>codility</title>
    <link href="http://artwalk.github.io/2017/09/09/Codility/"/>
    <id>http://artwalk.github.io/2017/09/09/Codility/</id>
    <published>2017-09-09T14:22:59.000Z</published>
    <updated>2017-09-11T09:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BinaryGap"><a href="#BinaryGap" class="headerlink" title="BinaryGap"></a>BinaryGap</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="type">String</span>(<span class="type">N</span>, radix: <span class="number">2</span>).trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"0"</span>))</span><br><span class="line">    <span class="keyword">let</span> sum = s.components(separatedBy: <span class="string">"1"</span>).<span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = $<span class="number">1</span>.characters.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">return</span> i &gt; $<span class="number">0</span> ? i : $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OddOccurrencesInArray"><a href="#OddOccurrencesInArray" class="headerlink" title="OddOccurrencesInArray"></a>OddOccurrencesInArray</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> ^ $<span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicRotation"><a href="#CyclicRotation" class="headerlink" title="CyclicRotation"></a>CyclicRotation</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int], <span class="number">_</span> K : Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>.isEmpty &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="type">A</span>.<span class="built_in">count</span> - (<span class="type">K</span> % <span class="type">A</span>.<span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(<span class="type">A</span>[i..&lt;<span class="type">A</span>.<span class="built_in">count</span>] + <span class="type">A</span>[<span class="number">0</span>..&lt;i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FrogJmp"><a href="#FrogJmp" class="headerlink" title="FrogJmp"></a>FrogJmp</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> X : Int, <span class="number">_</span> Y : Int, <span class="number">_</span> D : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>((<span class="type">Double</span>(<span class="type">Y</span> - <span class="type">X</span>) / <span class="type">Double</span>(<span class="type">D</span>)).rounded(.up))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TapeEquilibrium"><a href="#TapeEquilibrium" class="headerlink" title="TapeEquilibrium"></a>TapeEquilibrium</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">Int</span>.<span class="built_in">max</span>, a2 = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;, a1 = <span class="number">0</span></span><br><span class="line">    <span class="type">A</span>[<span class="number">0</span>..&lt;<span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>].forEach &#123;</span><br><span class="line">        a1 += $<span class="number">0</span>; a2 -= $<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="built_in">abs</span>(a1 - a2)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> &gt; tmp &#123; <span class="built_in">min</span> = tmp &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a>PermMissingElem</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = (<span class="number">1</span> + <span class="type">A</span>.<span class="built_in">count</span>) * <span class="type">A</span>.<span class="built_in">count</span> / <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> real = <span class="type">A</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">A</span>.<span class="built_in">count</span> - (real - sum) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MissingInteger"><a href="#MissingInteger" class="headerlink" title="MissingInteger"></a>MissingInteger</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bList:[<span class="type">Bool</span>] = <span class="type">Array</span>(repeating: <span class="literal">true</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> $<span class="number">0</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            bList[$<span class="number">0</span>] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> bList[index] == <span class="literal">false</span> &#123;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxCounters"><a href="#MaxCounters" class="headerlink" title="MaxCounters"></a>MaxCounters</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> N : Int, <span class="number">_</span> A : <span class="keyword">inout</span> [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="type">N</span>), <span class="built_in">max</span> = <span class="number">0</span>, newMax = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="type">A</span>.forEach &#123;</span><br><span class="line">        <span class="keyword">let</span> v = $<span class="number">0</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v == <span class="type">N</span> &#123;</span><br><span class="line">            <span class="built_in">max</span> = newMax <span class="comment">// for O(N + M), skip: arr = Array(repeating: max, count: N)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[v] = (arr[v] &gt; <span class="built_in">max</span> ? arr[v] : <span class="built_in">max</span>) + <span class="number">1</span></span><br><span class="line">            newMax = newMax &lt; arr[v] ? arr[v] : newMax</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="built_in">map</span> &#123; $<span class="number">0</span> &lt; <span class="built_in">max</span> ? <span class="built_in">max</span> : $<span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Disqus-with-Code-style"><a href="#Disqus-with-Code-style" class="headerlink" title="Disqus with Code style"></a>Disqus with Code style</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;<span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"Swift"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BinaryGap&quot;&gt;&lt;a href=&quot;#BinaryGap&quot; class=&quot;headerlink&quot; title=&quot;BinaryGap&quot;&gt;&lt;/a&gt;BinaryGap&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="codility" scheme="http://artwalk.github.io/tags/codility/"/>
    
  </entry>
  
  <entry>
    <title>22 Generate Parentheses</title>
    <link href="http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/"/>
    <id>http://artwalk.github.io/2017/09/07/22-Generate-Parentheses/</id>
    <published>2017-09-06T16:52:09.000Z</published>
    <updated>2017-09-07T13:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h1><p>Tips:</p><ul><li>If there is a <code>(</code> on the left, it should have a <code>)</code> somewhere on the right</li><li><strong>N</strong> will have one more <code>()</code> comparing with <strong>N-1</strong></li></ul><p>Therefore, Iterate all items in <strong>N-1</strong> array, for each Parentheses String, </p><ul><li>Left → Right, if the char is <code>(</code>, insert a <code>()</code> behind</li><li>Add <code>()</code> in the Leftmost</li></ul><p>Put these two new strings into a Set collection to eliminate redundancy.</p><a id="more"></a><p>对于 N-1 的集合里的每个 String, </p><ul><li>遍历，从左往右，碰到左括号，插入<code>()</code></li><li>最左边补 <code>()</code></li></ul><p>放到 Set 里去重</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dict: [<span class="type">Int</span>:[<span class="type">String</span>]] = [<span class="number">0</span>:[], <span class="number">1</span>:[<span class="string">"()"</span>], <span class="number">2</span>:[<span class="string">"(())"</span>, <span class="string">"()()"</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> res = dict[n] &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> setN = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">            <span class="keyword">let</span> pre = generateParenthesis(n-<span class="number">1</span>)</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;$<span class="number">0</span>.characters.<span class="built_in">count</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i)</span><br><span class="line">                    <span class="keyword">let</span> char: <span class="type">Character</span> = $<span class="number">0</span>[index]</span><br><span class="line">                    <span class="keyword">if</span> <span class="type">String</span>(char) == <span class="string">"("</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> index = $<span class="number">0</span>.index($<span class="number">0</span>.startIndex, offsetBy: i+<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">let</span> str = $<span class="number">0</span>.substring(to: index) + <span class="string">"()"</span> + $<span class="number">0</span>.substring(from: index)</span><br><span class="line">                        setN.insert(str)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.forEach &#123;</span><br><span class="line">                setN.insert(<span class="string">"()"</span> + $<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> res = <span class="type">Array</span>(setN)</span><br><span class="line">            dict[n] = res</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;22-Generate-Parentheses&quot;&gt;&lt;a href=&quot;#22-Generate-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;22 Generate Parentheses&quot;&gt;&lt;/a&gt;22 Generate Parentheses&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there is a &lt;code&gt;(&lt;/code&gt; on the left, it should have a &lt;code&gt;)&lt;/code&gt; somewhere on the right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; will have one more &lt;code&gt;()&lt;/code&gt; comparing with &lt;strong&gt;N-1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, Iterate all items in &lt;strong&gt;N-1&lt;/strong&gt; array, for each Parentheses String, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left → Right, if the char is &lt;code&gt;(&lt;/code&gt;, insert a &lt;code&gt;()&lt;/code&gt; behind&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;()&lt;/code&gt; in the Leftmost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put these two new strings into a Set collection to eliminate redundancy.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>18 4Sum</title>
    <link href="http://artwalk.github.io/2017/09/04/18-4Sum/"/>
    <id>http://artwalk.github.io/2017/09/04/18-4Sum/</id>
    <published>2017-09-03T16:31:19.000Z</published>
    <updated>2017-09-03T16:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18 4Sum"></a>18 4Sum</h1><p>Tips:</p><p>Just like 3Sum, sort array first, then</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">   [-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">//  i→</span></span><br><span class="line"><span class="comment">//      j→</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//          k→      ←f</span></span><br></pre></td></tr></table></figure><p>When i, j, k, f, are iterating, the same value should be skipped for saving time.</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> sortNums = nums.sorted()</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = sortNums.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt; <span class="number">4</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> result = [[<span class="type">Int</span>]]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= <span class="built_in">count</span> - <span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> iv = sortNums[i]</span><br><span class="line">            <span class="keyword">var</span> j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= <span class="built_in">count</span> - <span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> jv = sortNums[j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> k = j + <span class="number">1</span>, f = <span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">                loopkf: <span class="keyword">while</span> k &lt; f &#123;</span><br><span class="line">                    <span class="keyword">let</span> kv = sortNums[k], fv = sortNums[f]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> sum = iv + jv + kv + fv</span><br><span class="line">                    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                        result.append([iv, jv, kv, fv])</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span> &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> kv == sortNums[k] &amp;&amp; k &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; k += <span class="number">1</span> &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">                        <span class="keyword">while</span> fv == sortNums[f] &amp;&amp; f &gt; <span class="number">0</span>  &#123; f -= <span class="number">1</span> &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> jv == sortNums[j] &amp;&amp; j &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; j += <span class="number">1</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> iv == sortNums[i] &amp;&amp; i &lt; <span class="built_in">count</span>-<span class="number">1</span> &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line">s.fourSum([<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s.fourSum([<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">4</span>,<span class="number">0</span>,-<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>,-<span class="number">2</span>], <span class="number">7</span>)</span><br><span class="line">s.fourSum([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">s.fourSum([-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18-4Sum&quot;&gt;&lt;a href=&quot;#18-4Sum&quot; class=&quot;headerlink&quot; title=&quot;18 4Sum&quot;&gt;&lt;/a&gt;18 4Sum&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Just like 3Sum, sort array first, then&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   [-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  i→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      j→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//          k→      ←f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When i, j, k, f, are iterating, the same value should be skipped for saving time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>19 Remove Nth Node From End of List</title>
    <link href="http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://artwalk.github.io/2017/09/03/19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-09-03T15:16:26.000Z</published>
    <updated>2017-09-03T15:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19 Remove Nth Node From End of List"></a>19 Remove Nth Node From End of List</h1><p>Tips:</p><p>Traverse all the Note and put their reference into a <code>[ListNode]</code> , once you can get their sequence number. </p><p>Be careful that <code>list.count == n</code> which means you have to delete the <code>head</code></p><a id="more"></a><p>Note 的值并不重要，遍历一遍的同时把他们的地址引用扔到一个数组里面，序列号就有了，删除时把上一个的 next 指针指向 next.next</p><p>另外要注意下 n 是 head 时，上一个 note 是 nil</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> list = [<span class="type">ListNode</span>]()</span><br><span class="line">        <span class="keyword">var</span> root = head</span><br><span class="line">        <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            list.append(cur!)</span><br><span class="line">            cur = cur!.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = list.<span class="built_in">count</span> - n</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            root = root?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list[i-<span class="number">1</span>].next = list[i-<span class="number">1</span>].next?.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(cur!.val)</span><br><span class="line">        cur = cur?.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = <span class="type">ListNode</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> cur: <span class="type">ListNode</span>? = head</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> &#123;</span><br><span class="line">    cur?.next = <span class="type">ListNode</span>(i)</span><br><span class="line">    cur = cur?.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printList(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Solution</span>()</span><br><span class="line"><span class="keyword">let</span> s1 = s.removeNthFromEnd(head, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = s.removeNthFromEnd(s1, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">printList(s2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;19 Remove Nth Node From End of List&quot;&gt;&lt;/a&gt;19 Remove Nth Node From End of List&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;Traverse all the Note and put their reference into a &lt;code&gt;[ListNode]&lt;/code&gt; , once you can get their sequence number. &lt;/p&gt;
&lt;p&gt;Be careful that &lt;code&gt;list.count == n&lt;/code&gt; which means you have to delete the &lt;code&gt;head&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>17 Letter Combinations of a Phone Number</title>
    <link href="http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://artwalk.github.io/2017/09/03/17-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-09-03T14:03:13.000Z</published>
    <updated>2017-09-03T14:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17    Letter Combinations of a Phone Number"></a>17    Letter Combinations of a Phone Number</h1><p>Tips:</p><p>The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.</p><p>The point is using each new character in the <code>string</code> to Multiply the <code>[String]</code> which was generated in the previous step.</p><a id="more"></a><p>结果是一颗树，如果一次构建，再遍历，结构会很复杂并且占空间</p><p>本质上是用已经生成的 [String] 里的 每个元素加上 String 的每个元素</p><p>分而治之就好办了（两个函数）</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dict = [<span class="number">2</span>:<span class="string">"abc"</span>, <span class="number">3</span>:<span class="string">"def"</span>, <span class="number">4</span>:<span class="string">"ghi"</span>, <span class="number">5</span>:<span class="string">"jkl"</span>, <span class="number">6</span>:<span class="string">"mno"</span>, <span class="number">7</span>:<span class="string">"pqrs"</span>, <span class="number">8</span>:<span class="string">"tuv"</span>, <span class="number">9</span>:<span class="string">"wxyz"</span> ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sxs</span><span class="params">(s1: [String], s2: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">        s2.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> s1.isEmpty &#123;</span><br><span class="line">                res.append(<span class="string">"<span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s1.forEach &#123; s <span class="keyword">in</span></span><br><span class="line">                    res.append(<span class="string">"<span class="subst">\(s)</span><span class="subst">\(<span class="built_in">c</span>)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(<span class="number">_</span> digits: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line">        digits.characters.forEach &#123; <span class="built_in">c</span> <span class="keyword">in</span></span><br><span class="line">            res = sxs(s1: res, s2: dict[<span class="type">Int</span>(<span class="type">String</span>(<span class="built_in">c</span>))!]!)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17-Letter-Combinations-of-a-Phone-Number&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number&quot; class=&quot;headerlink&quot; title=&quot;17    Letter Combinations of a Phone Number&quot;&gt;&lt;/a&gt;17    Letter Combinations of a Phone Number&lt;/h1&gt;&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;The final data structure is a tree, if it generated and stored as a tree, the memory size would be cost to much.&lt;/p&gt;
&lt;p&gt;The point is using each new character in the &lt;code&gt;string&lt;/code&gt; to Multiply the &lt;code&gt;[String]&lt;/code&gt; which was generated in the previous step.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://artwalk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>How to trust MitM Certificate on iPhone Simulator</title>
    <link href="http://artwalk.github.io/2017/06/07/How-to-trust-MitM-Certificate-on-iPhone-Simulator/"/>
    <id>http://artwalk.github.io/2017/06/07/How-to-trust-MitM-Certificate-on-iPhone-Simulator/</id>
    <published>2017-06-07T03:25:04.000Z</published>
    <updated>2017-06-07T03:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-trust-MitM-Certificate-on-iPhone-Simulator"><a href="#How-to-trust-MitM-Certificate-on-iPhone-Simulator" class="headerlink" title="How to trust MitM Certificate on iPhone Simulator"></a>How to trust MitM Certificate on iPhone Simulator</h1><p>Open Keychain and export the MitM Root certificate as .cer ( not .p12 ), drag it to the simulator, then go to <code>Settings.General.About.CertificateTrustSettings.ENABLE FULL TRUST FOR ROOT CERTIFICATES</code>, open the <code>Switch</code> which is your MitM. </p><a id="more"></a><p>Before that, I dragged .p12, and it can trusted in <code>Settings.General.Profiles</code>, but can’t be see in <code>Settings.General.About.Certificate Trust Settings</code>.</p><p>This wasted lots of time, and I found something like: <a href="https://stackoverflow.com/questions/2219707/adding-a-self-signed-certificate-to-iphone-simulator" target="_blank" rel="noopener">Modify TrustStore.sqlite3</a></p><p>That is terrible. There it no need to say the <code>TrustStore.sqlite3</code> no longer in at that path. </p><p>After read <a href="https://developer.apple.com/library/content/qa/qa1948/_index.html" target="_blank" rel="noopener">Installing a CA’s Root Certificate on Your Test Device</a> and found nothing.</p><p>I’m glad tried .cer several days later, now I can watch all requests on specific domains by <a href="https://itunes.apple.com/us/app/surge-web-developer-tool-and-proxy-utility/id1040100637?mt=8" target="_blank" rel="noopener">Surge</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;How-to-trust-MitM-Certificate-on-iPhone-Simulator&quot;&gt;&lt;a href=&quot;#How-to-trust-MitM-Certificate-on-iPhone-Simulator&quot; class=&quot;headerlink&quot; title=&quot;How to trust MitM Certificate on iPhone Simulator&quot;&gt;&lt;/a&gt;How to trust MitM Certificate on iPhone Simulator&lt;/h1&gt;&lt;p&gt;Open Keychain and export the MitM Root certificate as .cer ( not .p12 ), drag it to the simulator, then go to &lt;code&gt;Settings.General.About.CertificateTrustSettings.ENABLE FULL TRUST FOR ROOT CERTIFICATES&lt;/code&gt;, open the &lt;code&gt;Switch&lt;/code&gt; which is your MitM. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Surge" scheme="http://artwalk.github.io/tags/Surge/"/>
    
      <category term="Simulator" scheme="http://artwalk.github.io/tags/Simulator/"/>
    
  </entry>
  
  <entry>
    <title>HOW TO MAKE WEBSITES AGE-FRIENDLY</title>
    <link href="http://artwalk.github.io/2017/05/19/HOW-TO-MAKE-WEBSITES-AGE-FRIENDLY/"/>
    <id>http://artwalk.github.io/2017/05/19/HOW-TO-MAKE-WEBSITES-AGE-FRIENDLY/</id>
    <published>2017-05-18T23:37:06.000Z</published>
    <updated>2017-05-18T23:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）"><a href="#上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）" class="headerlink" title="上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）"></a>上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）</h1><p>原文：<a href="http://whatusersdo.com/blog/make-websites-age-friendly/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="noopener">GENERATION UX – HOW TO MAKE WEBSITES AGE-FRIENDLY</a><br>翻译：<a href="http://artwalk.github.io//2017/05/11/MagicLang">MagicLang</a></p><h2 id="技术不仅仅适用于新千年的孩纸"><a href="#技术不仅仅适用于新千年的孩纸" class="headerlink" title="技术不仅仅适用于新千年的孩纸"></a>技术不仅仅适用于新千年的孩纸</h2><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-109029.jpeg" target="_blank" rel="noopener"></a></p><p>50以上的人几乎占英国人口的三分之一。他们上网, 并且仅2015年他们花了 £144.5亿。76%的老年人每周至少上网买东西一次。50以上的老年人或者说 (数码潮时代出生的人), 也是富裕的一代, 在英国拥有几乎70% 的家庭财富。</p><p><strong>进入 数码潮老人 市场并不仅仅是抛出一些看起来年轻的老年人的照片。这也代表着你的网站需要对这部分人做到用户友好 。</strong></p><a id="more"></a><p>我们随着年龄的增长而改变。有四个主要类别的变化是明显的 —— 视力, 听觉, 精细动作控制和认知能力, 他们都影响老年人如何与网站互动。但是, 您可以设计页面时对 数码潮老人 友好。在测试合作伙伴, 我们有超过100检查用来评估一个网页。下面的概述可以让你在正确的方向上思考。</p><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><p>视力峰值约30岁。40岁以后, 许多人的视力明显恶化。老花眼—通常被称为与年龄相关的远视—只是影响 数码潮老人 的问题之一。不太出名的是, 衰老也会降低颜色知觉和颜色敏感性。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-219000.jpeg" target="_blank" rel="noopener"></a></p><p>如果您想确保 数码潮老人 在您的网站上有良好的体验, 请确保文本大小至少为 12pt, 并确保文本和背景的颜色对比度也很好。</p><h3 id="听觉"><a href="#听觉" class="headerlink" title="听觉"></a>听觉</h3><p>在听力方面, <em>有关听力损失的行动</em> (正式名称：英国皇家聋人协会 RNID) 说, 听力损失在50岁左右开始急剧增加, 人过60，55% 以上会耳聋或听力困难。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/night-television-tv-theme-machines.jpg" target="_blank" rel="noopener"></a></p><p>如果您的网站上有音频或视频内容, 请确保没有太多的背景噪音, 它们有准确的字幕（或隐藏字幕），或提供抄本。</p><h3 id="精细动作控制"><a href="#精细动作控制" class="headerlink" title="精细动作控制"></a>精细动作控制</h3><p>精细动作控制和手眼协调也随着时间的推移而减少。各种疾病, 如关节炎, 会影响精细动作控制, 可能在 40 岁后出现。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-270700.jpeg" target="_blank" rel="noopener"></a></p><p>您确保的事情包括可点击的链接和按钮有一个体面的可点击区域, 并可以使用键盘导航。没有太多的功能需要稳定的手, 比如悬停在元素上以显示帮助弹出窗口, 这都将会有帮助。</p><h3 id="认知能力"><a href="#认知能力" class="headerlink" title="认知能力"></a>认知能力</h3><p>随着年龄的增长, 我们在网站上变得更加保守—一项研究表明, 45% 的接受访谈的老年人不愿尝试新事物或浏览网站。互动往往是缓慢和有条不紊的。老年人比30岁以下的人更有可能放弃一项任务。</p><p>确保您的网站理解和使用尽可能简单。使用简单的英语, 并保持缩写和行话的最低限度。尽量不要有太多的组件分心, 如自动改变旋转。</p><p><a href="http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-399161.jpeg" target="_blank" rel="noopener"></a></p><p>不用说, 数码潮老人 没有受到这些体贴因素的照顾。在这个人口统计中, 有很多人没有出现任何问题。但通过确保你的网站是年龄友好的, 你会给自己一个更大的机会, 进入这个市场。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot;&gt;&lt;a href=&quot;#上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot; class=&quot;headerlink&quot; title=&quot;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&quot;&gt;&lt;/a&gt;上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;http://whatusersdo.com/blog/make-websites-age-friendly/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GENERATION UX – HOW TO MAKE WEBSITES AGE-FRIENDLY&lt;/a&gt;&lt;br&gt;翻译：&lt;a href=&quot;http://artwalk.github.io//2017/05/11/MagicLang&quot;&gt;MagicLang&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术不仅仅适用于新千年的孩纸&quot;&gt;&lt;a href=&quot;#技术不仅仅适用于新千年的孩纸&quot; class=&quot;headerlink&quot; title=&quot;技术不仅仅适用于新千年的孩纸&quot;&gt;&lt;/a&gt;技术不仅仅适用于新千年的孩纸&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.whatusersdo.com/wp-content/uploads/pexels-photo-109029.jpeg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;50以上的人几乎占英国人口的三分之一。他们上网, 并且仅2015年他们花了 £144.5亿。76%的老年人每周至少上网买东西一次。50以上的老年人或者说 (数码潮时代出生的人), 也是富裕的一代, 在英国拥有几乎70% 的家庭财富。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进入 数码潮老人 市场并不仅仅是抛出一些看起来年轻的老年人的照片。这也代表着你的网站需要对这部分人做到用户友好 。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
  <entry>
    <title>Lessons in Navigating Large Companies</title>
    <link href="http://artwalk.github.io/2017/05/18/Lessons-in-Navigating-Large-Companies/"/>
    <id>http://artwalk.github.io/2017/05/18/Lessons-in-Navigating-Large-Companies/</id>
    <published>2017-05-18T09:19:05.000Z</published>
    <updated>2017-05-18T23:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卓越企业家-如何呆在大型公司养老"><a href="#卓越企业家-如何呆在大型公司养老" class="headerlink" title="卓越企业家-如何呆在大型公司养老"></a>卓越企业家-如何呆在大型公司养老</h1><p>原文：<a href="https://www.linkedin.com/pulse/entrepreneur-heart-lessons-navigating-large-companies-nazila-alasti?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="noopener">Entrepreneur at Heart - Lessons in Navigating Large Companies</a><br>翻译：<a href="http://artwalk.github.io//2017/05/11/MagicLang">MagicLang</a></p><p>反应是一致的。 什么？你你你 真的打算加入一个大公司吗？在我的朋友和同事中, 我被称为创业者。 我已经花了一半以上时间在的创业中, 过去6年是 Jooners 创始人兼首席执行官。早在2014成功的卖掉公司后, 我加入了 ebay。<br><a id="more"></a></p><p>通常, 人们都是从大公司跳槽到小公司。</p><p>我正在做相反的事情。</p><p>为啥呢?</p><p>因为… 像我这样的建设者和企业家喜欢 ebay，我是好奇在管理规模上。</p><p>这一切都自有道理。</p><p>创业人士, 具有高风险承受力。我们在处理不可预知性方面受过培训, 并能在不完全信息的情况下做出快速决策。大公司在新市场或新产品中的努力, 需要这种敏捷性。因此, 一个大型公司的新生项目配备了足智多谋的创业员工, 使其具有完善的战略意义。</p><p>然而, 这两个世界是截然不同的, 在其中一个有效的可能不适用于另一个。</p><p>这里是我的观察, 我从创业公司的 15 人到 ebay 的 12600 人。</p><ol><li><strong>向历史学习</strong>。花6月 (喘口气) 来了解公司在你到达之前是如何到达这里的。公司越大越老, 情况越复杂。 与老前辈建立非正式的关系, 了解情况。不像初创公司, 这里有历史, 并很重要。</li><li><strong>检查你的步调</strong>。 在创业公司的你不自觉的想要快。时间是你的敌人。在大公司, 急着完成项目, 过河拆桥, 将击沉你。不要把持久的成绩与清空清单混为一谈。 发掘在这个新的地方完成事情的正确步伐。</li><li><strong>把你的观点当作问题来表述</strong>。 许多你 “想出” 的点子, 可能已经被考虑过了。 明白为什么他们没有扎根。如果它真是一个新的想法或意见, 保持好奇和谦逊将赢得你的盟友, 并增加你的成功机会。</li><li><strong>小心 干活 vs. 管理</strong>。 在初创企业中, 项目工作与管理项目之间的界线往往模糊不清。这与大公司的不同, 在那里规模庞大的 “干活”, 需要资源和预算。这些资源需要管理。否则, 事情将无法完成。那么你的工作究竟是什么？你是在管理还是在干活？</li><li><strong>寻找 看起来相似的</strong>。 有没有人曾经走过你的道路？ 最近是否有收购和企业家进入公司？ 找到他们并向他们学习。 请他们把你指向那些对他们有用的人或过程。</li><li><strong>目标: 直接通信的代理</strong>。非正式的关系和对小公司高管的访问确保了您的项目与公司目标之间的一定程度的协调。 在大公司里, 并非所有的工作都是显而易见的。在接受工作分配之前, 请将目标与公司目标一致, 并把它们映射到更大的目的。 你有视线吗？ 你能解释一下这项工作是如何帮助公司的主要目标吗？如果没有, 请三思而后行。</li><li><strong>不需要英雄</strong>! 在创业的初创企业中, 预算是令人钦佩的。在大公司里, 没那么多。请参阅 #4。</li><li><strong>风控</strong>。 考虑在扩大对项目的支持方面花费25-30% 的时间。如果只有一个大佬在支持, 那么你需要 B 计划, 以防大佬跑了或者他们对项目没激情了。</li><li><strong>向上的指挥链</strong>… 你领导的领导知道你的项目吗？支持项目吗？如果不, 为什么不支持？能见度 2 或 3 级以上的指挥链信号都和项目息息相关。缺乏能见度是可以接受的, 但不要停留在阴影太长。</li><li><strong>最后</strong>…成为一个大组织的自我激励的创业雇佣是令人振奋的。 要有耐心。 要谦虚。从容不迫，校准影响期望值。记住, 时间可以是你的朋友。 祝你有个愉快的过渡。</li></ol><p>感谢 ebay 这个 非凡及罕见 的终身机会!</p><p>你有经历过从一个小公司到一个更大的企业吗？ 你学到了什么？可以在下面👇留言</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;卓越企业家-如何呆在大型公司养老&quot;&gt;&lt;a href=&quot;#卓越企业家-如何呆在大型公司养老&quot; class=&quot;headerlink&quot; title=&quot;卓越企业家-如何呆在大型公司养老&quot;&gt;&lt;/a&gt;卓越企业家-如何呆在大型公司养老&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;https://www.linkedin.com/pulse/entrepreneur-heart-lessons-navigating-large-companies-nazila-alasti?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entrepreneur at Heart - Lessons in Navigating Large Companies&lt;/a&gt;&lt;br&gt;翻译：&lt;a href=&quot;http://artwalk.github.io//2017/05/11/MagicLang&quot;&gt;MagicLang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;反应是一致的。 什么？你你你 真的打算加入一个大公司吗？在我的朋友和同事中, 我被称为创业者。 我已经花了一半以上时间在的创业中, 过去6年是 Jooners 创始人兼首席执行官。早在2014成功的卖掉公司后, 我加入了 ebay。&lt;br&gt;
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
  <entry>
    <title>Softwares speed up your learning</title>
    <link href="http://artwalk.github.io/2017/05/18/Softwares-speed-up-your-learning/"/>
    <id>http://artwalk.github.io/2017/05/18/Softwares-speed-up-your-learning/</id>
    <published>2017-05-17T22:23:19.000Z</published>
    <updated>2017-05-17T23:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Podcasts and videos are a typical way to study online, but they are numberless and as the collect is in human’s nature, how to increase this speed become more essential.</p><p>Typically, people can deal with native languages at a high speed.<br>As for me, 2x is comfortable, 3x is acceptable, 4x is fine with subtitle.</p><h2 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h2><p>A few years ago, I used to use Windows when I was still a university student, KMPlayer was the best in all type of video players, because other players may got distorted sound while changing. Later, the author left the company and rewrote a new one with <code>C++</code> and renamed it to <a href="https://potplayer.daum.net/" target="_blank" rel="noopener">PotPlayer</a>.</p><p>As on macOS, Movist is my first choice, which is also come from Korea. needless to say its brilliance and simplicity, it provide 4x without too much losses in audio track.<br>Other players like <a href="https://mpv.io/" target="_blank" rel="noopener">MPV</a>, although it provide no rate limit( yes, you can speed up to whatever you like) and open sourced, but you have to modify <code>~/.config/mpv/mpv.conf</code> each time if you want to change the default settings.</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><p>The good news is Podcasts on iPhone already have 2x (the odd thing is iTunes Podcasts don’t), and many study type apps also have this useful feature.</p><p>But I haven’t found any app provide more than 2x.</p><p>According to <a href="https://developer.apple.com/reference/avfoundation/avplayer#//apple_ref/occ/instp/AVPlayer/rate" target="_blank" rel="noopener"></a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="type">AVAudioPlayer</span>()</span><br><span class="line">player.prepareToPlay()</span><br><span class="line">player.enableRate = <span class="literal">true</span></span><br><span class="line">player.rate = <span class="number">2.0</span></span><br><span class="line">player.play()</span><br></pre></td></tr></table></figure><p>It seems merely change the <code>player.rate = 3.0</code> can do it if the audio is a file-based media. Dose this would cause distortion?</p><p>I’ll try it if I spare time one day.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Podcasts and videos are a typical way to study online, but they are numberless and as the collect is in human’s nature, how to increase t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MagicLang</title>
    <link href="http://artwalk.github.io/2017/05/11/MagicLang/"/>
    <id>http://artwalk.github.io/2017/05/11/MagicLang/</id>
    <published>2017-05-11T04:36:10.000Z</published>
    <updated>2017-05-18T23:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MagicLang"><a href="#MagicLang" class="headerlink" title="MagicLang"></a><a href="https://github.com/Artwalk/MagicLang" target="_blank" rel="noopener">MagicLang</a></h1><h2 id="Magicka-The-Other-Side-of-the-Language"><a href="#Magicka-The-Other-Side-of-the-Language" class="headerlink" title="Magicka: The Other Side of the Language"></a><a href="https://github.com/Artwalk/MagicLang" target="_blank" rel="noopener">Magicka: The Other Side of the Language</a></h2><p>魔能：语言的另一面</p><p>这里的 Language 不仅仅是编程语言，也泛指自然语言哈~</p><p>自从考试连续五次战五渣后 T\^T，最近打算认认真真的恶补英语<br>平时看到不错的 Blog 有时间就顺手转换下 (￣▽￣)~*</p><p>鉴于 1/3 的脚已跨入棺材⚰，先用养老镇楼好了~</p><hr><ol><li><a href="Contents/001.md">卓越企业家-如何呆在大型公司养老</a></li><li><a href="Contents/002.md">上代人的用户体验-如何设计合适老年人的网站（赚老年人的💰）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MagicLang&quot;&gt;&lt;a href=&quot;#MagicLang&quot; class=&quot;headerlink&quot; title=&quot;MagicLang&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Artwalk/MagicLang&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="MagicLang" scheme="http://artwalk.github.io/tags/MagicLang/"/>
    
  </entry>
  
</feed>
